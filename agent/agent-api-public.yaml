swagger: '2.0'
info:
  version: '1.48.1'
  title: Agent API
  description: |
    This document refers to Symphony API calls to send and receive messages
    and content. They need the on-premise Agent installed to perform
    decryption/encryption of content.

    - sessionToken and keyManagerToken can be obtained by calling the
    authenticationAPI on the symphony back end and the key manager
    respectively. Refer to the methods described in authenticatorAPI.yaml.
    - Actions are defined to be atomic, ie will succeed in their entirety
    or fail and have changed nothing.
    - If it returns a 40X status then it will have sent no message to any
    stream even if a request to aome subset of the requested streams
    would have succeeded.
    - If this contract cannot be met for any reason then this is an error
    and the response code will be 50X.
    - MessageML is a markup language for messages. See reference here:
    https://developers.symphony.com/documentation/message_format_reference

paths:
  '/v4/datafeed/create':
    post:
      summary: Create a new real time message event stream.
      description: |
          A datafeed provides the messages in all conversations that a user is in.
          This also includes system messages like new users joining a chatroom.

          A datafeed will expire if it isn't read before its capacity is reached.
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: keyManagerToken
          description: Key Manager authentication token.
          in: header
          required: true
          type: string
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Datafeed
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Datafeed'
        '400':
          description: 'Client error.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v4/datafeed/{id}/read':
    get:
      summary: Read a given datafeed.
      description: |
          Read messages from the given datafeed. If no more messages are available then this method will block.
          It is intended that the client should re-call this method as soon as it has processed the messages
          received in the previous call. If the client is able to consume messages more quickly than they become
          available then each call will initially block, there is no need to delay before re-calling this method.

          A datafeed will expire if its unread capacity is reached.
          A datafeed can only be consumed by one client thread at a time. E.g. polling the datafeed by two threads may lead to messages being delivered out of order.
      parameters:
      - name: id
        description: |
          Datafeed ID
        in: path
        required: true
        type: string
      - name: limit
        description: |
            Max No. of messages to return.
        in: query
        type: integer
      - name: sessionToken
        description: Session authentication token.
        in: header
        required: true
        type: string
      - name: keyManagerToken
        description: Key Manager authentication token.
        in: header
        required: true
        type: string
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Datafeed
      responses:
        '200':
          description: List of messages that have occurred since last time this URL was polled. If the list is empty, it means the request has reached its timeout, and the client should poll again.
          schema:
            $ref: '#/definitions/V4EventList'
        '204':
          description: No Messages.
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v2/HealthCheck':
     get:
       summary: Checks the health of the Agent.
       description: |
           Used to validate the configuration of the agent.
           Makes a request to the HealthCheck on the Symphony cloud.
           Makes a request to the HealthCheck on the Key Manager service.
           Encryts and decrypts a message inside either agent or user SbeSession with wall thread id.
       parameters:
       - name: sessionToken
         description: Session authentication token.
         in: header
         required: false
         type: string
       - name: keyManagerToken
         description: Key Manager authentication token.
         in: header
         required: false
         type: string
       consumes:
         - application/json
       produces:
         - application/json
       tags:
         - System
       responses:
         '200':
           description: The Agent is functioning properly.
           schema:
             $ref: '#/definitions/V2HealthCheckResponse'
  '/v4/message/import':
    post:
      summary: Import messages from other systems into Symphony.
      description: |
        Sends a message to be imported into the system.
        Allows you to override the timestamp and author of the message with your desired values.
        The requesting user must have the Content Management role.
        The user that the message is intended to have come from must also be present in the conversation.
        The intended message timestamp must be a valid time from the past. It cannot be a future timestamp.
        Optionally the original message ID can be specified to identify the imported message for the purpose of repeat imports.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: keyManagerToken
          description: Key Manager authentication token.
          in: header
          required: true
          type: string
        - name: messageList
          in: body
          required: true
          schema:
            $ref: '#/definitions/V4MessageImportList'
      tags:
        - Messages
      responses:
        '200':
          description: Message sent.
          schema:
            $ref: '#/definitions/V4ImportResponseList'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/message/search':
    get:
      summary: Search messages
      description: |
          Search messages according to the specified criteria. The "query" parameter takes a search query defined as
          "field:value" pairs combined by the operator "AND" (e.g. "text:foo AND autor:bar"). Supported fields are
           (case-insensitive): "text", "author", "hashtag", "cashtag", "mention", "signal", "fromDate", "toDate",
           "streamId", "streamType".
           "text" search requires a "streamId" to be specified.
           "streamType" accepts one of the following values: "chat" (IMs and MIMs), "im", "mim", "chatroom", "post".
           "signal" queries can only be combined with "fromDate", "toDate", "skip" and "limit" parameters.
      produces:
        - application/json
      parameters:
        - name: query
          description: |
            The search query. See above for the query syntax.
          in: query
          type: string
          required: true
        - name: skip
          description: |
            No. of results to skip.
          in: query
          type: integer
        - name: limit
          description: |
            Max no. of results to return. If no value is provided, 50 is the default.
          in: query
          type: integer
          required: false
        - name: scope
          description: |
            Describes where content should be searched for that query.
            It can exclusively apply to Symphony content or to one Connector.
          in: query
          type: string
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: keyManagerToken
          description: Key Manager authentication token.
          in: header
          required: true
          type: string
      tags:
        - Messages
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/V4MessageList'
        '204':
          description: No Messages.
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Search messages
      description: |
          Search messages according to the specified criteria.
      produces:
        - application/json
      parameters:
        - name: query
          description: |
            The search query. See above for the query syntax.
          in: body
          required: true
          schema:
            $ref: '#/definitions/MessageSearchQuery'
        - name: skip
          description: |
            No. of results to skip.
          in: query
          type: integer
        - name: limit
          description: |
            Max no. of results to return. If no value is provided, 50 is the default.
          in: query
          type: integer
          required: false
        - name: scope
          description: |
            Describes where content should be searched for that query.
            It can exclusively apply to Symphony content or to one Connector.
          in: query
          type: string
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: keyManagerToken
          description: Key Manager authentication token.
          in: header
          required: true
          type: string
      tags:
        - Messages
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/V4MessageList'
        '204':
          description: No Messages.
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/stream/{sid}/attachment':
    get:
      summary: Download an attachment.
      description: |
        Downloads the attachment body by the attachment ID, stream ID, and message ID.
      consumes:
        - application/json
      produces:
        - application/octet-stream
      parameters:
        - name: sid
          description: Stream ID
          in: path
          required: true
          type: string
        - name: fileId
          description: The attachment ID (Base64-encoded)
          in: query
          required: true
          type: string
        - name: messageId
          description: The ID of the message containing the attachment
          in: query
          required: true
          type: string
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: keyManagerToken
          description: Key Manager authentication token.
          in: header
          required: true
          type: string
      tags:
        - Attachments
      responses:
        '200':
          description: 'Attachment body as Base64 encoded string.'
          schema:
            type: string
            format: byte
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v4/stream/{sid}/message':
    get:
      summary: Get messages from an existing stream.
      description: |
          A caller can fetch all unseen messages by passing the timestamp of
          the last message seen as the since parameter and the number of messages
          with the same timestamp value already seen as the skip parameter. This
          means that every message will be seen exactly once even in the case that
          an additional message is processed with the same timestamp as the last
          message returned by the previous call, and the case where there are
          more than maxMessages with the same timestamp value.

          This method is intended for historic queries and is generally reliable
          but if guaranteed delivery of every message in real time is required
          then the equivilent firehose method should be called.
      produces:
        - application/json
      parameters:
        - name: sid
          description: |
            Stream ID
          in: path
          required: true
          type: string
        - name: since
          description: |
            Timestamp of first required message.

            This is a long integer value representing milliseconds since
            Jan 1 1970
          in: query
          required: true
          type: integer
          format: int64
        - name: skip
          description: |
            No. of messages to skip.
          in: query
          type: integer
        - name: limit
          description: |
            Max No. of messages to return. If no value is provided, 50 is the default. The maximum supported value is 500.
          in: query
          type: integer
          required: false
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: keyManagerToken
          description: Key Manager authentication token.
          in: header
          required: true
          type: string
      tags:
        - Messages
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/V4MessageList'
        '204':
          description: No Messages.
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v4/stream/{sid}/message/create':
    post:
      summary: Post a message to one existing stream.
      description: |
        Post a new message to the given stream. The stream can be a chatroom,
        an IM or a multiparty IM.

        You may include an attachment on the message.

        The message can be provided as MessageMLV2 or PresentationML. Both formats support Freemarker templates.

        The optional parameter "data" can be used to provide a JSON payload containing entity data.
        If the message contains explicit references to entity data (in "data-entity-id" element attributes),
        this parameter is required.

        If the message is in MessageML and fails schema validation
        a client error results

        If the message is sent then 200 is returned.

        Regarding authentication, you must either use the sessionToken which was created for delegated app access
        or both the sessionToken and keyManagerToken together.
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: sid
          description: Stream ID
          in: path
          required: true
          type: string
        - name: sessionToken
          description: Authorization token used to make delegated calls.
          in: header
          required: true
          type: string
        - name: keyManagerToken
          description: Key Manager authentication token.
          in: header
          type: string
          required: false
        - name: message
          description: The message payload in MessageML.
          in: formData
          type: string
          required: false
        - name: data
          description: Optional message data in EntityJSON.
          in: formData
          type: string
          required: false
        - name: version
          description: |
            Optional message version in the format "major.minor". If empty, defaults to the latest supported version.
          in: formData
          type: string
          required: false
        - name: attachment
          description: Optional file attachment.
          in: formData
          type: file
          required: false
        - name: preview
          description: Optional attachment preview.
          in: formData
          type: file
          required: false

      tags:
        - Messages
      responses:
        '200':
          description: Message sent.
          schema:
            $ref: '#/definitions/V4Message'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v3/stream/{sid}/share':
    post:
      summary: PROVISIONAL -  Share a piece of content into Symphony
      description: |
        Given a 3rd party content (eg. news article), it can share to the given stream.
        The stream can be a chatroom, an IM or a multiparty IM.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sid
          description: Stream ID
          in: path
          required: true
          type: string
        - name: sessionToken
          description: Session authentication token.
          in: header
          required: true
          type: string
        - name: keyManagerToken
          description: Key Manager authentication token.
          in: header
          required: false
          type: string
        - name: shareContent
          in: body
          required: true
          schema:
            $ref: '#/definitions/ShareContent'
      tags:
        - Share
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/V2Message'
        '400':
          description: 'Client error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Server error, see response body for further details.'
          schema:
            $ref: '#/definitions/Error'
  '/v1/util/echo':
    post:
                  summary: Test endpoint, returns input.
                  consumes:
                    - application/json
                  produces:
                    - application/json
                  parameters:
                    - name: sessionToken
                      description: Session authentication token.
                      in: header
                      required: true
                      type: string
                    - name: keyManagerToken
                      description: Key Manager authentication token.
                      in: header
                      required: true
                      type: string
                    - name: echoInput
                      description: |
                        Message in plain text
                      in: body
                      required: true
                      schema:
                        $ref: '#/definitions/SimpleMessage'
                  tags:
                    - Util
                  responses:
                    '200':
                      description: Message sent.
                      schema:
                        $ref: '#/definitions/SimpleMessage'
                    '400':
                      description: 'Client error, see response body for further details.'
                      schema:
                        $ref: '#/definitions/Error'
                    '401':
                      description: 'Unauthorized: Session tokens invalid.'
                      schema:
                        $ref: '#/definitions/Error'
                    '403':
                      description: 'Forbidden: Caller lacks necessary entitlement.'
                      schema:
                        $ref: '#/definitions/Error'
                    '500':
                      description: 'Server error, see response body for further details.'
                      schema:
                        $ref: '#/definitions/Error'

definitions:
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
  V2BaseMessage:
    type: object
    discriminator: v2messageType
    properties:
      id:
        type: string
        description: The messageId is assigned by the ingestor service when a message is sent.
      timestamp:
        type: string
      v2messageType:
        type: string
      streamId:
        type: string
    required:
    - v2messageType
    - timestamp
    - streamId
  V2Message:
    type: object
    description: A representation of a message sent by a user of Symphony.
    allOf:
    - $ref: '#/definitions/V2BaseMessage'
    - type: object
      properties:
        message:
          type: string
          format: MessageML
          description: Message text in MessageML
        fromUserId:
          type: integer
          format: int64
          description: the Symphony userId of the user who sent the message. This will be populated by the server (and actually ignored if included when sending a message).
        attachments:
          type: array
          items:
            $ref: '#/definitions/AttachmentInfo'
      required:
      - message
      - fromUserId
  RoomCreatedMessage:
    type: object
    description: Generated when a room is created.
    allOf:
    - $ref: '#/definitions/V2BaseMessage'
    - type: object
      properties:
        creationDate:
          type: integer
          format: int64
        name:
          type: string
        keywords:
          type: array
          items:
            $ref: '#/definitions/RoomTag'
        description:
          type: string
        createdByUserId:
          type: integer
          format: int64
          description: The Symphony userId of the user who created the room.
        readOnly:
          type: boolean
        discoverable:
          type: boolean
        public:
          type: boolean
        membersCanInvite:
          type: boolean
        copyProtected:
          type: boolean
  RoomDeactivatedMessage:
    type: object
    description: Generated when a room is deactivated.
    allOf:
    - $ref: '#/definitions/V2BaseMessage'
    - type: object
      properties:
        deactivatedByUserId:
          type: integer
          format: int64
  RoomReactivatedMessage:
    type: object
    description: Generated when a room is reactivated.
    allOf:
    - $ref: '#/definitions/V2BaseMessage'
    - type: object
      properties:
        reactivatedByUserId:
          type: integer
          format: int64
  RoomUpdatedMessage:
    type: object
    description: Generated when a room is updated.
    allOf:
    - $ref: '#/definitions/V2BaseMessage'
    - type: object
      properties:
        oldName:
          type: string
        newName:
          type: string
        keywords:
          type: array
          items:
            $ref: '#/definitions/RoomTag'
        oldDescription:
          type: string
        newDescription:
          type: string
        membersCanInvite:
          type: boolean
        discoverable:
          type: boolean
        readOnly:
          type: boolean
        copyProtected:
          type: boolean
  UserJoinedRoomMessage:
    type: object
    description: Generated when a user joins a room.
    allOf:
    - $ref: '#/definitions/V2BaseMessage'
    - type: object
      properties:
        addedByUserId:
          type: integer
          format: int64
        memberAddedUserId:
          type: integer
          format: int64
  UserLeftRoomMessage:
    type: object
    description: Generated when a user leaves a room.
    allOf:
    - $ref: '#/definitions/V2BaseMessage'
    - type: object
      properties:
        removedByUserId:
          type: integer
          format: int64
        memberLeftUserId:
          type: integer
          format: int64
        informationBarrierRemediation:
          type: boolean
  RoomMemberPromotedToOwnerMessage:
    type: object
    description: Generated when a room member is promoted to owner.
    allOf:
    - $ref: '#/definitions/V2BaseMessage'
    - type: object
      properties:
        promotedByUserId:
          type: integer
          format: int64
        promotedUserId:
          type: integer
          format: int64
  RoomMemberDemotedFromOwnerMessage:
    type: object
    description: Generated when a room member is promoted to owner.
    allOf:
    - $ref: '#/definitions/V2BaseMessage'
    - type: object
      properties:
        demotedByUserId:
          type: integer
          format: int64
        demotedUserId:
          type: integer
          format: int64
  ConnectionRequestMessage:
    type: object
    description: Generated when a connection request is sent.
    allOf:
    - $ref: '#/definitions/V2BaseMessage'
    - type: object
      properties:
        requestingUserId:
          type: integer
          format: int64
        targetUserId:
          type: integer
          format: int64
        firstRequestedAt:
          type: integer
          format: int64
        updatedAt:
          type: integer
          format: int64
        requestCounter:
          type: integer
        status:
          type: string
  AttachmentInfo:
    type: object
    properties:
      id:
        type: string
        description: The attachment ID.
      name:
        type: string
        description: The file name.
      size:
        type: integer
        format: int64
        description: Size in bytes.
    required:
    - id
    - name
    - size
  V2MessageList:
    type: array
    items:
      $ref: '#/definitions/V2BaseMessage'
  SimpleMessage:
    description: A string wrapped in a JSON object.
    type: object
    properties:
      message:
        type: string
  Datafeed:
    type: object
    properties:
      id:
        type: string
  RoomTag:
    description: Room Tag object. A key:value pair describing additional properties of the room.
    properties:
      key:
        description: A unique label of the Tag.
        type: string
      value:
        description: The value of this Tag's label.
        type: string
    required:
    - key
    - value
  ShareArticle:
    type: object
    properties:
      articleId:
        type: string
        description: An ID for this article that should be unique to the calling application. Either an articleId or an articleUrl is required.
      title:
        type: string
        description: The title of the article
      subTitle:
        type: string
        description: The subtitle of the article
      message:
        type: string
        description: The message text that can be send along with the shared article
      publisher:
        type: string
        description: Publisher of the article
      publishDate:
        type: integer
        format: int64
        description: Article publish date in unix timestamp
      thumbnailUrl:
        type: string
        description: Url to the thumbnail image
      author:
        type: string
        description: Author of the article
      articleUrl:
        type: string
        description: Url to the article
      summary:
        type: string
        description: Preview summary of the article
      appId:
        type: string
        description: App ID of the calling application
      appName:
        type: string
        description: App name of the calling application
      appIconUrl:
        type: string
        description: App icon url of the calling application
    required:
    - title
    - publisher
    - author
    - appId
  ShareContent:
    type: object
    properties:
      type:
        type: string
        description: Type of content to be shared.  Currently only support "com.symphony.sharing.article"
      content:
        $ref: '#/definitions/ShareArticle'
  V2HealthCheckResponse:
     type: object
     properties:
       podConnectivity:
         type: boolean
         description: Indicates whether the Agent server can connect to the Pod
       podConnectivityError:
         type: string
         description: Error details in case of no Pod connectivity
       keyManagerConnectivity:
         type: boolean
         description: Indicates whether the Agent server can connect to the Key Manager
       keyManagerConnectivityError:
         type: string
         description: Error details in case of no Key Manager connectivity
       encryptDecryptSuccess:
         type: boolean
         description: Indicates whether the Agent can successfully decrypt and encrypt messages
       encryptDecryptError:
         type: string
         description: Error details in case of the encryption or decryption of the message fails
       podVersion:
         type: string
         description: The version number of the pod
       agentVersion:
         type: string
         description: The version number of the Agent server
  MessageSearchQuery:
    type: object
    properties:
      text:
        type: string
        description: Search for messages containing this text. Requires streamId to be specified.
      streamId:
        type: string
        description: Search for messages sent to this stream
      streamType:
        type: string
        description: |
          Search for messages sent to this type of streams. Accepted values are CHAT, IM, MIM, ROOM, POST.
      author:
        type: integer
        format: int64
        description: Search for messages sent by this user ID
      hashtag:
        type: string
        description: Search for messages containing this hashtag
      cashtag:
        type: string
        description: Search for messages containing this cashtag
      mention:
        type: integer
        format: int64
        description: Search for messages mentioning this user ID
      signal:
        type: string
        description: |
          Search for messages matching this signal. Can only be combined with date filtering and paging parameters.
      fromDate:
        type: integer
        format: int64
        description: Search for messages sent on or after this timestamp
      toDate:
        type: integer
        format: int64
        description: Search for messages sent before this timestamp
  V4MessageImportList:
    description: |
      An ordered list of historic messages to be imported.
      A list of import responsees will be returned in the same order.
    type: array
    items:
      $ref: '#/definitions/V4ImportedMessage'
  V4ImportedMessage:
    description: |
      A historic message to be imported into the system.
      The importing user must have the Content Management role.
      Also, the importing user must be a member of the conversation it is importing into.
      The user that the message is intended to have come from must also be present in the conversation.
      The intended message timestamp must be a valid time from the past. It cannot be a future timestamp.
      By design, imported messages do not stream to datafeed or firehose endpoints.
    type: object
    properties:
      message:
        type: string
        format: MessageML
        description: Message text in MessageMLV2
      data:
        type: string
        format: JSON
        description: Entity data in EntityJSON
      intendedMessageTimestamp:
        description: |
          The timestamp representing the time when the message was sent in the original system
          in milliseconds since Jan 1st 1970.
        type: integer
        format: int64
      intendedMessageFromUserId:
        description: |
          The long integer userid of the Symphony user who you intend to show sent the message.
        type: integer
        format: int64
      originatingSystemId:
        description: |
          The ID of the system through which the message was originally sent.
        type: string
      originalMessageId:
        description: |
          The ID of the message in the original system.
        type: string
      streamId:
        type: string
    required:
    - message
    - intendedMessageTimestamp
    - intendedMessageFromUserId
    - originatingSystemId
    - streamId
  V4ImportResponseList:
    type: array
    items:
      $ref: '#/definitions/V4ImportResponse'
  V4ImportResponse:
    type: object
    properties:
      messageId:
        description: |
          If the message was successfully imported then the message ID in the system
          of the newly created message.
        type: string
      originatingSystemId:
        description: |
          The ID of the system through which the message was originally sent.
        type: string
      originalMessageId:
        description: |
          The ID of the message in the original system.
        type: string
      diagnostic:
        description: |
          A diagnostic message containing an error message in the event that the
          message import failed. May also be present in the case of a successful
          call if there is useful narrative to return.
        type: string
  V4AttachmentInfo:
    type: object
    properties:
      id:
        type: string
        description: The attachment ID.
      name:
        type: string
        description: The file name.
      size:
        type: integer
        format: int64
        description: Size in bytes.
      images:
        type: array
        items:
          $ref: '#/definitions/V4ThumbnailInfo'
    required:
    - id
    - name
    - size
  V4ThumbnailInfo:
    type: object
    properties:
      id:
        type: string
        description: The thumbnail ID.
      dimension:
        type: string
        description: The thumbnail pixel size.
  V4MessageList:
    type: array
    items:
      $ref: '#/definitions/V4Message'
  V4Message:
    type: object
    description: A representation of a message sent by a user of Symphony
    properties:
      messageId:
        type: string
        description: Id of the message
      timestamp:
        type: integer
        format: int64
        description: Timestamp of the message in milliseconds since Jan 1 1970
      message:
        type: string
        format: MessageMLV2
        description: Message content in MessageMLV2
      data:
        type: string
        format: JSON
        description: Message data in EntityJSON
      attachments:
        description: Message attachments
        type: array
        items:
          $ref: '#/definitions/V4AttachmentInfo'
      user:
        $ref: '#/definitions/V4User'
        description: Message author
      stream:
        $ref: '#/definitions/V4Stream'
        description: Message destination
      externalRecipients:
        description: Indicates if the message have external recipients. Only present on real time messaging.
        type: boolean
  V4User:
    type: object
    properties:
      userId:
        type: integer
        format: int64
        description: Id of user
      firstName:
        type: string
        description: First name of user
      lastName:
        type: string
        description: Last name of user
      displayName:
        type: string
        description: User display name
      email:
        type: string
        description: Email of user
      username:
        type: string
        description: Applicable only to internal users
  V4Stream:
    type: object
    properties:
      streamId:
        type: string
        description: Id of stream
      streamType:
        type: string
        description: |
          Stream type, possible values are:
            - IM
            - MIM
            - ROOM
            - POST
      roomName:
        type: string
        description: Applicable only to rooms
      members:
        description: Applicable only to IM Created
        type: array
        items:
          $ref: '#/definitions/V4User'
      external:
        type: boolean
  V4RoomProperties:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      creatorUser:
        $ref: '#/definitions/V4User'
      createdDate:
        type: integer
        format: int64
        description: Timestamp
      external:
        type: boolean
      public:
        type: boolean
      copyProtected:
        type: boolean
      readOnly:
        type: boolean
      discoverable:
        type: boolean
      membersCanInvite:
        type: boolean
      keywords:
        type: array
        items:
          $ref: '#/definitions/V4KeyValuePair'
  V4KeyValuePair:
    type: object
    properties:
      key:
        type: string
      value:
        type: string
  V4MessageSent:
    type: object
    properties:
      message:
        $ref: '#/definitions/V4Message'
  V4Initiator:
    type: object
    properties:
      user:
        $ref: '#/definitions/V4User'
  V4SharedPost:
    type: object
    properties:
      message:
        $ref: '#/definitions/V4Message'
      sharedMessage:
        $ref: '#/definitions/V4Message'
  V4InstantMessageCreated:
    type: object
    properties:
      stream:
        $ref: '#/definitions/V4Stream'
  V4RoomCreated:
    type: object
    properties:
      stream:
        $ref: '#/definitions/V4Stream'
      roomProperties:
        $ref: '#/definitions/V4RoomProperties'
  V4RoomUpdated:
    type: object
    properties:
      stream:
        $ref: '#/definitions/V4Stream'
      newRoomProperties:
        $ref: '#/definitions/V4RoomProperties'
  V4RoomDeactivated:
    type: object
    properties:
      stream:
        $ref: '#/definitions/V4Stream'
  V4RoomReactivated:
    type: object
    properties:
      stream:
        $ref: '#/definitions/V4Stream'
  V4UserJoinedRoom:
    type: object
    properties:
      stream:
        $ref: '#/definitions/V4Stream'
      affectedUser:
        description: User who was affected by the action (i.e. added to the room)
        $ref: '#/definitions/V4User'
  V4UserLeftRoom:
    type: object
    properties:
      stream:
        $ref: '#/definitions/V4Stream'
      affectedUser:
        description: User who was affected by the action (i.e. left the room)
        $ref: '#/definitions/V4User'
  V4RoomMemberPromotedToOwner:
    type: object
    properties:
      stream:
        $ref: '#/definitions/V4Stream'
      affectedUser:
        description: User who was affected by the action (i.e. promoted to owner)
        $ref: '#/definitions/V4User'
  V4RoomMemberDemotedFromOwner:
    type: object
    properties:
      stream:
        $ref: '#/definitions/V4Stream'
      affectedUser:
        description: User who was affected by the action (i.e. demoted from owner)
        $ref: '#/definitions/V4User'
  V4ConnectionRequested:
    type: object
    properties:
      toUser:
        description: User who received the connection request
        $ref: '#/definitions/V4User'
  V4ConnectionAccepted:
    type: object
    properties:
      fromUser:
        description: User who sent the connection request
        $ref: '#/definitions/V4User'
  V4MessageSuppressed:
    type: object
    properties:
      messageId:
        type: string
      stream:
        description: the stream holding the suppressed message
        $ref: '#/definitions/V4Stream'
  V4Payload:
    type: object
    properties:
      messageSent:
        $ref: '#/definitions/V4MessageSent'
      sharedPost:
        $ref: '#/definitions/V4SharedPost'
      instantMessageCreated:
        $ref: '#/definitions/V4InstantMessageCreated'
      roomCreated:
        $ref: '#/definitions/V4RoomCreated'
      roomUpdated:
        $ref: '#/definitions/V4RoomUpdated'
      roomDeactivated:
        $ref: '#/definitions/V4RoomDeactivated'
      roomReactivated:
        $ref: '#/definitions/V4RoomReactivated'
      userJoinedRoom:
        $ref: '#/definitions/V4UserJoinedRoom'
      userLeftRoom:
        $ref: '#/definitions/V4UserLeftRoom'
      roomMemberPromotedToOwner:
        $ref: '#/definitions/V4RoomMemberPromotedToOwner'
      roomMemberDemotedFromOwner:
        $ref: '#/definitions/V4RoomMemberDemotedFromOwner'
      connectionRequested:
        $ref: '#/definitions/V4ConnectionRequested'
      connectionAccepted:
        $ref: '#/definitions/V4ConnectionAccepted'
      messageSuppressed:
        $ref: '#/definitions/V4MessageSuppressed'
  V4Event:
    type: object
    properties:
      id:
        type: string
        description: Event ID
      timestamp:
        type: integer
        format: int64
        description: Timestamp of event
      type:
        type: string
        description: |
          Event type, possible events are:
            - MESSAGESENT
            - SHAREDPOST
            - INSTANTMESSAGECREATED
            - ROOMCREATED
            - ROOMUPDATED
            - ROOMDEACTIVATED
            - ROOMREACTIVATED
            - USERJOINEDROOM
            - USERLEFTROOM
            - ROOMMEMBERPROMOTEDTOOWNER
            - ROOMMEMBERDEMOTEDFROMOWNER
            - CONNECTIONREQUESTED
            - CONNECTIONACCEPTED
            - MESSAGESUPPRESSED
      initiator:
        description: Actor who initiated the event
        $ref: '#/definitions/V4Initiator'
      payload:
        description: Holds payload for all event types
        $ref: '#/definitions/V4Payload'
  V4EventList:
    type: array
    items:
      $ref: '#/definitions/V4Event'
