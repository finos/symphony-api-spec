openapi: 3.0.1
info:
  title: Pod API
  description: |
    This document refers to Symphony API calls that do not need
    encryption or decryption of content.

    - sessionToken can be obtained by calling the
    authenticationAPI on the symphony back end and the key manager
    respectively. Refer to the methods described in authenticatorAPI.yaml.
    - Actions are defined to be atomic, ie will succeed in their entirety
    or fail and have changed nothing.
    - If it returns a 40X status then it will have made no change to the
    system even if ome subset of the request would have succeeded.
    - If this contract cannot be met for any reason then this is an error
    and the response code will be 50X.
  version: "24.1.0"
servers:
  - url: http://yourpodURL.symphony.com/pod
paths:
  /v1/companycert/list:
    get:
      operationId: v1CompanycertListGet
      tags:
        - Security
      summary: List all trusted certs
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: skip
          in: query
          description: Pagination start
          schema:
            type: integer
        - name: limit
          in: query
          description: Row limit
          schema:
            type: integer
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyCertInfoList'
              examples:
                response:
                  value:
                    - companyCertAttributes:
                        name: agentservice
                        type:
                          type: USER
                        status:
                          type: TRUSTED
                      companyCertInfo:
                        fingerPrint: 300a...
                        lastSeen: 0
                        updatedAt: 0
                        updatedBy: 0
                        commonName: agentservice
                        expiryDate: 1781886755000
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v2/companycert/create:
    post:
      operationId: v2CompanycertCreatePost
      tags:
        - Security
      summary: Create a company trusted or untrusted certificate. Different from V1
        in that we reject expired certificates.
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyCert'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyCertDetail'
              examples:
                response:
                  value:
                    - companyCertAttributes:
                        name: jira
                        type:
                          type: USER
                        status:
                          type: KNOWN
                      companyCertInfo:
                        fingerPrint: 450369...
                        issuerFingerPrint: c35680...
                        lastSeen: 1529994790226
                        updatedAt: 1529598066602
                        updatedBy: 9208409884327
                        commonName: jiraWebHookIntegration
                        expiryDate: 1768510565000
                      certInfo:
                        - name: General
                          attributes:
                            - name: Issuer
                              value: C=US O=Symphony Communications LLC CN=bot_user_provisioning
                            - name: Subject
                              value: C=US OU=NOT FOR PRODUCTION USE O=Symphony Communications LLC
                                CN=jiraWebHookIntegration
                            - name: Signature Algorithm
                              value: SHA256withRSA
                        - name: Validity
                          attributes:
                            - name: Not Before
                              value: Mon Jan 15 20:56:05 UTC 2018
                            - name: Not After
                              value: Thu Jan 15 20:56:05 UTC 2026
                        - name: Public Key
                          attributes:
                            - name: Algorithm
                              value: RSA
                            - name: Format
                              value: X.509
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/companycert/delete:
    post:
      operationId: v1CompanycertDeletePost
      tags:
        - Security
      summary: Delete a company certificate
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StringId'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                response:
                  value:
                    format: TEXT
                    message: OK
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/companycert/{fingerPrint}/get:
    get:
      operationId: v1CompanycertFingerPrintGetGet
      tags:
        - Security
      summary: Get the details of a company certificate
      parameters:
        - name: fingerPrint
          in: path
          description: Certificate fingerPrint (ID)
          required: true
          schema:
            type: string
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyCertDetail'
              examples:
                response:
                  value:
                    - companyCertAttributes:
                        name: jira
                        type:
                          type: USER
                        status:
                          type: KNOWN
                      companyCertInfo:
                        fingerPrint: 450369...
                        issuerFingerPrint: c35680...
                        lastSeen: 1529994790226
                        updatedAt: 1529598066602
                        updatedBy: 9208409884327
                        commonName: jiraWebHookIntegration
                        expiryDate: 1768510565000
                      certInfo:
                        - name: General
                          attributes:
                            - name: Issuer
                              value: C=US O=Symphony Communications LLC CN=bot_user_provisioning
                            - name: Subject
                              value: C=US OU=NOT FOR PRODUCTION USE O=Symphony Communications LLC
                                CN=jiraWebHookIntegration
                            - name: Signature Algorithm
                              value: SHA256withRSA
                        - name: Validity
                          attributes:
                            - name: Not Before
                              value: Mon Jan 15 20:56:05 UTC 2018
                            - name: Not After
                              value: Thu Jan 15 20:56:05 UTC 2026
                        - name: Public Key
                          attributes:
                            - name: Algorithm
                              value: RSA
                            - name: Format
                              value: X.509
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/companycert/{fingerPrint}/update:
    post:
      operationId: v1CompanycertFingerPrintUpdatePost
      tags:
        - Security
      summary: Update a company certificate
      parameters:
        - name: fingerPrint
          in: path
          description: Certificate fingerPrint (ID)
          required: true
          schema:
            type: string
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyCertAttributes'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                response:
                  value:
                    format: TEXT
                    message: OK
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/companycert/{fingerPrint}/issuedBy:
    get:
      operationId: v1CompanycertFingerPrintIssuedByGet
      tags:
        - Security
      summary: |
        Return a list of all certificates which were verified to the cert whose
        fingerprint is passed.
      parameters:
        - name: fingerPrint
          in: path
          description: Certificate fingerPrint (ID)
          required: true
          schema:
            type: string
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyCertInfoList'
              examples:
                response:
                  value:
                    - companyCertAttributes:
                        name: agentservice
                        type:
                          type: USER
                        status:
                          type: TRUSTED
                      companyCertInfo:
                        fingerPrint: 300a...
                        lastSeen: 0
                        updatedAt: 0
                        updatedBy: 0
                        commonName: agentservice
                        expiryDate: 1781886755000
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/companycert/podmanaged/list:
    get:
      operationId: v1CompanycertPodmanagedListGet
      tags:
        - Security
      summary: List all trusted certs
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: skip
          in: query
          description: Pagination start
          schema:
            type: integer
        - name: limit
          in: query
          description: Row limit
          schema:
            type: integer
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyCertInfoList'
              examples:
                response:
                  value:
                    - companyCertAttributes:
                        name: agentservice
                        type:
                          type: USER
                        status:
                          type: TRUSTED
                      companyCertInfo:
                        fingerPrint: 300a...
                        lastSeen: 0
                        updatedAt: 0
                        updatedBy: 0
                        commonName: agentservice
                        expiryDate: 1781886755000
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/companycert/type/list:
    post:
      operationId: v1CompanycertTypeListPost
      tags:
        - Security
      summary: List all certs of the given types
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: skip
          in: query
          description: Pagination start
          schema:
            type: integer
        - name: limit
          in: query
          description: Row limit
          schema:
            type: integer
      requestBody:
        description: Certificate type list
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyCertTypeList'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyCertInfoList'
              examples:
                response:
                  value:
                    - companyCertAttributes:
                        name: agentservice
                        type:
                          type: USER
                        status:
                          type: TRUSTED
                      companyCertInfo:
                        fingerPrint: 300a...
                        lastSeen: 0
                        updatedAt: 0
                        updatedBy: 0
                        commonName: agentservice
                        expiryDate: 1781886755000
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/podcert:
    get:
      operationId: v1PodcertGet
      tags:
        - Pod
      summary: |
        Retrieve the pod certificate that can be use to validate signed JWT tokens generated from the pod
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PodCertificate'
              examples:
                response:
                  value:
                    certificate: PEM_CERTIFICATE
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/connection/list:
    get:
      operationId: v1ConnectionListGet
      tags:
        - Connection
      summary: List of requesting user's connection
      description: |
        This retrieves all connections of the requesting user. (i.e. both connections in which the requesting user is the sender and those
        in which the requesting user is the inivtee) By default, if you haven't specified the connection status to filter on, this call will only
        return results for both "pending_incoming" and "pending_outgoing". You can optionally filter by userIds to further restrict the results of
        a specific connection status. If the users are in the same private pod, the users have an implicit connection status of "accepted". Those
        users will not be returned in the response if you don't specify the connection status as "accepted" (default is "pending")
        and the explicit userIds in the request.
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: status
          in: query
          description: |
            Filter the connection list based on the connection status.
            The connection status can only be pending_incoming, pending_outgoing, accepted, rejected, or all (all of the above)
          schema:
            type: string
            enum:
              - PENDING_INCOMING
              - PENDING_OUTGOING
              - ACCEPTED
              - REJECTED
              - ALL
        - name: userIds
          in: query
          description: |
            The userIds parameter should be specified as a comma delimited list of user ids and can be used to restrict the results of a specific connection.
            Note that this is particularly important if the caller intends to retrieve results for implicit connection (user within the same pod).
            Implicit connections will not be included in the response if userId is not provided.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserConnectionList'
              examples:
                response:
                  value:
                    - userId: 769658112378
                      status: ACCEPTED
                      updatedAt: 1471018076255
                    - userId: 7078106103809
                      status: PENDING_INCOMING
                      updatedAt: 1467562406219
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "404":
          description: "Not Found: Connection cannot be found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: // Not Found. Connection cannot be found. See response body for further details.
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/connection/create:
    post:
      operationId: v1ConnectionCreatePost
      tags:
        - Connection
      summary: Sends an invitation to connect with another user
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserConnectionRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserConnection'
              examples:
                response:
                  value:
                    userId: 7078106126503
                    status: PENDING_OUTGOING
                    firstRequestedAt: 1470018076306
                    updatedAt: 1471018076255
                    requestCounter: 1
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "404":
          description: "Not Found: User cannot be found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 404
                    message: // Not Found. User cannot be found. See response body for further details.
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/connection/accept:
    post:
      operationId: v1ConnectionAcceptPost
      tags:
        - Connection
      summary: Accept the connection request for the requesting user
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserConnectionRequest'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserConnection'
              examples:
                response:
                  value:
                    userId: 7078106126503
                    status: ACCEPTED
                    firstRequestedAt: 1470018076306
                    updatedAt: 1471018076255
                    requestCounter: 1
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "404":
          description: "Not Found: Connection cannot be found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 404
                    message: // Not Found. Connection cannot be found. See response body for further details.
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/connection/reject:
    post:
      operationId: v1ConnectionRejectPost
      tags:
        - Connection
      summary: Reject the connection request for the requesting user.
      description: |
        Reject the connection between the requesting user and request sender. If both users are in the same private pod,
        an error will be returned because both users have an implicit connection which cannot be rejected.
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserConnectionRequest'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserConnection'
              examples:
                response:
                  value:
                    userId: 7078106126503
                    status: REJECTED
                    firstRequestedAt: 1470018076306
                    updatedAt: 1471018076255
                    requestCounter: 1
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "404":
          description: "Not Found: Connection cannot be found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 404
                    message: // Not Found. Connection cannot be found. See response body for further details.
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/connection/user/{userId}/info:
    get:
      operationId: v1ConnectionUserUserIdInfoGet
      tags:
        - Connection
      summary: The status of the connection invitation to another user.
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: user Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserConnection'
              examples:
                response:
                  value:
                    userId: 769658112378
                    status: ACCEPTED
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "404":
          description: "Not Found: Connection cannot be found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 404
                    message: // Not Found. Connection cannot be found. See response body for further details.
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/connection/user/{uid}/remove:
    post:
      operationId: v1ConnectionUserUidRemovePost
      tags:
        - Connection
      summary: Removes a connection with a user.
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: |
            User ID as a decimal integer
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                response:
                  value:
                    format: TEXT
                    message: Connection Removed.
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "404":
          description: "Not Found: Connection cannot be found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 404
                    message: // Not Found. Connection cannot be found. See response body for further details.
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/im/create:
    post:
      operationId: v1ImCreatePost
      tags:
        - Streams
      summary: Create a new single or multi party instant message conversation between
        the caller and specified users.
      description: |
        At least one user ID must be provided or
        an error response will be sent.

        The caller is implicitly included in the members of the
        created chat.

        Duplicate users will be included in the membership of the chat but
        the duplication will be silently ignored.

        If there is an existing IM conversation with the same set of participants then
        the id of that existing stream will be returned.

        This method was incorrectly specified to take a query parameter in
        version 1.0 of this specification but now expects a JSON array of
        user IDs in the body of the request.
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      requestBody:
        description: List of (integer) User IDs of participants
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIdList'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stream'
              examples:
                response:
                  value:
                    id: xhGxbTcvTDK6EIMMrwdOrX___quztr2HdA
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/im/{id}/update:
    post:
      operationId: v1ImIdUpdatePost
      tags:
        - Streams
      summary: Update the attributes of an existing IM.
      parameters:
        - name: id
          in: path
          description: IM streamID
          required: true
          schema:
            type: string
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1IMAttributes'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1IMDetail'
              examples:
                response:
                  value:
                    V1IMAttributes:
                      pinnedMessageId: vd7qwNb6hLoUV0BfXXPC43___oPIvkwJbQ
                    IMSystemInfo:
                      id: usnBKBkH_BVrGOiVpaupEH___okFfE7QdA
                      creationDate: 1610520703317
                      active: true
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "451":
          description: "Unavailable for Legal Reasons: Compliance Issues found in\
            \ IM update request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 451
                    message: Compliance issues found in room update
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/im/{id}/info:
    get:
      operationId: v1ImIdInfoGet
      tags:
        - Streams
      summary: Get information about a partcular IM.
      parameters:
        - name: id
          in: path
          description: IM streamId
          required: true
          schema:
            type: string
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1IMDetail'
              examples:
                response:
                  value:
                    V1IMAttributes:
                      pinnedMessageId: vd7qwNb6hLoUV0BfXXPC43___oPIvkwJbQ
                    IMSystemInfo:
                      id: usnBKBkH_BVrGOiVpaupEH___okFfE7QdA
                      creationDate: 1610520703317
                      active: true
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/presence/feed/create:
    post:
      operationId: v1PresenceFeedCreatePost
      tags:
        - Presence
      summary: Create Presence status feed.
      description: |
        Create a new stream capturing presence status changes ("presence feed").
        When read from, the feed will return the current presence status of company (pod) users
        if it has changed since the last read.

        Returns the ID of the presence feed to be used in subsequent read operations.
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringId'
              examples:
                response:
                  value:
                    id: c4dca251-8639-48db-a9d4-f387089e17cf
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/presence/feed/{feedId}/read:
    get:
      operationId: v1PresenceFeedFeedIdReadGet
      tags:
        - Presence
      summary: Read a presence status feed.
      description: |
        Returns the current presence status of company (pod) users
        if it has changed since the last read. Returns up to 500 records at a time.
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: feedId
          in: path
          description: Presence feed ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2PresenceList'
              examples:
                response:
                  value:
                    - category: AVAILABLE
                      userId: 14568529068038
                      timestamp: 1533928483800
                    - category: ON_THE_PHONE
                      userId: 974217539631
                      timestamp: 1503286226030
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/presence/feed/{feedId}/delete:
    post:
      operationId: v1PresenceFeedFeedIdDeletePost
      tags:
        - Presence
      summary: Delete a presence status feed.
      description: |
        Returns the ID of the deleted feed.
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: feedId
          in: path
          description: Presence feed ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringId'
              examples:
                response:
                  value:
                    id: c4dca251-8639-48db-a9d4-f387089e17cf
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v3/room/create:
    post:
      operationId: v3RoomCreatePost
      tags:
        - Streams
      summary: Create a new chatroom.
      description: |
        Create a new chatroom.

        If no  attributes are specified, the room is created as a private chatroom.
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V3RoomAttributes'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V3RoomDetail'
              examples:
                response:
                  value:
                    roomAttributes:
                      name: API room
                      keywords:
                        - key: region
                          value: EMEA
                        - key: lead
                          value: Bugs Bunny
                      description: Created via the API
                      membersCanInvite: true
                      discoverable: false
                      readOnly: false
                      copyProtected: false
                      crossPod: false
                      viewHistory: false
                      multiLateralRoom: false
                      public: false
                      groupChat: false
                    roomSystemInfo:
                      id: bjHSiY4iz3ar4iIh6-VzCX___peoM7cPdA
                      creationDate: 1547661232368
                      createdByUserId: 14362370637825
                      active: true
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "451":
          description: "Unavailable for Legal Reasons: Compliance Issues found in\
            \ room creation request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 451
                    message: Compliance issues found in room creation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v3/room/search:
    post:
      operationId: v3RoomSearchPost
      tags:
        - Streams
      summary: Search rooms according to the specified criteria.
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: skip
          in: query
          description: |
            No. of results to skip.
          schema:
            type: integer
        - name: limit
          in: query
          description: |
            Max no. of results to return. If no value is provided, 50 is the default. Must be a positive
            integer and must not exceed 100
          schema:
            type: integer
      requestBody:
        description: The search query object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V2RoomSearchCriteria'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V3RoomSearchResults'
              examples:
                response:
                  value:
                    count: 2
                    skip: 0
                    limit: 10
                    query:
                      query: automobile
                      labels:
                        - industry
                      active: true
                      creator:
                        id: 7696581411197
                    rooms:
                      - roomAttributes:
                          name: Automobile Industry Room
                          description: Room to discuss car companies
                          membersCanInvite: true
                          readOnly: false
                          copyProtected: false
                          crossPod: false
                          viewHistory: false
                          public: false
                          multiLateralRoom: false
                        roomSystemInfo:
                          id: tzwvAZIdDMG3ZPRxv+xsgH///qr+JJkWdA==
                          creationDate: 1464615003895
                          createdByUserId: 7696581411197
                          active: true
                      - roomAttributes:
                          name: Tesla Room
                          keywords:
                            - key: industry
                              value: automobile
                          description: Discussions on TSLA
                          membersCanInvite: true
                          readOnly: false
                          copyProtected: false
                          crossPod: false
                          viewHistory: false
                          public: false
                          multiLateralRoom: false
                        roomSystemInfo:
                          id: o6UkQ1TEmU0Tf/DHUlZrCH///qr+JQowdA==
                          creationDate: 1464614974947
                          createdByUserId: 7696581411197
                          active: true
                    facetedMatchCount:
                      - facet: industry
                        count: 1
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v3/room/{id}/info:
    get:
      operationId: v3RoomIdInfoGet
      tags:
        - Streams
      summary: Get information about a partcular chatroom.
      parameters:
        - name: id
          in: path
          description: Room streamId
          required: true
          schema:
            type: string
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V3RoomDetail'
              examples:
                response:
                  value:
                    roomAttributes:
                      name: API room
                      keywords:
                        - key: region
                          value: EMEA
                        - key: lead
                          value: Bugs Bunny
                      description: Created via the API
                      membersCanInvite: true
                      discoverable: false
                      readOnly: false
                      copyProtected: false
                      crossPod: false
                      viewHistory: false
                      multiLateralRoom: false
                      public: false
                      groupChat: false
                    roomSystemInfo:
                      id: bjHSiY4iz3ar4iIh6-VzCX___peoM7cPdA
                      creationDate: 1547661232368
                      createdByUserId: 14362370637825
                      active: true
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/room/{id}/setActive:
    post:
      operationId: v1RoomIdSetActivePost
      tags:
        - Streams
      summary: "Deactivate or reactivate a chatroom. At creation, a new chatroom is\
        \ active."
      parameters:
        - name: id
          in: path
          description: Room streamId
          required: true
          schema:
            type: string
        - name: active
          in: query
          required: true
          schema:
            type: boolean
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomDetail'
              examples:
                response:
                  value:
                    roomAttributes:
                      name: API room
                      description: Updated via the API
                      membersCanInvite: true
                      discoverable: true
                    roomSystemInfo:
                      id: HNmksPVAR6-f14WqKXmqHX___qu8LMLgdA
                      creationDate: 1461426797875
                      createdByUserId: 7078106103809
                      active: false
                    immutableRoomAttributes:
                      readOnly: false
                      copyProtected: false
                      public: false
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v3/room/{id}/update:
    post:
      operationId: v3RoomIdUpdatePost
      tags:
        - Streams
      summary: Update the attributes of an existing chatroom.
      parameters:
        - name: id
          in: path
          description: Room streamId
          required: true
          schema:
            type: string
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V3RoomAttributes'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V3RoomDetail'
              examples:
                response:
                  value:
                    roomAttributes:
                      name: API room updated
                      keywords:
                        - key: region
                          value: EMEA
                        - key: lead
                          value: Bugs Bunny
                      description: Updated via the API
                      membersCanInvite: true
                      discoverable: false
                      readOnly: false
                      copyProtected: false
                      crossPod: false
                      viewHistory: true
                      multiLateralRoom: false
                      pinnedMessageId: vd7qwNb6hLoUV0BfXXPC43___oPIvkwJbQ
                      public: true
                      groupChat: false
                    roomSystemInfo:
                      id: bjHSiY4iz3ar4iIh6-VzCX___peoM7cPdA
                      creationDate: 1547661232368
                      createdByUserId: 14362370637825
                      active: true
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "451":
          description: "Unavailable for Legal Reasons: Compliance Issues found in\
            \ room update request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 451
                    message: Compliance issues found in room update
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/room/{id}/membership/add:
    post:
      operationId: v1RoomIdMembershipAddPost
      tags:
        - Room Membership
      summary: Adds new member to an existing room.
      parameters:
        - name: id
          in: path
          description: Room streamId
          required: true
          schema:
            type: string
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserId'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                response:
                  value:
                    format: TEXT
                    message: Member added
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/room/{id}/membership/remove:
    post:
      operationId: v1RoomIdMembershipRemovePost
      tags:
        - Room Membership
      summary: Removes member from an existing room.
      parameters:
        - name: id
          in: path
          description: Room streamId
          required: true
          schema:
            type: string
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserId'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                response:
                  value:
                    format: TEXT
                    message: Member removed
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/room/{id}/membership/promoteOwner:
    post:
      operationId: v1RoomIdMembershipPromoteOwnerPost
      tags:
        - Room Membership
      summary: Promotes user to owner.
      parameters:
        - name: id
          in: path
          description: Room streamId
          required: true
          schema:
            type: string
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserId'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                response:
                  value:
                    format: TEXT
                    message: Member promoted to owner
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/room/{id}/membership/demoteOwner:
    post:
      operationId: v1RoomIdMembershipDemoteOwnerPost
      tags:
        - Room Membership
      summary: Demotes room owner.
      parameters:
        - name: id
          in: path
          description: Room streamId
          required: true
          schema:
            type: string
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserId'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                response:
                  value:
                    format: TEXT
                    message: Owner demoted
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v2/room/{id}/membership/list:
    get:
      operationId: v2RoomIdMembershipListGet
      tags:
        - Room Membership
      summary: Lists current members of an existing room.
      parameters:
        - name: id
          in: path
          description: Room streamId
          required: true
          schema:
            type: string
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MembershipList'
              examples:
                response:
                  value:
                    - id: 7078106103900
                      owner: false
                      joinDate: 1461430710531
                    - id: 7078106103809
                      owner: true
                      joinDate: 1461426797875
                    - id: 7078106103810
                      owner: true
                      joinDate: 1461426797833
                      addedThroughGroups:
                        - 68719476744
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v2/sessioninfo:
    get:
      operationId: v2SessioninfoGet
      tags:
        - Session
      summary: Get information about the current user's session.
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserV2'
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v2/user:
    get:
      operationId: v2UserGet
      tags:
        - Users
      summary: Get user information
      parameters:
        - name: uid
          in: query
          description: User ID as a decimal integer
          schema:
            type: integer
            format: int64
        - name: email
          in: query
          description: Email address
          schema:
            type: string
            format: email
        - name: username
          in: query
          description: login user name
          schema:
            type: string
        - name: local
          in: query
          description: |
            If true then a local DB search will be performed and only local pod users will be
            returned. If absent or false then a directory search will be performed and users
            from other pods who are visible to the calling user will also be returned.
            Note: for username search, the local flag must be true
          schema:
            type: boolean
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserV2'
        "204":
          description: No user found.
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v3/users:
    get:
      operationId: v3UsersGet
      tags:
        - Users
      summary: |
        Search users by emails or ids.
        Only one of the search lists should be informed at a time.
        Search lists may containt up to 100 elements.
      parameters:
        - name: uid
          in: query
          description: User IDs as a list of decimal integers separated by comma
          schema:
            type: string
        - name: email
          in: query
          description: List of email addresses separated by comma
          schema:
            type: string
        - name: username
          in: query
          description: List of username separated by comma
          schema:
            type: string
        - name: local
          in: query
          description: |
            If true then a local DB search will be performed and only local pod users will be
            returned. If absent or false then a directory search will be performed and users
            from other pods who are visible to the calling user will also be returned.
          schema:
            type: boolean
        - name: active
          in: query
          description: |
            If not set all user status will be returned,
            if true all active users will be returned,
            if false all inactive users will be returned
          schema:
            type: boolean
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2UserList'
              examples:
                response:
                  value:
                    users:
                      - id: 15942919536460
                        emailAddress: technicalwriter@symphony.com
                        firstName: Technical
                        lastName: Writer
                        displayName: Technical Writer
                        title: Technical Writer
                        company: Symphony
                        department: Marketing // if internal user
                        username: tw
                        accountType: NORMAL
                        location: France // if internal user
                        avatars:
                          - size: original
                            url: ../avatars/static/150/default.png
                          - size: small
                            url: ../avatars/static/50/default.png
                      - id: 15942919536461
                        emailAddress: serviceaccount@symphony.com
                        firstName: null
                        lastName: null
                        displayName: Service Account
                        title: null
                        company: pod232
                        department: Marketing // if internal user
                        username: SA
                        location: France // if internal user
                        accountType: SYSTEM
                        avatars:
                          - size: original
                            url: ../avatars/static/150/default.png
                          - size: small
                            url: ../avatars/static/50/default.png
                    errors:
                      - error: invalid.format
                        email: notavalidemail
                      - error: invalid.format
                        id: 654321
        "204":
          description: No user found.
          content:
            application/json:
              examples:
                response:
                  value:
                    code: 204
                    message: // No user found. See response body for further details.
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/user/presence/register:
    post:
      operationId: v1UserPresenceRegisterPost
      tags:
        - Presence
      summary: Register interest in a user's presence status
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      requestBody:
        description: List of (integer) User IDs of users whose presence to query
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIdList'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                response:
                  value:
                    format: TEXT
                    message: OK
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "404":
          description: "Not Found: user id cannot be located."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 404
                    message: // Not Found. User id cannot be located. See response body for further details.
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v2/user/presence:
    get:
      operationId: v2UserPresenceGet
      tags:
        - Presence
      summary: Get presence information about the requesting user.
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2Presence'
              examples:
                response:
                  value:
                    category: AVAILABLE
                    userId: 14568529068038
                    timestamp: 1533928483800
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Invalid session token"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
    post:
      operationId: v2UserPresencePost
      tags:
        - Presence
      summary: Set the presence of the requesting user.
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: soft
          in: query
          description: |
            If true, the user's current status is taken into consideration. If the user is currently OFFLINE,
            the user's presence will still be OFFLINE, but the new presence will take effect when the
            user comes online. If the user is currently online, the user's activity state will be
            applied to the presence if applicable. (e.g. if you are setting their presence to AVAILABLE,
            but the user is currently idle, their status will be represented as AWAY)
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V2PresenceStatus'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2Presence'
              examples:
                response:
                  value:
                    category: AWAY
                    userId: 14568529068038
                    timestamp: 1533928483800
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Invalid session token."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v3/user/{uid}/presence:
    get:
      operationId: v3UserUidPresenceGet
      tags:
        - Presence
      summary: Get presence information about a particular user.
      parameters:
        - name: uid
          in: path
          description: |
            User ID as a decimal integer
          required: true
          schema:
            type: integer
            format: int64
        - name: local
          in: query
          description: |
            If true, a local query will be performed and the presence will be
            set to OFFLINE for users who are not local to the calling user's
            pod. If false or absent, then the presence of all local users and
            the presence of all external users to whom the calling user is
            connected will be queried.
            
            For external users, a "presence interest" should be registered through
            /v1/user/presence/register before querying for presence.
          schema:
            type: boolean
            default: false
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2Presence'
              examples:
                response:
                  value:
                    category: AVAILABLE
                    userId: 14568529068038
                    timestamp: 1533928483800
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "404":
          description: "Not Found: user id cannot be located."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 404
                    message: // Not Found. User id cannot be located. See response body for further details.
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v2/users/presence:
    get:
      operationId: v2UsersPresenceGet
      tags:
        - Presence
      summary: Get presence information about all company (pod) users.
      description: |
        The returned data is taken from the in-memory cache for performance
        reasons which means inactive users may be omitted from the response.

        All non-inactive users WILL be returned and some inactive users MAY
        be included. Any omitted user IS inactive.

        Returned records are sorted by user ID, ascending.

        This method is expensive. It pulls ALL records from the cache, sorts them and then only uses a subset.
        For large numbers of users, this can be very inefficient both due to sorting
        and due to the cache being distributed across many nodes.

        Additionally, there is the potential to miss users if they become active
        after the page in which their user ID falls has already been read by the client.
        To avoid this situation, a presence feed should be created (and optionally read from)
        first to capture presence changes of users who get reactivated during a paged call to this endpoint.
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: lastUserId
          in: query
          description: "Last user ID retrieved. Used for paging; if provided, results\
          \ will skip users with IDs less than this parameter."
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: "Max number of records to return. If no value is provided, 1000\
          \ is the default. The maximum supported value is 5000."
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2PresenceList'
              examples:
                response:
                  value:
                    - category: AVAILABLE
                      userId: 14568529068038
                      timestamp: 1533928483800
                    - category: OFFLINE
                      userId: 974217539631
                      timestamp: 1503286226030
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v3/user/presence:
    post:
      operationId: v3UserPresencePost
      tags:
        - Presence
      summary: Set presence information for a particular user.
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: soft
          in: query
          description: |
            If true, the user's current status is taken into consideration. If the user is currently OFFLINE,
            the user's presence will still be OFFLINE, but the new presence will take effect when the
            user comes online. If the user is currently online, the user's activity state will be
            applied to the presence if applicable. (e.g. if you are setting their presence to AVAILABLE,
            but the user is currently idle, their status will be represented as AWAY)
          schema:
            type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/V2UserPresence'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2Presence'
              examples:
                response:
                  value:
                    category: AVAILABLE
                    userId: 14568529068038
                    timestamp: 1533928483800
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "404":
          description: "Not Found: user id cannot be located."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 404
                    message: // Not Found. User id cannot be located. See response body for further details.
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/user/search:
    post:
      operationId: v1UserSearchPost
      tags:
        - Users
      summary: Search for users by name or email address
      parameters:
        - name: skip
          in: query
          description: number of records to skip
          schema:
            type: integer
        - name: limit
          in: query
          description: "Max number of records to return. If no value is provided, 50\
          \ is the default."
          schema:
            type: integer
        - name: local
          in: query
          description: |
            If true then a local DB search will be performed and only local pod users will be
            returned. If absent or false then a directory search will be performed and users
            from other pods who are visible to the calling user will also be returned.
          schema:
            type: boolean
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      requestBody:
        description: search criteria
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSearchQuery'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSearchResults'
              examples:
                response:
                  value:
                    count: 1
                    skip: 0
                    limit: 1
                    searchQuery:
                      query: jane
                      filters:
                        title: Sales Manager
                        company: Symphony
                        location: San Francisco
                        marketCoverage: EMEA
                        responsibility: BAU
                        function: Trade Management
                        instrument: Securities
                        accountTypes:
                          - NORMAL
                    users:
                      - id: 13056700581099
                        emailAddress: janedoe@symphony.com
                        firstName: Jane
                        lastName: Doe
                        displayName: Jane Doe
                        title: Sales Manager
                        company: Symphony
                        location: San Francisco
                        accountType: NORMAL
                        avatars:
                          - size: original
                            url: ../avatars/static/150/default.png
                          - size: small
                            url: ../avatars/static/50/default.png
        "204":
          description: No user found.
          content:
            application/json:
              examples:
                response:
                  value:
                    code: 204
                    message: // No user found. See response body for further details.
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/streams/list:
    post:
      operationId: v1StreamsListPost
      tags:
        - Streams
      summary: |
        Retrieve a list of all streams of which the requesting user is a member,
        sorted by creation date (ascending).
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: skip
          in: query
          description: |
            No. of results to skip.
          schema:
            type: integer
        - name: limit
          in: query
          description: |
            Max no. of results to return. If no value is provided, 50 is the default.
          schema:
            type: integer
      requestBody:
        description: Stream filtering criteria.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StreamFilter'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamList'
              examples:
                response:
                  value:
                    - id: iWyZBIOdQQzQj0tKOLRivX___qu6YeyZdA
                      crossPod: false
                      active: true
                      streamType:
                        type: POST
                      streamAttributes:
                        members:
                          - 7215545078229
        "204":
          description: Stream not found.
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/admin/user/{uid}/streams/list:
    post:
      operationId: v1AdminUserUidStreamsListPost
      tags:
        - Streams
      summary: |
        Retrieve a list of all streams of which this user is a member,
        sorted by creation date (ascending).
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: |
            User ID as a decimal integer
          required: true
          schema:
            type: integer
            format: int64
        - name: skip
          in: query
          description: |
            No. of results to skip.
          schema:
            type: integer
        - name: limit
          in: query
          description: |
            Max no. of results to return. If no value is provided, 50 is the default.
          schema:
            type: integer
      requestBody:
        description: Stream filtering criteria.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StreamFilter'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamList'
              examples:
                response:
                  value:
                    - id: Jq6uPN4-uIop7lvjOkYdXX___nn9I0PHdA
                      crossPod: false
                      active: true
                      streamType:
                        type: IM
                      streamAttributes:
                        members:
                          - 9139690966401
                          - 9139691042211
                    - id: iWyZBIOdQQzQj0tKOLRivX___qu6YeyZdA
                      crossPod: false
                      active: true
                      streamType:
                        type: POST
                      streamAttributes:
                        members:
                          - 7215545078229
        "204":
          description: Stream not found.
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v2/streams/{sid}/info:
    get:
      operationId: v2StreamsSidInfoGet
      tags:
        - Streams
      summary: Get information about a partcular stream.
      parameters:
        - name: sid
          in: path
          description: Stream Id
          required: true
          schema:
            type: string
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2StreamAttributes'
              examples:
                response:
                  value:
                    id: BZQYepoT0Zf4vL_jpeMPqn___oEWvVy3dA
                    crossPod: false
                    origin: INTERNAL
                    active: true
                    lastMessageDate: 1644590972696
                    streamType:
                      type: ROOM
                    roomAttributes:
                      name: API room
                      groups:
                        - id: 68719476744
                          addedBy: 68719476743
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/streams/{sid}/attachments:
    get:
      operationId: v1StreamsSidAttachmentsGet
      tags:
        - Streams
      summary: Get attachments in a particular stream.
      parameters:
        - name: sid
          in: path
          description: Stream Id
          required: true
          schema:
            type: string
        - name: since
          in: query
          description: |
            Timestamp of first required attachment.
            This is a long integer value representing milliseconds since Jan 1 1970
          schema:
            type: integer
            format: int64
        - name: to
          in: query
          description: |
            Timestamp of last required attachment.
            This is a long integer value representing milliseconds since Jan 1 1970
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: Maximum number of attachments to return. Default is 50. Must
            be a positive integer and must not exceed 100.
          schema:
            type: integer
        - name: sortDir
          in: query
          description: |
            Attachment date sort direction : ASC or DESC (default to ASC)
          schema:
            type: string
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamAttachmentResponse'
              examples:
                response:
                  value:
                    - messageId: PYLHNm/1K6p...peOpj+FbQ
                      userId: USER_ID
                      ingestionDate: 1548089933946
                      fileId: internal_143623
                      name: butterfly.jpg
                      size: 70186
                      contentType: image/jpeg
                      previews:
                        - fileId: internal_143623
                          width: 600
                    - messageId: KpjYuzMLR+JK1co7QBfukX///peOpZmdbQ==
                      userId: USER_ID
                      ingestionDate: 1548089976418
                      fileId: internal_1436237
                      name: car.png
                      size: 15754
                      contentType: image/png
                      previews:
                        - fileId: internal_14362370637
                          width: 600
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/admin/app/entitlement/list:
    get:
      operationId: v1AdminAppEntitlementListGet
      tags:
        - AppEntitlement
      summary: Get the list of application entitlements for the company
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PodAppEntitlementList'
              examples:
                response:
                  value:
                    - appId: djApp
                      appName: Dow Jones
                      enable: true
                      listed: true
                      install: true
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
    post:
      operationId: v1AdminAppEntitlementListPost
      tags:
        - AppEntitlement
      summary: Update the application entitlements for the company
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PodAppEntitlementList'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PodAppEntitlementList'
              examples:
                response:
                  value:
                    - appId: djApp
                      appName: Dow Jones
                      enable: true
                      listed: true
                      install: false
                    - appId: spcapiq
                      appName: S&P Capital IQ Data
                      enable: true
                      listed: true
                      install: false
                    - appId: selerity
                      appName: Selerity Context
                      enable: false
                      listed: true
                      install: true
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/admin/disclaimer/{did}:
    get:
      operationId: v1AdminDisclaimerDidGet
      tags:
        - Disclaimer
      summary: Get a disclaimer by disclaimer id
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: did
          in: path
          description: The ID of the entity
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Disclaimer'
              examples:
                response:
                  value:
                    id: 571d20dae4b042aaf06d2e7c
                    name: New Enterprise Disclaimer
                    content: This is a second enterprise disclaimer.
                    frequencyInHours: 168
                    isDefault: false
                    isActive: true
                    createdDate: 1461526746875
                    modifiedDate: 1461526746875
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/admin/disclaimer/list:
    get:
      operationId: v1AdminDisclaimerListGet
      tags:
        - Disclaimer
      summary: List all disclaimers for the company (pod)
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisclaimerList'
              examples:
                response:
                  value:
                    - id: 571d2052e4b042aaf06d2e7a
                      name: Enterprise Disclaimer
                      content: This is a disclaimer for the enterprise.
                      frequencyInHours: 24
                      isDefault: false
                      isActive: true
                      createdDate: 1461526610846
                      modifiedDate: 1461526610846
                    - id: 571d20dae4b042aaf06d2e7c
                      name: New Enterprise Disclaimer
                      content: This is a second enterprise disclaimer.
                      frequencyInHours: 168
                      isDefault: false
                      isActive: true
                      createdDate: 1461526746875
                      modifiedDate: 1461526746875
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/admin/disclaimer/{did}/users:
    get:
      operationId: v1AdminDisclaimerDidUsersGet
      tags:
        - Disclaimer
      summary: List all users assigned to this disclaimer
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: did
          in: path
          description: The ID of the entity
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserIdList'
              examples:
                response:
                  value:
                    - 7215545078541
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/admin/group/list:
    get:
      operationId: v1AdminGroupListGet
      tags:
        - InfoBarriers
      summary: Get a list of all Information Barrier Groups
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupList'
              examples:
                response:
                  value:
                    - id: 571db1f2e4b027c4f055a594
                      name: Group 1
                      active: true
                      memberCount: 1
                      policies:
                        - 571db2e4e4b012df6341f393
                      createdDate: 1461563890135
                      modifiedDate: 1461563926812
                    - id: 571db20ae4b012df6341f391
                      name: Group 2
                      active: true
                      memberCount: 1
                      policies:
                        - 571db2e4e4b012df6341f393
                      createdDate: 1461563914581
                      modifiedDate: 1461564112286
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/admin/group/{gid}/membership/list:
    get:
      operationId: v1AdminGroupGidMembershipListGet
      tags:
        - InfoBarriers
      summary: Get the list of userids in this Information Barrier Group
      parameters:
        - name: gid
          in: path
          description: URL-Safe encoded Group ID
          required: true
          schema:
            type: string
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: skip
          in: query
          description: Number of records to skip. Must be a positive integer.
          schema:
            type: integer
            x-since: 20.15
          x-since: 20.15
        - name: limit
          in: query
          description: Max number of records to return. Default is 10000. Must be a
            positive integer and must not exceed 10000.
          schema:
            type: integer
            x-since: 20.15
          x-since: 20.15
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegerList'
              examples:
                response:
                  value:
                    - 7215545078541
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "404":
          description: "Not Found: Group cannot be found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 404
                    message: // Not Found. Group cannot be found. See response body for further details.
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/admin/group/{gid}/membership/add:
    post:
      operationId: v1AdminGroupGidMembershipAddPost
      tags:
        - InfoBarriers
      summary: Add members to an Information Barrier group.
      parameters:
        - name: gid
          in: path
          description: URL-Safe encoded Group ID
          required: true
          schema:
            type: string
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegerList'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkActionResult'
              examples:
                response:
                  value:
                    overallResult: SUCCESS
                    results:
                      - ""
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/admin/group/{gid}/membership/remove:
    post:
      operationId: v1AdminGroupGidMembershipRemovePost
      tags:
        - InfoBarriers
      summary: Remove members from an Information Barrier group
      parameters:
        - name: gid
          in: path
          description: URL-Safe encoded Group ID
          required: true
          schema:
            type: string
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegerList'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkActionResult'
              examples:
                response:
                  value:
                    overallResult: SUCCESS
                    results:
                      - ""
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/admin/im/create:
    post:
      operationId: v1AdminImCreatePost
      tags:
        - Streams
      summary: Create a new single or multi party instant message conversation
      description: |
        At least two user IDs must be provided or
        an error response will be sent.

        The caller is not included in the members of the
        created chat.

        Duplicate users will be included in the membership of the chat but
        the duplication will be silently ignored.

        If there is an existing IM conversation with the same set of participants then
        the id of that existing stream will be returned.
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      requestBody:
        description: List of (integer) User IDs of participants
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIdList'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stream'
              examples:
                response:
                  value:
                    id: xhGxbTcvTDK6EIMMrwdOrX___quztr2HdA
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/admin/messagesuppression/{id}/suppress:
    post:
      operationId: v1AdminMessagesuppressionIdSuppressPost
      tags:
        - MessageSuppression
      summary: Suppress a message
      parameters:
        - name: id
          in: path
          description: URL-Safe encoded Message ID
          required: true
          schema:
            type: string
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageSuppressionResponse'
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/admin/policy/list:
    get:
      operationId: v1AdminPolicyListGet
      tags:
        - InfoBarriers
      summary: Get all Information Policies
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyList'
              examples:
                response:
                  value:
                    - id: 56e9df05e4b00737e3d3b82d
                      policyType: BLOCK
                      active: true
                      groups:
                        - 56e9def8e4b0b406041812e6
                        - 56e9deffe4b0b406041812e7
                      createdDate: 1458167557358
                      modifiedDate: 1458330606752
                    - id: 571cd64de4b042aaf06d2d8b
                      policyType: BLOCK
                      active: true
                      groups:
                        - 571cd646e4b042aaf06d2d84
                        - 571cd64ce4b042aaf06d2d8a
                      createdDate: 1461507661146
                      modifiedDate: 1461507661146
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/admin/room/{id}/setActive:
    post:
      operationId: v1AdminRoomIdSetActivePost
      tags:
        - Streams
      summary: Deactivate or reactivate a chatroom via AC Portal.
      parameters:
        - name: id
          in: path
          description: Room streamId
          required: true
          schema:
            type: string
        - name: active
          in: query
          required: true
          schema:
            type: boolean
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomDetail'
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/admin/room/{id}/membership/list:
    get:
      operationId: v1AdminRoomIdMembershipListGet
      tags:
        - Room Membership
      summary: Lists current and previous members of an existing room.
      parameters:
        - name: id
          in: path
          description: Room streamId
          required: true
          schema:
            type: string
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: includePastMembers
          in: query
          description: "If true, the membership list will include past members of the\
          \ stream. If false, the listing will only incude current members. Default\
          \ false."
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MembershipList'
              examples:
                response:
                  value:
                    - id: 7078106103900
                      owner: false
                      joinDate: 1461430710531
                    - id: 7078106103809
                      owner: true
                      joinDate: 1461426797875
                    - id: 7078106103810
                      owner: true
                      joinDate: 1461426797833
                      addedThroughGroups:
                        - 68719476744
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/admin/room/{id}/membership/add:
    post:
      operationId: v1AdminRoomIdMembershipAddPost
      tags:
        - Room Membership
      summary: Add a member to an existing room.
      parameters:
        - name: id
          in: path
          description: Room streamId
          required: true
          schema:
            type: string
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserId'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/admin/room/{id}/membership/remove:
    post:
      operationId: v1AdminRoomIdMembershipRemovePost
      tags:
        - Room Membership
      summary: Remove a member from a room.
      parameters:
        - name: id
          in: path
          description: Room streamId
          required: true
          schema:
            type: string
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserId'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v2/admin/user/list:
    get:
      operationId: v2AdminUserListGet
      tags:
        - User
      summary: Retrieve a list of all users in the company (pod)
      parameters:
        - name: sessionToken
          in: header
          description: Session Authentication token.
          required: true
          schema:
            type: string
        - name: skip
          in: query
          description: Number of users to skip. Default is 0. Must be a integer equals
            or bigger than 0.
          schema:
            type: integer
        - name: limit
          in: query
          description: Maximum number of users to return. Default is 100. Must be a
            positive integer and must not exceed 1000.
          schema:
            type: integer
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2UserDetailList'
              examples:
                response:
                  value:
                    - userAttributes:
                        emailAddress: nexus.user@email.com
                        userName: nexus.user
                        displayName: nexus.user
                        accountType: SYSTEM
                      userSystemInfo:
                        id: 9826885173290
                        status: ENABLED
                        suspended: false
                        createdDate: 1499375475000
                        createdBy: "9826885173255"
                        lastUpdatedDate: 1499375475852
                        lastLoginDate: 1504899124191
                      roles:
                        - USER_PROVISIONING
                        - CONTENT_MANAGEMENT
                        - INDIVIDUAL
                    - userAttributes:
                        emailAddress: admin@mail.com
                        firstName: admin
                        lastName: admin
                        userName: admin@mail.com
                        displayName: Admin Admin
                        companyName: Company Name
                        department: Departament
                        division: Division
                        title: Administrator
                        twoFactorAuthPhone: "+15419999999"
                        workPhoneNumber: "+15419999999"
                        mobilePhoneNumber: "+15419999999"
                        accountType: NORMAL
                        assetClasses:
                          - Currencies
                        industries:
                          - Technology
                      userSystemInfo:
                        id: 7696581394433
                        status: ENABLED
                        suspended: false
                        createdDate: 1438054194000
                        lastUpdatedDate: 1527532171729
                        lastLoginDate: 1523912043015
                      roles:
                        - SUPER_COMPLIANCE_OFFICER
                        - INDIVIDUAL
                        - SUPER_ADMINISTRATOR
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v3/admin/user/list:
    get:
      operationId: v3AdminUserListGet
      tags:
        - User
      summary: Retrieve a list of all users in the company (pod)
      parameters:
        - name: sessionToken
          in: header
          description: Session Authentication token.
          required: true
          schema:
            type: string
        - name: skip
          in: query
          description: Number of users to skip. Default is 0. Must be a integer equals
            or bigger than 0.
          schema:
            type: integer
        - name: limit
          in: query
          description: Maximum number of users to return. Default is 100. Must be a
            positive integer and must not exceed 1000.
          schema:
            type: integer
        - name: includeFeatures
          in: query
          description: "If true, the response will include the list of features for\
          \ each users"
          schema:
            type: boolean
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V3UserDetailList'
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/admin/user/find:
    post:
      operationId: v1AdminUserFindPost
      tags:
        - User
      summary: Find a user based on attributes
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: skip
          in: query
          description: Number of users to skip. Default is 0. Must be a integer equals
            or bigger than 0.
          schema:
            type: integer
        - name: limit
          in: query
          description: Maximum number of users to return. Default is 100. Must be a
            positive integer and must not exceed 1000.
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserFilter'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailList'
              examples:
                response:
                  value:
                    - userAttributes:
                        emailAddress: janedoe@symphony.com
                        firstName: Jane
                        lastName: Doe
                        userName: jane.doe
                        displayName: Jane Doe
                        accountType: NORMAL
                        assetClasses:
                          - Commodities
                        industries:
                          - Financials
                          - Healthcare
                      userSystemInfo:
                        id: 9826885173258
                        status: ENABLED
                        suspended: true
                        suspensionReason: The user will be OOO due to a mandatory leave
                        suspendedUntil: 1601546400
                        createdDate: 1499347606000
                        createdBy: "9826885173252"
                        lastUpdatedDate: 1499348554853
                        lastLoginDate: 1504839044527
                      roles:
                        - INDIVIDUAL
                    - userAttributes:
                        emailAddress: nexus.user@email.com
                        userName: nexus.user
                        displayName: nexus.user
                        accountType: SYSTEM
                      userSystemInfo:
                        id: 9826885173290
                        status: ENABLED
                        suspended: false
                        createdDate: 1499375475000
                        createdBy: "9826885173255"
                        lastUpdatedDate: 1499375475852
                        lastLoginDate: 1504899124191
                      roles:
                        - USER_PROVISIONING
                        - CONTENT_MANAGEMENT
                        - INDIVIDUAL
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/admin/user/{uid}/roles/add:
    post:
      operationId: v1AdminUserUidRolesAddPost
      tags:
        - User
      summary: Add a role to a user
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: |
            User ID as a decimal integer
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StringId'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                response:
                  value:
                    format: TEXT
                    message: Role added
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/admin/user/{uid}/roles/remove:
    post:
      operationId: v1AdminUserUidRolesRemovePost
      tags:
        - User
      summary: Remove a role from a user
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: |
            User ID as a decimal integer
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StringId'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                response:
                  value:
                    format: TEXT
                    message: Role removed
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "404":
          description: "Not Found: User cannot be found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 404
                    message: // Not Found. User cannot be found. See response body for further details.
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/admin/user/{uid}/app/entitlement/list:
    get:
      operationId: v1AdminUserUidAppEntitlementListGet
      tags:
        - AppEntitlement
      summary: Get the list of application entitlements for this user
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: User ID as a decimal integer
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAppEntitlementList'
              examples:
                response:
                  value:
                    - appId: djApp
                      appName: Dow Jones
                      listed: true
                      install: false
                    - appId: selerity
                      appName: Selerity Context
                      listed: true
                      install: true
                      products:
                        - appId: selerity
                          name: Standard
                          subscribed: true
                          type: default
                        - appId: selerity
                          name: Premium
                          sku: AcDccU53SsY
                          subscribed: false
                          type: premium
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
    post:
      operationId: v1AdminUserUidAppEntitlementListPost
      tags:
        - AppEntitlement
      summary: Update the application entitlements for this user
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: User ID as a decimal integer
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAppEntitlementList'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAppEntitlementList'
              examples:
                response:
                  value:
                    - appId: djApp
                      appName: Dow Jones
                      listed: true
                      install: false
                    - appId: selerity
                      appName: Selerity Context
                      listed: true
                      install: true
                      products:
                        - appId: selerity
                          name: Standard
                          subscribed: true
                          type: default
                        - appId: selerity
                          name: Premium
                          sku: AcDccU53SsY
                          subscribed: false
                          type: premium
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
    patch:
      operationId: v1AdminUserUidAppEntitlementListPatch
      tags:
        - AppEntitlement
      summary: "Update unique entitlement of an app for this user. Entitlement can\
        \ be installation, visibility or product"
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: User ID as a decimal integer
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAppEntitlementsPatchList'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAppEntitlementList'
              examples:
                response:
                  value:
                    - appId: djApp
                      appName: Dow Jones
                      listed: true
                      install: false
                    - appId: selerity
                      appName: Selerity Context
                      listed: true
                      install: true
                      products:
                        - appId: selerity
                          name: Standard
                          subscribed: true
                          type: default
                        - appId: selerity
                          name: Premium
                          sku: AcDccU53SsY
                          subscribed: false
                          type: premium
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/admin/user/{uid}/avatar:
    get:
      operationId: v1AdminUserUidAvatarGet
      tags:
        - User
      summary: Get the URL of the avatar of a particular user
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: |
            User ID as a decimal integer
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvatarList'
              examples:
                response:
                  value:
                    - size: original
                      url: ../avatars/izcQTdRVFOK_qhCrYeQOpIuHKuZuMk3J88Uz_bShzM8.png
                    - size: small
                      url: ../avatars/izcQTdRVFOK_qhCrYeQOpIuHKuZuMk3J88Uz_bShzM8_small.png
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/admin/user/{uid}/avatar/update:
    post:
      operationId: v1AdminUserUidAvatarUpdatePost
      tags:
        - User
      summary: Update the avatar of a particular user
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: |
            User ID as a decimal integer
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AvatarUpdate'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                response:
                  value:
                    format: TEXT
                    message: OK
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/admin/user/{uid}/authentication/update:
    post:
      operationId: v1AdminUserUidAuthenticationUpdatePost
      tags:
        - User
      summary: Update the authentication data of a particular user
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: |
            User ID as a decimal integer
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAuthentication'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      
  /v1/admin/user/{uid}/disclaimer:
    get:
      operationId: v1AdminUserUidDisclaimerGet
      tags:
        - User
      summary: Get the disclaimer assigned to a user
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: |
            User ID as a decimal integer
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Disclaimer'
              examples:
                response:
                  value:
                    id: 571d2052e4b042aaf06d2e7a
                    name: Enterprise Disclaimer
                    content: This is a disclaimer for the enterprise.
                    frequencyInHours: 24
                    isDefault: false
                    isActive: true
                    createdDate: 1461526610846
                    modifiedDate: 1461526610846
        "204":
          description: No content. User doesn't have an assigned disclaimer
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

    delete:
      operationId: v1AdminUserUidDisclaimerDelete
      tags:
        - User
      summary: Unassign a disclaimer from a user
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: |
            User ID as a decimal integer
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                response:
                  value:
                    format: TEXT
                    message: OK
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/admin/user/{uid}/disclaimer/update:
    post:
      operationId: v1AdminUserUidDisclaimerUpdatePost
      tags:
        - User
      summary: Assign a disclaimer to a user
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: |
            User ID as a decimal integer
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StringId'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                response:
                  value:
                    format: TEXT
                    message: OK
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/admin/user/{uid}/delegates:
    get:
      operationId: v1AdminUserUidDelegatesGet
      tags:
        - User
      summary: Get the delegates assigned to a user
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: |
            User ID as a decimal integer
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: The userid's of the delegates of this user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegerList'
              examples:
                response:
                  value:
                    - 7215545078461
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/admin/user/{uid}/delegates/update:
    post:
      operationId: v1AdminUserUidDelegatesUpdatePost
      tags:
        - User
      summary: Update the delegates assigned to a user
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: |
            User ID as a decimal integer
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DelegateAction'
        required: true
      responses:
        "200":
          description: Sucesss.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                response:
                  value:
                    format: TEXT
                    message: Added delegate [7215545078461] for account [7215545078541]
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/admin/user/{uid}/features:
    get:
      operationId: v1AdminUserUidFeaturesGet
      tags:
        - User
      summary: Get the list of Symphony feature entitlements enabled for a particular
        user
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: |
            User ID as a decimal integer
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureList'
              examples:
                response:
                  value:
                    - entitlment: canCreatePublicRoom
                      enabled: true
                    - entitlment: isExternalRoomEnabled
                      enabled: false
                    - entitlment: delegatesEnabled
                      enabled: true
                    - entitlment: isExternalIMEnabled
                      enabled: true
                    - entitlment: sendFilesEnabled
                      enabled: true
                    - entitlment: canUpdateAvatar
                      enabled: true
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/admin/user/{uid}/features/update:
    post:
      operationId: v1AdminUserUidFeaturesUpdatePost
      tags:
        - User
      summary: Update the list of Symphony feature entitlements for a particular user
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: |
            User ID as a decimal integer
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeatureList'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                response:
                  value:
                    format: TEXT
                    message: OK
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/user/{uid}/follow:
    post:
      operationId: v1UserUidFollowPost
      tags:
        - User
      summary: Make a list of users start following a specific user
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: User ID as a decimal integer of the user to be followed
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: List of (integer) User IDs of the followers
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FollowersList'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                response:
                  value:
                    format: TEXT
                    message: User(s) successfully added in the list of followers
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/user/{uid}/unfollow:
    post:
      operationId: v1UserUidUnfollowPost
      tags:
        - User
      summary: Make a list of users unfollowing a specific user
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: User ID as a decimal integer of the user to be unfollowed
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: List of (integer) User IDs of the followers
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FollowersList'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                response:
                  value:
                    format: TEXT
                    message: User(s) successfully removed from the list of followers
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/user/{uid}/followers:
    get:
      operationId: v1UserUidFollowersGet
      tags:
        - User
      summary: Returns the list of followers for a specific user
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: User ID as a decimal integer of the user we want to get the followers
            list
          required: true
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: This is the maximum number of objects that may be returned.
          schema:
            type: integer
        - name: before
          in: query
          description: Returns results from an opaque “before” cursor value as presented
            via a response cursor.
          schema:
            type: string
        - name: after
          in: query
          description: Returns results from an opaque “after” cursor value as presented
            via a response cursor.
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowersListResponse'
              examples:
                response:
                  value:
                    count: 5
                    followers:
                      - 13056700579848
                      - 13056700580889
                      - 13056700580890
                    pagination:
                      cursors:
                        before: 1
                        after: 4
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/user/{uid}/following:
    get:
      operationId: v1UserUidFollowingGet
      tags:
        - User
      summary: Returns the list of users that a specific user is following
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: User ID as a decimal integer of the user we want to get the following
            list
          required: true
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: This is the maximum number of objects that may be returned.
          schema:
            type: integer
        - name: before
          in: query
          description: Returns results from an opaque “before” cursor value as presented
            via a response cursor.
          schema:
            type: string
        - name: after
          in: query
          description: Returns results from an opaque “after” cursor value as presented
            via a response cursor.
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowingListResponse'
              examples:
                response:
                  value:
                    count: 3
                    followers:
                      - 13056700580888
                      - 13056700580889
                    pagination:
                      cursors:
                        before: 1
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/user/manifest/own:
    get:
      operationId: v1UserManifestOwnGet
      tags:
        - User
      summary: Get own service account manifest
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAccountManifest'
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

    post:
      operationId: v1UserManifestOwnPost
      tags:
        - User
      summary: Update own service account manifest
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      requestBody:
        description: Service Account Manifest to put in user account
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ServiceAccountManifest'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/admin/user/{uid}/status:
    get:
      operationId: v1AdminUserUidStatusGet
      tags:
        - User
      summary: "Get the status, active or inactive, for a particular user"
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: |
            User ID as a decimal integer
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStatus'
              examples:
                response:
                  value:
                    status: ENABLED
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/admin/user/{uid}/status/update:
    post:
      operationId: v1AdminUserUidStatusUpdatePost
      tags:
        - User
      summary: Update the status of a particular user
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: |
            User ID as a decimal integer
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserStatus'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                response:
                  value:
                    message: OK
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v2/admin/streams/list:
    post:
      operationId: v2AdminStreamsListPost
      tags:
        - Streams
      summary: |
        Retrieve all the streams across the enterprise where the membership of the stream has been modified between a given time range
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: skip
          in: query
          description: |
            Number of items to skip. Default is 0.
          schema:
            type: integer
        - name: limit
          in: query
          description: |
            Maximum number of items to return. Default is 50.  This value cannot exceed 100.
          schema:
            type: integer
      requestBody:
        description: Stream filtering criteria.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V2AdminStreamFilter'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2AdminStreamList'
              examples:
                response:
                  value:
                    count: 4
                    skip: 0
                    limit: 50
                    filter:
                      streamTypes:
                        - null
                    streams:
                      - id: Q2KYGm7JkljrgymMajYTJ3___qcLPr1UdA
                        isExternal: false
                        isActive: true
                        isPublic: false
                        type: ROOM
                        attributes:
                          roomName: Active Internal Private Room
                          roomDescription: Active Internal Private Room
                          createdByUserId: 8933531975689
                          createdDate: 1481575056047
                          lastModifiedDate: 1481575056047
                          originCompany: Symphony
                          originCompanyId: 130
                          membersCount: 1
                          lastMessageDate: 1516699467959
                      - id: _KnoYrMkhEn3H2_8vE0kl3___qb5SANQdA
                        isExternal: true
                        isActive: false
                        isPublic: false
                        type: ROOM
                        attributes:
                          roomName: Inactive External Room
                          roomDescription: Inactive External Room
                          createdByUserId: 8933531975686
                          createdDate: 1481876438194
                          lastModifiedDate: 1481876438194
                          originCompany: Symphony
                          originCompanyId: 130
                          membersCount: 2
                          lastMessageDate: 1516699467959
                      - id: fBoaBSRUyb5Rq3YgeSqZvX___qbf5IAhdA
                        isExternal: false
                        isActive: true
                        type: IM
                        attributes:
                          members:
                            - 8933531975686
                            - 8933531975689
                          createdByUserId: 8933531975689
                          createdDate: 1482302390238
                          lastModifiedDate: 1482302390238
                          originCompany: Symphony
                          originCompanyId: 130
                          membersCount: 2
                          lastMessageDate: 1516699467959
                      - id: k19u9c3GSE_iq0VHDKe1on___qa0Cp2WdA
                        isExternal: false
                        isActive: true
                        type: MIM
                        attributes:
                          members:
                            - 8933531975688
                            - 8933531975689
                            - 8933531975717
                          createdByUserId: 8933531975688
                          createdDate: 1483038089833
                          lastModifiedDate: 1483038089833
                          originCompany: Symphony
                          originCompanyId: 130
                          membersCount: 3
                          lastMessageDate: 1516699467959
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/admin/stream/{id}/membership/list:
    get:
      operationId: v1AdminStreamIdMembershipListGet
      tags:
        - Streams
      summary: "List the current members of an existing stream.  The stream can be\
        \ of type IM, MIM, or ROOM"
      parameters:
        - name: id
          in: path
          description: stream Id
          required: true
          schema:
            type: string
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: skip
          in: query
          description: Number of items to skip. Default is 0.
          schema:
            type: integer
        - name: limit
          in: query
          description: Maximum number of items to return. Default is 100 and not to
            exceed 1000.
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2MembershipList'
              examples:
                response:
                  value:
                    count: 3
                    skip: 0
                    limit: 32
                    members:
                      - user:
                          userId: 13537736917000
                          email: john.doe@symphony.com
                          firstName: John
                          lastName: Doe
                          displayName: John Doe
                          company: pod197
                          companyId: 197
                          isExternal: false
                        isOwner: true
                        isCreator: true
                        joinDate: 1604494574047
                      - user:
                          userId: 13606456393736
                          email: alice.smith@pod198.com
                          firstName: Alice
                          lastName: Smith
                          displayName: Alice Smith
                          company: pod198
                          companyId: 198
                          isExternal: true
                        isOwner: false
                        isCreator: false
                        joinDate: 1604494722469
                      - user:
                          userId: 13537736917001
                          email: bot@symphony.com
                          displayName: User Provisioning Bot
                          company: pod197
                          companyId: 197
                          isExternal: false
                        isOwner: false
                        isCreator: false
                        joinDate: 1604494605272
                        addedThroughGroups:
                          - 68719476744
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/admin/system/features/list:
    get:
      operationId: v1AdminSystemFeaturesListGet
      tags:
        - System
      summary: Get the full set of Symphony features available for this pod
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The list of valid feature entitlement names.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringList'
              examples:
                response:
                  value:
                    - postReadEnabled
                    - canCreatePublicRoom
                    - canJoinMultiLateralRoom
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/admin/system/protocols/list:
    get:
      operationId: v1AdminSystemProtocolsListGet
      tags:
        - System
      summary: Get a list of all URI protocols supported by the company (pod)
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringList'
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v2/system/protocols:
    get:
      operationId: v2SystemProtocolsGet
      tags:
        - System
      summary: Get a list of URI protocols supported by the company (pod)
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: skip
          in: query
          description: Number of items to skip. Default is 0.
          schema:
            type: integer
        - name: limit
          in: query
          description: Maximum number of items to return. Default is 100 and not to
            exceed 1000.
          schema:
            type: integer
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringList'
              examples:
                response:
                  value:
                    - ftp
                    - mailto
                    - skype
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/admin/system/protocols:
    post:
      operationId: v1AdminSystemProtocolsPost
      tags:
        - System
      summary: Add an entry to URI protocols supported by the company (pod)
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      requestBody:
        description: the protocol to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Protocol'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Protocol'
              examples:
                response:
                  value:
                    scheme: skype
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/admin/system/protocols/{scheme}:
    delete:
      operationId: v1AdminSystemProtocolsSchemeDelete
      tags:
        - System
      summary: Remove an entry from URI protocols supported by the company (pod)
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: scheme
          in: path
          description: the scheme to remove from the protocols list
          required: true
          schema:
            type: string
      responses:
        "204":
          description: 204 response
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
  /v1/admin/system/roles/list:
    get:
      operationId: v1AdminSystemRolesListGet
      tags:
        - User
      summary: Get a list of all roles available in the company (pod)
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDetailList'
              examples:
                response:
                  value:
                    - id: CONTENT_MANAGEMENT
                      name: Content Management
                      userTypes:
                        - SYSTEM
                        - NORMAL
                      optionalActions:
                        - MONITOR_ROOMS
                    - id: COMPLIANCE_OFFICER
                      name: Compliance Officer
                      userTypes:
                        - NORMAL
                      optionalActions:
                        - BAN_AND_UNBAN_ROOM_MEMBER
                        - LOCK_AND_UNLOCK_ROOM
                        - MONITOR_ROOMS
                        - MONITOR_WALL_POSTS
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/message/{mid}/status:
    get:
      operationId: v1MessageMidStatusGet
      tags:
        - Message
      summary: Get the read status of a particular message.
      parameters:
        - name: mid
          in: path
          description: Message ID
          required: true
          schema:
            type: string
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageStatus'
              examples:
                response:
                  value:
                    author:
                      userId: 7078106103901
                      firstName: Gustav
                      lastName: Mahler
                      displayName: Gustav Mahler
                      email: gustav.mahler@music.org
                      userName: gmahler
                      timestamp: 1531968487845
                    read:
                      - userId: 7078106103901
                        firsName: Gustav
                        lastName: Mahler
                        displayName: Gustav Mahler
                        email: gustav.mahler@music.org
                        userName: gmahler
                        timestamp: 1489769156271
                      - userId: 7078106103902
                        firsName: Hildegard
                        lastName: Bingen
                        displayName: Hildegard Bingen
                        email: hildegard.bingen@music.org
                        userName: hbingen
                        timestamp: 1487352923000
                    delivered:
                      - userId: 7078106103903
                        firsName: Franz
                        lastName: Liszt
                        displayName: Franz Liszt
                        email: franz.liszt@music.org
                        userName: fliszt
                        timestamp: 1484674523000
                    sent:
                      - userId: 7078106103904
                        firsName: Benjamin
                        lastName: Britten
                        displayName: Benjamin Britten
                        email: benjamin.britten@music.org
                        userName: bbritten
                        timestamp: 1484156123000
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "404":
          description: "Not found: The informed Message ID does not exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 404
                    message: // Not Found. Message ID does not exist. See response body for further details.
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/admin/app/create:
    post:
      operationId: v1AdminAppCreatePost
      tags:
        - Application
      summary: Creates a new app
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      requestBody:
        description: Application detail to create the app with
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationDetail'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationDetail'
              examples:
                response:
                  value:
                    applicationInfo:
                      appId: my-test-app
                      name: my-test-app
                      appUrl: https://joe.mydomain.com
                      domain: mydomain.com
                      publisher: Joe Smith
                    description: a test app
                    allowOrigins: mydomain.com
                    permissions:
                      - ACT_AS_USER
                      - SEND_MESSAGES
                    notification:
                      url: https://some.url
                      apiKey: 123456
                    cert: -----BEGIN PUBLIC KEY-----\nMIICIANBgkqhw0BAQ...cCAwEAAQ==\n-----END
                      PUBLIC KEY-----
                    authenticationKeys: null
                    properties:
                      - key: port
                        value: 4000
                      - key: url
                        value: https://someother.url
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/admin/app/{id}/update:
    post:
      operationId: v1AdminAppIdUpdatePost
      tags:
        - Application
      summary: Updates a app
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Id of the app
          required: true
          schema:
            type: string
      requestBody:
        description: Details to update the app with
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationDetail'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationDetail'
              examples:
                response:
                  value:
                    applicationInfo:
                      appId: my-test-app
                      name: my-test-app
                      appUrl: https://joe.mydomain.com
                      domain: mydomain.com
                      publisher: Joe Smith
                    description: a test app
                    allowOrigins: mydomain.com
                    permissions:
                      - ACT_AS_USER
                      - SEND_MESSAGES
                    notification:
                      url: https://some.url
                      apiKey: 123456
                    cert: -----BEGIN PUBLIC KEY-----\nMIICIANBgkqhw0BAQ...cCAwEAAQ==\n-----END
                      PUBLIC KEY-----
                    authenticationKeys: null
                    properties:
                      - key: port
                        value: 4000
                      - key: url
                        value: https://someother.url
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/admin/app/{id}/delete:
    post:
      operationId: v1AdminAppIdDeletePost
      tags:
        - Application
      summary: Deletes a app
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The id of the app
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                response:
                  value:
                    format: TEXT
                    message: OK
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/admin/app/{id}/get:
    get:
      operationId: v1AdminAppIdGetGet
      tags:
        - Application
      summary: Gets a app
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: the id of the app to get
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationDetail'
              examples:
                response:
                  value:
                    applicationInfo:
                      appId: my-test-app
                      name: my-test-app
                      appUrl: https://joe.mydomain.com
                      domain: mydomain.com
                      publisher: Joe Smith
                    description: a test app
                    allowOrigins: mydomain.com
                    permissions:
                      - ACT_AS_USER
                      - SEND_MESSAGES
                    notification:
                      url: https://some.url
                      apiKey: 123456
                    cert: -----BEGIN PUBLIC KEY-----\nMIICIANBgkqhw0BAQ...cCAwEAAQ==\n-----END
                      PUBLIC KEY-----
                    authenticationKeys: null
                    properties:
                      - key: port
                        value: 4000
                      - key: url
                        value: https://someother.url
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/admin/messages:
    post:
      operationId: v1AdminMessagesPost
      summary: Fetch message details
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token
          required: true
          schema:
            type: string
      requestBody:
        description: the ids of the messages to be fetched
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageIds'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageDetails'
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "404":
          description: "Not found: Message ID could not be found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 404
                    message: // Not Found. Message ID could not be found. See response body for further details.
        "422":
          description: "Unprocessable entity: Invalid message type."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 422
                    message: // Unprocessable Entity. Invalid message type. See response body for further details.
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v2/admin/user/create:
    post:
      operationId: v2AdminUserCreatePost
      tags:
        - User
      summary: Create a new V2 User
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V2UserCreate'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2UserDetail'
              examples:
                response:
                  value:
                    userAttributes:
                      emailAddress: johndoe@symphony.com
                      firstName: John
                      lastName: Doe
                      userName: johndoe
                      displayName: John Doe
                      companyName: Company
                      department: Departament
                      division: Division
                      title: Junior Trader
                      twoFactorAuthPhone: "+15419999999"
                      workPhoneNumber: "+15419999999"
                      mobilePhoneNumber: "+15419999999"
                      accountType: NORMAL
                      location: New York
                      jobFunction: Trader
                      assetClasses:
                        - Equities
                      industries:
                        - Healthcare
                        - Technology
                    userSystemInfo:
                      id: 7215545078461
                      status: ENABLED
                      suspended: true
                      suspensionReason: The user will be OOO due to a mandatory leave
                      suspendedUntil: 1601546400
                      createdDate: 1461508270000
                      createdBy: "7215545057281"
                      lastUpdatedDate: 1461508270000
                      lastLoginDate: 1461508270000
                      deactivatedDate: 1461508270000
                    roles:
                      - INDIVIDUAL
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v2/admin/user/{uid}/update:
    post:
      operationId: v2AdminUserUidUpdatePost
      tags:
        - User
      summary: Update an existing V2 User
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: |
            User ID as a decimal integer
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V2UserAttributes'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2UserDetail'
              examples:
                response:
                  value:
                    userAttributes:
                      emailAddress: johndoe@symphony.com
                      firstName: John
                      lastName: Doe
                      userName: johndoe
                      displayName: John Doe
                      companyName: Company
                      department: Departament
                      division: Division
                      title: Junior Trader
                      twoFactorAuthPhone: "+15419999999"
                      workPhoneNumber: "+15419999999"
                      mobilePhoneNumber: "+15419999999"
                      accountType: NORMAL
                      location: New York
                      jobFunction: Trader
                      assetClasses:
                        - Equities
                      industries:
                        - Healthcare
                        - Technology
                    userSystemInfo:
                      id: 7215545078461
                      status: ENABLED
                      suspended: true
                      suspensionReason: The user will be OOO due to a mandatory leave
                      suspendedUntil: 1601546400
                      createdDate: 1461508270000
                      createdBy: "7215545057281"
                      lastUpdatedDate: 1461508270000
                      lastLoginDate: 1461508270000
                      deactivatedDate: 1461508270000
                    roles:
                      - INDIVIDUAL
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v2/admin/user/{uid}:
    get:
      operationId: v2AdminUserUidGet
      tags:
        - User
      summary: Retreive V2 User details for a particular user
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: |
            User ID as a decimal integer
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2UserDetail'
              examples:
                response:
                  value:
                    userAttributes:
                      emailAddress: johndoe@symphony.com
                      firstName: John
                      lastName: Doe
                      userName: johndoe
                      displayName: John Doe
                      companyName: Company
                      department: Departament
                      division: Division
                      title: Junior Trader
                      twoFactorAuthPhone: "+15419999999"
                      workPhoneNumber: "+15419999999"
                      mobilePhoneNumber: "+15419999999"
                      accountType: NORMAL
                      location: New York
                      jobFunction: Trader
                      assetClasses:
                        - Equities
                      industries:
                        - Healthcare
                        - Technology
                    userSystemInfo:
                      id: 7215545078461
                      status: ENABLED
                      suspended: true
                      suspensionReason: The user will be OOO due to a mandatory leave
                      suspendedUntil: 1601546400
                      createdDate: 1461508270000
                      createdBy: "7215545057281"
                      lastUpdatedDate: 1461508270000
                      lastLoginDate: 1461508270000
                      deactivatedDate: 1461508270000
                    roles:
                      - INDIVIDUAL
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/files/allowedTypes:
    get:
      operationId: v1FilesAllowedTypesGet
      tags:
        - Pod
      summary: Get supported attachment types for the pod
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringList'
              examples:
                response:
                  value:
                    - .bmp
                    - .doc
                    - .png
                    - .mp4
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /file_ext/v1/allowed_extensions:
    get:
      summary: Allows iteration of all file extensions supported for upload
      description: |
        Provides a RESTful API to iterate all file extensions configured by the tenant admin
        that are allowed for the upload.  Pagination of this list is managed through a
        combination of the optional request parameters and service-side managed maximums.

        Pagination of the results is provided through the before or after input paramters
        and presented through the opaque cursor values provided as output from a previous
        response.  Only one of before or after or neither may be provided.

        DO NOT store cursors. Cursors can quickly become invalid if items are added or deleted.
        Use them only during a short-period of time that you are traversing the list.
      operationId: listAllowedFileExtensions
      parameters:
        - name: limit
          in: query
          description: |
            This is the maximum number of objects that may be returned. A query may return
            fewer than the value of limit due to filtering or service-side maximums. Do not
            depend on the number of results being fewer than the limit value to indicate your
            query reached the end of the list of data, use the absence of next instead as
            described below. For example, if you set limit to 10 and 9 results are returned,
            there may be more data available, but one item was removed due to privacy filtering.
            Some maximums for limit may be enforced for performance reasons. In all cases, the
            API returns the correct pagination links.
          schema:
            type: integer
        - name: before
          in: query
          description: |
            Returns results from an opaque "before" cursor value as presented via a response cursor
          schema:
            type: string
        - name: after
          in: query
          description: |
            Returns results from an opaque "after" cursor value as presented via a response cursor
          schema:
            type: string
      responses:
        "200":
          description: |
            Requested sequence of file extensions object records with the page size
            limited by the optional limit paramter or the service-specific maximum
            limit offered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileExtensionsResponse'
        "400":
          description: |
            Invalid arguments were passed by the client
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: |
            Authentication was not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: |
            Authorization is not provided to this request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: |
            Unexpected service error - a retry may work
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "503":
          description: |
            Temporarily unable to handle request - could be due to service overload or maintenance
          content: { }
        "504":
          description: |
            Timeout waiting on response at gateway
          content: { }
  /file_ext/v1/allowed_extensions/{extension}:
    put:
      summary: Allows replacement or creation of a specific file extension supported
        for upload
      description: |
        Provides a method to create or replace a specific file extension configured for upload
        support via an admin. The API treats the file extension in the path case-insensitively
        by converting it to lowecase.
      operationId: putAllowedFileExtension
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: extension
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileExtension'
        required: true
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileExtension'
        "400":
          description: |
            Invalid arguments were passed by the client: the file extension object specified
            the source as 'system' yet the file extension is not known to the system (API cannot
            create system file extensions, only customer-defined file extensions), the extension
            in the path doesn't match the extension in the body, the length of the file extension
            exceeded the maximum length (64 characters)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: |
            Authorization is not provided to this request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: |
            Unexpected service error - a retry may work
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Allows deletion of a specific file extension supported for upload
      description: |
        Provides a method to delete a specific file extension configured for upload
        support via an admin. The file extension identifying the resource is treated
        case-insensitively by the API.
      operationId: deleteAllowedFileExtension
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: extension
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: 204 response
          content: { }
        "400":
          description: |
            Invalid arguments were passed by the client
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: |
            Authorization is not provided to this request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: |
            Unexpected service error - a retry may work
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/admin/messages/{messageId}/receipts:
    get:
      operationId: v1AdminMessagesMessageIdReceiptsGet
      summary: Fetch receipts details from a specific message.
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: messageId
          in: path
          description: The message ID
          required: true
          schema:
            type: string
        - name: before
          in: query
          description: Returns results from an opaque “before” cursor value as presented
            via a response cursor.
          schema:
            type: string
        - name: after
          in: query
          description: Returns results from an opaque “after” cursor value as presented
            via a response cursor.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageReceiptDetailResponse'
              examples:
                response:
                  value:
                    creator:
                      id: 7215545058329
                      name: User Test
                    stream:
                      id: lFpyw0ATFmji+Cc/cSzbk3///pZkWpe1dA==
                      name: Test Room
                      streamType: ROOM
                    creationDate: 1552999333141
                    deliveryReceiptCount: 1
                    readReceiptCount: 1
                    emailNotificationCount: 1
                    downloadReceiptCounts:
                      - fileName: internal_7078106
                        count: 1
                    MessageReceiptDetail:
                      - user:
                          id: 7215545058313
                          username: dpayet
                          firstName: Dimitiri
                          lastName: Payet
                          emailAddress: dpayet@om.fr
                        deliveryReceiptTimestamp: 1552999333784
                        readReceiptTimestamp: 1552999335114
                        emailNotificationTimestamp: 1552999335114
                        downloadReceiptCounts:
                          - fileName: Untitled Document.txt
                            timestamp: 1552999335740
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "404":
          description: "Not Found: Message receipt details cannot be found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 404
                    message: // Not Found. Message receipt details cannot be found. See response body for further details.
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/languages:
    get:
      operationId: v1LanguagesGet
      tags:
        - Pod
      summary: Lists available languages for the pod.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Languages'
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/admin/messages/{messageId}/metadata/relationships:
    get:
      operationId: v1AdminMessagesMessageIdMetadataRelationshipsGet
      summary: Get the message metadata relationship
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token.
          required: true
          schema:
            type: string
        - name: User-Agent
          in: header
          description: Request user agent.
          required: true
          schema:
            type: string
        - name: messageId
          in: path
          description: Valid id of a SOCIALMESSAGE
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageMetadataResponse'
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.

  /v1/admin/user/{userId}/suspension/update:
    put:
      operationId: v1AdminUserUserIdSuspensionUpdatePut
      tags:
        - User
      summary: Update the status of suspension of a particular user
      parameters:
        - name: sessionToken
          in: header
          description: Session authentication token
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: User ID as a decimal integer
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSuspension'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                response:
                  value:
                    format: TEXT
                    message: User suspended with success
        "400":
          description: "Client error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 400
                    message: // Client error, see response body for further details.
        "401":
          description: "Unauthorized: Session tokens invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 401
                    message: Invalid session
        "403":
          description: "Forbidden: Caller lacks necessary entitlement."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 403
                    message: The user lacks the required entitlement to perform this operation
        "500":
          description: "Server error, see response body for further details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value:
                    code: 500
                    message: // Server error, see response body for further details.
components:
  schemas:
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    CompanyCert:
      type: object
      properties:
        pem:
          type: string
          description: An X509 certificate in PEM format
        attributes:
          $ref: '#/components/schemas/CompanyCertAttributes'
    CompanyCertDetail:
      type: object
      properties:
        companyCertAttributes:
          $ref: '#/components/schemas/CompanyCertAttributes'
        companyCertInfo:
          $ref: '#/components/schemas/CompanyCertInfo'
        certInfo:
          $ref: '#/components/schemas/CertInfo'
    CompanyCertInfoList:
      type: array
      items:
        type: object
        properties:
          companyCertAttributes:
            $ref: '#/components/schemas/CompanyCertAttributes'
          companyCertInfo:
            $ref: '#/components/schemas/CompanyCertInfo'
    CompanyCertType:
      type: object
      properties:
        type:
          type: string
          enum:
            - USERSIGNING
            - USER
            - OPERATIONSSIGNING
            - OPERATIONSUSER
    CompanyCertTypeList:
      type: array
      items:
        $ref: '#/components/schemas/CompanyCertType'
    CompanyCertStatus:
      type: object
      properties:
        type:
          type: string
          enum:
            - TRUSTED
            - KNOWN
            - REVOKED
            - DISABLED
    CompanyCertAttributes:
      type: object
      properties:
        name:
          type: string
          description: Friendly name assigned by administrator
        type:
          $ref: '#/components/schemas/CompanyCertType'
        status:
          $ref: '#/components/schemas/CompanyCertStatus'
    CompanyCertInfo:
      type: object
      properties:
        fingerPrint:
          type: string
          description: Unique identifier
        issuerFingerPrint:
          type: string
          description: Unique identifier of issuer cert if known
        lastSeen:
          type: integer
          format: int64
          description: Date when we last saw this certificate presented
        updatedAt:
          type: integer
          format: int64
          description: Date when this cert was last updated by administrator
        updatedBy:
          type: integer
          format: int64
          description: User ID of administrator who last updated this cert
        commonName:
          type: string
          description: The Symphony account name which this certificate authenticates
        expiryDate:
          type: integer
          format: int64
          description: Expiry date of this cert
    CertInfo:
      type: array
      items:
        $ref: '#/components/schemas/CertInfoItem'
    CertInfoItem:
      type: object
      properties:
        name:
          type: string
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/NameValuePair'
    PodCertificate:
      type: object
      properties:
        certificate:
          description: Certificate in PEM format
          type: string
    NameValuePair:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    Stream:
      type: object
      properties:
        id:
          type: string
    UserError:
      description: User error information
      type: object
      properties:
        error:
          type: string
          description: 'Error code informing what is wrong'
        email:
          type: string
          description: 'Email with error. Only one of the following fields should be present: email or id'
        id:
          type: string
          description: 'Id with error. Only one of the following fields should be present: email or id'
    UserV2:
      description: User record version 2
      type: object
      properties:
        id:
          type: integer
          format: int64
        emailAddress:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        displayName:
          type: string
        title:
          type: string
        company:
          type: string
        username:
          type: string
        location:
          type: string
        accountType:
          type: string
          enum: [ NORMAL, SYSTEM, SDL ]
        avatars:
          # avatar urls for both original size and small size
          $ref: '#/components/schemas/AvatarList'
        workPhoneNumber:
          type: string
          description: 'Note: only available if the application has the extended user or contact permission'
        mobilePhoneNumber:
          type: string
          description: 'Note: only available if the application has the extended user or contact permission'
        jobFunction:
          type: string
          description: 'Note: only available if the application has the extended user or contact permission'
        department:
          type: string
          description: 'Note: only available if the application has the extended user or contact permission'
        division:
          type: string
          description: 'Note: only available if the application has the extended user or contact permission'
        roles:
          $ref: '#/components/schemas/StringList'
    V2UserList:
      description: List of User record version 2
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserV2'
          description: 'List of all users found with the search'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/UserError'
          description: 'List of all errors found with the informed search criteria'
    UserSearchResults:
      type: object
      properties:
        count:
          description: The total number of users which matched the search criteria.
          type: integer
          format: int64
        skip:
          description: The number of skipped results.
          type: integer
          format: int64
        limit:
          description: The number of returned results.
          type: integer
          format: int64
        searchQuery:
          # The search query that produced this result.
          $ref: '#/components/schemas/UserSearchQuery'
        users:
          description: A list of users which matched by the search criteria.
          type: array
          items:
            $ref: '#/components/schemas/UserV2'
    UserSearchFilter:
      type: object
      properties:
        accountTypes:
          $ref: '#/components/schemas/StringList'
          description: type of user used to search
        title:
          type: string
          description: user's job title
        company:
          type: string
          description: company name
        location:
          type: string
          description: city of the user's job location
        marketCoverage:
          type: string
          description: geographic area the user works with
        responsibility:
          type: string
          description: user's responsibility
        function:
          type: string
          description: user's function
        instrument:
          type: string
          description: higher level instrument for the Asset Classes
    UserSearchQuery:
      type: object
      properties:
        query:
          type: string
          description: search / query term.  This can be firstname, lastname, displayname or email
        filters:
          # query filters
          $ref: '#/components/schemas/UserSearchFilter'
    UserNameList:
      type: array
      items:
        type: object
        $ref: '#/components/schemas/UserName'
    UserName:
      type: object
      properties:
        username:
          type: string
    UserIdList:
      type: array
      items:
        type: integer
        format: int64
    UserId:
      type: object
      properties:
        id:
          type: integer
          format: int64
    StringId:
      type: object
      properties:
        id:
          type: string
    RoomAttributes:
      type: object
      properties:
        name:
          type: string
          description: Room name.
        description:
          type: string
          description: Room description.
        membersCanInvite:
          type: boolean
          description: If true, any chatroom participant can add new participants. If false, only owners can add new participants.
        discoverable:
          type: boolean
          description: If true, this chatroom (name, description and messages) can be searched and listed by non-participants. If false, only participants can search this room.
    V3RoomAttributes:
      type: object
      properties:
        name:
          type: string
          description: Room name.
        keywords:
          type: array
          description: Keywords for search to use to find this room
          items:
            $ref: '#/components/schemas/RoomTag'
        description:
          type: string
          description: Room description.
        membersCanInvite:
          type: boolean
          description: If true, any chatroom participant can add new participants. If false, only owners can add new participants.
        discoverable:
          type: boolean
          description: If true, this chatroom (name, description and messages) can be searched and listed by non-participants. If false, only participants can search this room.
        public:
          type: boolean
          description: If true, this is a public chatroom. IF false, a private chatroom.
        readOnly:
          type: boolean
          description: If true, only stream owners can send messages.
        copyProtected:
          type: boolean
          description: If true, clients disable the clipboard copy for content in this stream.
        crossPod:
          type: boolean
          description: If true, this room is a cross pod room
        viewHistory:
          type: boolean
          description: If true, new members can view the room chat history of the room.
        multiLateralRoom:
          type: boolean
          description: If true, this is a multi lateral room where we can find users belonging to more than 2 companies.
        scheduledMeeting:
          type: boolean
          description: If true, this room is for a scheduled meeting.
        subType:
          type: string
          description: This field is ignored when creating a new room as it was only used for email integration which is now sunset.
        pinnedMessageId:
          type: string
          description: UrlSafe message id of the pinned message inside the room. To perform unpin operation, send an empty string.
        groupChat:
          type: boolean
          description: "If true, this room is a group chat. Note: this parameter is ignored for creating rooms."
        reactionsEnabled:
          type: boolean
          description: If true, members are able to react on messages in the room.
    RoomSearchCriteria:
      description: Room Query Object. Used to specify the parameters for room search.
      properties:
        query:
          description: The search query. Matches the room name and description.
          type: string
        labels:
          description: A list of room tag labels whose values will be queried.
          type: array
          items:
            type: string
        active:
          description: Restrict the search to active/inactive rooms. If unspecified, search all rooms.
          type: boolean
        private:
          description: Restrict the search to private rooms. If unspecified, search all rooms.
          type: boolean
        owner:
          # Restrict the search to rooms owned by the specified user ID.
          $ref: '#/components/schemas/UserId'
        creator:
          # Restrict the search to rooms created by the specified user ID.
          $ref: '#/components/schemas/UserId'
        member:
          # Restrict the search to rooms having the specified user ID as member.
          $ref: '#/components/schemas/UserId'
        sortOrder:
          description: |
            Sort algorithm to be used. Supports two values: "BASIC" (legacy algorithm)
            and "RELEVANCE" (enhanced algorithm).
          type: string
          enum:
            - BASIC
            - RELEVANCE
      required:
        - query
    V2RoomSearchCriteria:
      description: Room Query Object. Used to specify the parameters for room search.
      allOf:
        - $ref: '#/components/schemas/RoomSearchCriteria'
        - type: object
          properties:
            subType:
              description: "Restrict the search to the specific room subtype. Valid values are: EMAIL"
              type: string
    V3RoomSearchResults:
      description: A list of search results and counts per search parameter.
      properties:
        count:
          description: The total number of rooms matched by the search.
          type: integer
          format: int64
        skip:
          description: The number of skipped results.
          type: integer
        limit:
          description: The number of returned results.
          type: integer
        query:
          # The search query that produced this result.
          $ref: '#/components/schemas/V2RoomSearchCriteria'
        rooms:
          description: A list of rooms matched by the query.
          type: array
          items:
            $ref: '#/components/schemas/V3RoomDetail'
        facetedMatchCount:
          description: Detailed counts of matched rooms per search criterion.
          type: array
          items:
            $ref: '#/components/schemas/FacetedMatchCount'
    RoomTag:
      description: Room Tag object. A key:value pair describing additional properties of the room.
      properties:
        key:
          description: A unique label of the Tag.
          type: string
        value:
          description: The value of this Tag's label.
          type: string
      required:
        - key
        - value
    FacetedMatchCount:
      description: An object respresenting the result count of faceted search.
      properties:
        facet:
          description: The matched query.
          type: string
        count:
          description: The result count.
          type: integer
    RoomSystemInfo:
      type: object
      properties:
        id:
          type: string
        creationDate:
          type: integer
          format: int64
          description: The datetime when the stream was originally created. Milliseconds since Jan 1 1970.
        createdByUserId:
          type: integer
          format: int64
        active:
          type: boolean
          description: If false, no messages can be sent in this stream, and membership is locked.
    ImmutableRoomAttributes:
      type: object
      description: These attributes cannot be changed once the room has been created
      properties:
        public:
          type: boolean
          description: If true, this is a public chatroom. IF false, a private chatroom.
        readOnly:
          type: boolean
          description: If true, only stream owners can send messages.
        copyProtected:
          type: boolean
          description: If true, clients disable the clipboard copy for content in this stream.
    RoomDetail:
      type: object
      properties:
        roomAttributes:
          $ref: '#/components/schemas/RoomAttributes'
        roomSystemInfo:
          $ref: '#/components/schemas/RoomSystemInfo'
        immutableRoomAttributes:
          $ref: '#/components/schemas/ImmutableRoomAttributes'
    V3RoomDetail:
      type: object
      properties:
        roomAttributes:
          $ref: '#/components/schemas/V3RoomAttributes'
        roomSystemInfo:
          $ref: '#/components/schemas/RoomSystemInfo'
        groups:
          description: List of groups (aka SDLs) that were added to the room.
          type: array
          items:
            $ref: '#/components/schemas/GroupItem'
    GroupItem:
      type: object
      properties:
        id:
          description: The ID of the added group (aka SDL).
          type: integer
          format: int64
        addedBy:
          description: The user ID who added the group to the room.
          type: integer
          format: int64
    SuccessResponse:
      type: object
      properties:
        format:
          type: string
          enum:
            - TEXT
            - XML
        message:
          type: string
    AvatarUpdate:
      type: object
      properties:
        image:
          description: Base64 encoded image. Original image must be less than 2MB.
          type: string
    Avatar:
      type: object
      properties:
        size:
          description: 'The Avatar Size'
          type: string
        url:
          description: 'Url of the image'
          type: string
    AvatarList:
      type: array
      items:
        $ref: '#/components/schemas/Avatar'
    UserStatus:
      type: object
      properties:
        status:
          type: string
          enum:
            - ENABLED
            - DISABLED
        suspended:
          type: boolean
          description: An optional attribute indicating whether the user is temporarily suspended or not
        suspendedUntil:
          type: integer
          format: int64
          description: An optional unix timestamp until which the suspension is effective
        suspensionReason:
          type: string
          description: An optional description of the suspension reason
    UserFilter:
      type: object
      properties:
        role:
          type: string
          description: The user role
          example: "INDIVIDUAL"
        feature:
          type: string
        status:
          type: string
          enum:
            - ENABLED
            - DISABLED
    PasswordReset:
      type: object
      properties:
        type:
          type: string
          enum:
            - EMAIL
    FeatureList:
      type: array
      items:
        $ref: '#/components/schemas/Feature'
    Feature:
      description: Entitlement feature record.
      type: object
      properties:
        entitlment:
          type: string
        enabled:
          type: boolean
          description: Whether this entitlement is enabled for the user.
    Group:
      description: Information Barrier Group record.
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        active:
          type: boolean
        memberCount:
          type: integer
          format: int32
        policies:
          type: array
          items:
            type: string
        createdDate:
          type: integer
          format: int64
        modifiedDate:
          type: integer
          format: int64
    Product:
      description: Application Product
      type: object
      required:
        - name
        - type
        - subscribed
      properties:
        appId:
          type: string
          description: App ID for the Product
          minLength: 1
          maxLength: 256
        name:
          type: string
          minLength: 1
          maxLength: 50
          description: Product Name
        sku:
          type: string
          minLength: 1
          maxLength: 100
          description: Product SKU
        subscribed:
          type: boolean
          description: indicate whether the product is subscribed or not
        type:
          type: string
          description: Product Type (default or premium)
    ProductList:
      type: array
      items:
        $ref: '#/components/schemas/Product'
    PolicyList:
      type: array
      items:
        $ref: '#/components/schemas/Policy'
    Policy:
      description: Information Barrier Policy record.
      type: object
      properties:
        id:
          type: string
        policyType:
          type: string
          enum:
            - BLOCK
            - ALLOW
        active:
          type: boolean
        memberCount:
          type: integer
          format: int32
        groups:
          type: array
          items:
            type: string
        createdDate:
          type: integer
          format: int64
        modifiedDate:
          type: integer
          format: int64
    UserAppEntitlement:
      description: Application Entitlements for the user
      type: object
      required:
        - appId
        - listed
        - install
      properties:
        appId:
          type: string
          description: Unique ID for the Application
          maxLength: 256
          minLength: 1
        appName:
          type: string
          description: Name for this Application
          maxLength: 50
          minLength: 1
        listed:
          type: boolean
          description: if true, this application will be listed in the appstore for this user.  Otherwise, this application will be hidden in the appstore.
        install:
          type: boolean
          description: if true, it indicate this application is installed for this user.  Otherwise, this user does not have this application installed.
        products:
          $ref: '#/components/schemas/ProductList'
    PodAppEntitlement:
      description: Application Entitlements for the company
      type: object
      required:
        - appId
        - appName
        - enable
        - listed
        - install
      properties:
        appId:
          type: string
          description: Unique ID for the Application
          maxLength: 256
          minLength: 1
        appName:
          type: string
          description: Name for this Application
          maxLength: 50
          minLength: 1
        enable:
          type: boolean
        listed:
          type: boolean
          description: if true, this application will be listed in the appstore for everyone.  Otherwise, this application will be hidden in the appstore.
        install:
          type: boolean
          description: if true, the entitlement is set to automatic for the company.  Otherwise, it is set to manual.
    Role:
      description: Role record.
      type: object
      properties:
        id:
          type: string
          format: long
        name:
          type: string
        description:
          type: string
    RoleDetailList:
      type: array
      items:
        $ref: '#/components/schemas/RoleDetail'
    RoleDetail:
      description: Role detailed.
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        userTypes:
          type: array
          items:
            type: string
        optionalActions:
          type: array
          items:
            type: string
    GroupList:
      type: array
      items:
        $ref: '#/components/schemas/Group'
    UserAppEntitlementsPatchList:
      description: Array of app entitlements to patch for a user
      type: array
      items:
        $ref: '#/components/schemas/UserAppEntitlementPatch'
    UserAppEntitlementPatchEnum:
      type: object
      properties:
        type:
          type: string
          enum: &UserAppEntitlementPatchEnum
            - "TRUE"
            - "FALSE"
            - "KEEP"
            - "REMOVE"
          default: "KEEP"
      description: >
        UserAppEntitlementPatchEnum type :
          * TRUE - The parameter should be set to true.
          * FALSE - The parameter should be set to false.
          * KEEP - The parameter should not be updated, the current value will be kept.
          * REMOVE - The parameter should be reverted to tenant level's value.
    UserAppEntitlementPatch:
      description: Application Entitlements to patch for the user
      type: object
      required:
        - appId
      properties:
        appId:
          type: string
          description: Unique ID for the Application
          maxLength: 256
          minLength: 1
        listed:
          type: string
          enum: *UserAppEntitlementPatchEnum
          default: KEEP
          description: If "TRUE", this application will be listed in the appstore for this user. If "FALSE", this application will be hidden in the appstore. If "KEEP" or not set, the current value is kept. If "REMOVE", it will be removed from user settings and the pod level setting's value will be used.
        install:
          type: string
          enum: *UserAppEntitlementPatchEnum
          default: KEEP
          description: If "TRUE", this application will be installed for this user. If "FALSE", this application will not be installed for this user. If "KEEP" or not set, the current value is kept. If "REMOVE", it will be removed from user settings and the pod level setting's value will be used.
        product:
          $ref: '#/components/schemas/Product'
    UserAppEntitlementList:
      type: array
      items:
        $ref: '#/components/schemas/UserAppEntitlement'
    PodAppEntitlementList:
      type: array
      items:
        $ref: '#/components/schemas/PodAppEntitlement'
    RoleList:
      type: array
      items:
        $ref: '#/components/schemas/Role'
    IntegerList:
      type: array
      items:
        type: integer
        format: int64
    StringList:
      type: array
      items:
        type: string
    DisclaimerList:
      type: array
      items:
        $ref: '#/components/schemas/Disclaimer'
    Disclaimer:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        content:
          type: string
        frequencyInHours:
          type: integer
          format: int32
        isDefault:
          type: boolean
        isActive:
          type: boolean
        createdDate:
          type: integer
          format: int64
        modifiedDate:
          type: integer
          format: int64
        format:
          type: string
          enum:
            - TEXT
            - XML
    DelegateAction:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        action:
          type: string
          enum:
            - ADD
            - REMOVE
    UserInfo:
      description: User record.
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserAttributes'
        userSystemInfo:
          $ref: '#/components/schemas/UserSystemInfo'
    UserAttributes:
      description: User record.
      type: object
      properties:
        emailAddress:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        userName:
          type: string
        displayName:
          type: string
        companyName:
          type: string
        department:
          type: string
        division:
          type: string
        title:
          type: string
        workPhoneNumber:
          type: string
        mobilePhoneNumber:
          type: string
        smsNumber:
          type: string
        accountType:
          type: string
          enum:
            - NORMAL
            - SYSTEM
            - SDL
        location:
          type: string
        jobFunction:
          type: string
        assetClasses:
          type: array
          items:
            type: string
        industries:
          type: array
          items:
            type: string
    V2UserDetail:
      description: V2 Detailed User record.
      type: object
      properties:
        userAttributes:
          $ref: '#/components/schemas/V2UserAttributes'
        userSystemInfo:
          $ref: '#/components/schemas/UserSystemInfo'
        features:
          $ref: '#/components/schemas/IntegerList'
        apps:
          $ref: '#/components/schemas/IntegerList'
        groups:
          $ref: '#/components/schemas/IntegerList'
        roles:
          $ref: '#/components/schemas/StringList'
        disclaimers:
          $ref: '#/components/schemas/IntegerList'
        avatar:
          $ref: '#/components/schemas/Avatar'
        authentication:
          $ref: '#/components/schemas/UserAuthentication'
    V3UserDetail:
      description: V3 Detailed User record.
      type: object
      properties:
        userAttributes:
          $ref: '#/components/schemas/V2UserAttributes'
        userSystemInfo:
          $ref: '#/components/schemas/UserSystemInfo'
        features:
          $ref: '#/components/schemas/FeatureList'
        roles:
          $ref: '#/components/schemas/StringList'
        avatar:
          $ref: '#/components/schemas/Avatar'
        authentication:
          $ref: '#/components/schemas/UserAuthentication'
    V2UserAttributes:
      description: V2 User record.
      type: object
      properties:
        emailAddress:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        userName:
          type: string
        displayName:
          type: string
        companyName:
          type: string
        department:
          type: string
        division:
          type: string
        title:
          type: string
        workPhoneNumber:
          type: string
        mobilePhoneNumber:
          type: string
        twoFactorAuthPhone:
          type: string
        smsNumber:
          type: string
        accountType:
          type: string
          enum:
            - NORMAL
            - SYSTEM
            - SDL
        location:
          type: string
        recommendedLanguage:
          type: string
        jobFunction:
          type: string
        assetClasses:
          type: array
          items:
            type: string
        industries:
          type: array
          items:
            type: string
        marketCoverage:
          type: array
          items:
            type: string
        responsibility:
          type: array
          items:
            type: string
        function:
          type: array
          items:
            type: string
        instrument:
          type: array
          items:
            type: string
        currentKey:
          $ref: '#/components/schemas/V2UserKeyRequest'
        previousKey:
          $ref: '#/components/schemas/V2UserKeyRequest'
    V2UserKeyRequest:
      description: User RSA key information.
      type: object
      properties:
        key:
          description: User RSA public key.
          type: string
        expirationDate:
          description: RSA key expiration date. This value is set just for rotated keys.
          type: integer
          format: int64
        action:
          description: |
            Action to be performed on the RSA key.
            The following actions can be performed onto the user's active RSA key:
              - SAVE
              - REVOKE
            The following actions can be performed onto the user's rotated RSA key:
              - REVOKE
              - EXTEND
          type: string
    V2UserCreate:
      description: |
        V2 User Creation Object.
        After creation, modify roles, features etc via the specific API calls.
      type: object
      properties:
        userAttributes:
          $ref: '#/components/schemas/V2UserAttributes'
        password:
          $ref: '#/components/schemas/Password'
        authentication:
          $ref: '#/components/schemas/UserAuthentication'
        roles:
          type: array
          items:
            type: string
    V2UserDetailList:
      type: array
      items:
        $ref: '#/components/schemas/V2UserDetail'
    V3UserDetailList:
      type: array
      items:
        $ref: '#/components/schemas/V3UserDetail'
    UserSystemInfo:
      description: User Status Information.
      type: object
      properties:
        id:
          type: integer
          format: int64
        status:
          type: string
          enum:
            - ENABLED
            - DISABLED
        suspended:
          type: boolean
          description: An optional attribute indicating whether the user is temporarily suspended or not
        suspendedUntil:
          type: integer
          format: int64
          description: An optional unix timestamp until which the suspension is effective
        suspensionReason:
          type: string
          description: An optional description of the suspension reason
        createdDate:
          type: integer
          format: int64
        createdBy:
          type: string
        lastUpdatedDate:
          type: integer
          format: int64
        lastLoginDate:
          type: integer
          format: int64
        lastPasswordReset:
          type: integer
          format: int64
        deactivatedDate:
          type: integer
          format: int64
    UserDetailList:
      type: array
      items:
        $ref: '#/components/schemas/UserDetail'
    UserDetail:
      description: Detailed User record.
      type: object
      properties:
        userAttributes:
          $ref: '#/components/schemas/UserAttributes'
        userSystemInfo:
          $ref: '#/components/schemas/UserSystemInfo'
        features:
          $ref: '#/components/schemas/IntegerList'
        apps:
          $ref: '#/components/schemas/IntegerList'
        groups:
          $ref: '#/components/schemas/IntegerList'
        roles:
          $ref: '#/components/schemas/StringList'
        disclaimers:
          $ref: '#/components/schemas/IntegerList'
        avatar:
          $ref: '#/components/schemas/Avatar'
    Password:
      description: Password. Stored as derived password in both the Pod and the Key Manager using PBKDF2 function. Number of iterations should be 10000 and desired length 256 bits.
      type: object
      properties:
        hSalt:
          description: Pod password salt used for PBKDF2 derivation.
          type: string
        hPassword:
          description: Pod password derived with PBKDF2.
          type: string
        khSalt:
          description: Key Manager password salt used for PBKDF2 derivation.
          type: string
        khPassword:
          description: Key Manager password derived with PBKDF2.
          type: string
    UserAuthentication:
      type: object
      properties:
        method:
          description: Method for this user to authenticate against Symphony, valid values are 'SSO' or 'PASSWORD'
          type: string
        authGroupId:
          description: The Authentication Group this user belongs to
          type: string
    MemberInfo:
      description: Detailed membership record.
      type: object
      properties:
        id:
          type: integer
          format: int64
        owner:
          type: boolean
        joinDate:
          type: integer
          format: int64
        addedThroughGroups:
          description: When the user has been added to the stream through a group (aka SDL), this array contains the group ID which the user belongs to.
          type: array
          items:
            type: integer
            format: int64
    MembershipList:
      description: List of members in a room.
      type: array
      items:
        $ref: '#/components/schemas/MemberInfo'
    V2MemberUserDetail:
      description: User detail information for stream membership
      type: object
      properties:
        userId:
          type: integer
          format: int64
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        displayName:
          type: string
          description: Display name for the user
        company:
          type: string
          description: Company name
        companyId:
          type: integer
          description: Company ID
        isExternal:
          type: boolean
          description: true indicate that this user belong to another company
    V2MemberInfo:
      description: Detailed membership record.
      type: object
      properties:
        user:
          # User detail information include names, userId, email, etc
          $ref: '#/components/schemas/V2MemberUserDetail'
        isOwner:
          type: boolean
          description: true if this is an owner of the room
        isCreator:
          type: boolean
          description: true if this is the creator of the room
        joinDate:
          description: unix timestamp for join date
          type: integer
          format: int64
        addedThroughGroups:
          description: When the user has been added to the stream through a group (aka SDL), this array contains the group ID which the user belongs to.
          type: array
          items:
            type: integer
            format: int64
    V2MemberInfoList:
      type: array
      items:
        $ref: '#/components/schemas/V2MemberInfo'
    V2MembershipList:
      description: List of members in the stream.
      type: object
      properties:
        count:
          type: integer
          description: total members count
        skip:
          type: integer
          description: number of items to skip from the request
        limit:
          type: integer
          description: maximum number of items to return
        members:
          $ref: '#/components/schemas/V2MemberInfoList'
    MessageSuppressionResponse:
      description: The suppression state of a message
      type: object
      properties:
        messageId:
          type: string
        suppressed:
          type: boolean
        suppressionDate:
          type: integer
          format: int64
          description: The date when this message was suppressed.
    BulkActionResult:
      description: |
        The results of list based bulk action. The list contains the result messages
        in the same order as submitted. The message will be an empty string if the action
        was successful for item in that index.
      properties:
        overallResult:
          type: string
          enum:
            - SUCCESS
            - FAIL
        results:
          type: array
          items:
            type: string
    UserConnectionRequest:
      type: object
      description: Request body for the Connection APIs
      properties:
        userId:
          type: integer
          format: int64
          description: user id
    UserConnection:
      type: object
      description: Connection status between two users
      properties:
        userId:
          type: integer
          format: int64
          description: user id
        status:
          type: string
          description: Connection status between the requesting user and the request sender
          enum:
            - PENDING_INCOMING
            - PENDING_OUTGOING
            - ACCEPTED
            - REJECTED
        firstRequestedAt:
          type: integer
          format: int64
          description: unix timestamp when the first request was made
        updatedAt:
          type: integer
          format: int64
          description: unix timestamp on the last updated date
        requestCounter:
          type: integer
          format: int32
          description: number of requests made
    UserConnectionList:
      type: array
      items:
        $ref: '#/components/schemas/UserConnection'
    StreamList:
      description: A list of streams of which the requesting user is a member.
      type: array
      items:
        $ref: '#/components/schemas/StreamAttributes'
    StreamAttributes:
      type: object
      properties:
        id:
          type: string
          description: The stream ID.
        crossPod:
          type: boolean
          description: If true, this is a cross-pod stream.
        active:
          type: boolean
          description: If true, this stream is active.
        streamType:
          # The type of the stream (IM, multi-IM, chat room, user wall).
          $ref: '#/components/schemas/StreamType'
        streamAttributes:
          # Additional stream details applicable to IMs, MIMs and user walls.
          $ref: '#/components/schemas/ConversationSpecificStreamAttributes'
        roomAttributes:
          # Additional stream details applicable to chatrooms.
          $ref: '#/components/schemas/RoomSpecificStreamAttributes'
    StreamType:
      type: object
      properties:
        type:
          type: string
          enum:
            - IM
            - MIM
            - ROOM
            - POST
    ConversationSpecificStreamAttributes:
      type: object
      properties:
        members:
          # User IDs of the participants of the stream.
          $ref: '#/components/schemas/UserIdList'
    RoomSpecificStreamAttributes:
      type: object
      properties:
        name:
          type: string
          description: Room name.
    StreamFilter:
      description: Stream filtering parameters.
      properties:
        streamTypes:
          description: Types of streams to search for.
          type: array
          items:
            $ref: '#/components/schemas/StreamType'
        includeInactiveStreams:
          description: Whether to include inactive streams in the list of results.
          type: boolean
    V2StreamAttributes:
      type: object
      properties:
        id:
          type: string
          description: The stream ID.
        crossPod:
          type: boolean
          description: If true, this is a cross-pod stream.
        origin:
          type: string
          description: INTERNAL if the creator of this stream belongs to the pod, EXTERNAL otherwise
        active:
          type: boolean
          description: If true, this stream is active.
        lastMessageDate:
          type: integer
          format: int64
          description: unix timestamp of the last message sent in the stream
        streamType:
          description: The type of the stream (IM = IM, multi-IM = MIM, chat room = ROOM, user wall = POST).
          $ref: '#/components/schemas/V2StreamType'
        streamAttributes:
          # Additional stream details applicable to IMs, MIMs and user walls.
          $ref: '#/components/schemas/V2ConversationSpecificStreamAttributes'
        roomAttributes:
          # Additional stream details applicable to chatrooms.
          $ref: '#/components/schemas/V2RoomSpecificStreamAttributes'
    V2StreamType:
      type: object
      properties:
        type:
          type: string
    V2ConversationSpecificStreamAttributes:
      type: object
      properties:
        members:
          # User IDs of the participants of the stream.
          $ref: '#/components/schemas/UserIdList'
    V2RoomSpecificStreamAttributes:
      type: object
      properties:
        name:
          type: string
          description: Room name.
        groups:
          description: List of groups (aka SDLs) that were added to the room.
          type: array
          items:
            $ref: '#/components/schemas/GroupItem'
    V2AdminStreamFilter:
      description: stream filter criteria
      type: object
      properties:
        streamTypes:
          description: type of streams to search for
          type: array
          items:
            description: Valid values are IM, MIM or ROOM
            $ref: '#/components/schemas/V2AdminStreamType'
        scope:
          description: |
            Scope of the room. Valid values are INTERNAL or EXTERNAL.
            If not specified, it will include both Internal and External scope
          type: string
        origin:
          description: |
            Origin of the room. It indicates whether the room was created by a user within the company by another company.
            Valid values are INTERNAL or EXTERNAL.
            If not specified, it will include both Internal and External origin
          type: string
        status:
          description: |
            Status of the room.
            Valid values are ACTIVE or INACTIVE.
            If not specified, it will include both Active and Inactive status
          type: string
        privacy:
          description: |
            Privacy setting of the stream.
            Valid values are PUBLIC or PRIVATE.
            If not specified, it will include both public and private streams
          type: string
        startDate:
          description: Start date in unix timestamp in millseconds
          type: integer
          format: int64
        endDate:
          description: End date in unix timestamp in millseconds.  If not specified, it assume to be current time.
          type: integer
          format: int64
    V2AdminStreamType:
      type: object
      properties:
        type:
          type: string
    AdminJustifiedUserAction:
      type: object
      properties:
        userId:
          description: The userId of the target user.
          type: integer
          format: int64
        justification:
          description: The reason for the requested action.
          type: string
    AdminJustifiedAction:
      type: object
      properties:
        justification:
          description: The reason for the requested action.
          type: string
    MessageStatusUser:
      type: object
      properties:
        userId:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        displayName:
          type: string
        email:
          type: string
        userName:
          type: string
        timestamp:
          type: string
    MessageStatus:
      description: |
        Holds the status of a particular message, indicating which user the message has been sent, delivered or read.
      type: object
      properties:
        author:
          description: User who has sent the message.
          type: object
          $ref: '#/components/schemas/MessageStatusUser'
        read:
          description: All users who have read that message, in any Symphony client.
          type: array
          items:
            $ref: '#/components/schemas/MessageStatusUser'
        delivered:
          description: |
            All users who have at least one Symphony client to which the message has been delivered, and not read yet.
          type: array
          items:
            $ref: '#/components/schemas/MessageStatusUser'
        sent:
          description: |
            All users to whom the message has been sent and received by the Symphony system,
            but not yet delivered to any user's Symphony client.
          type: array
          items:
            $ref: '#/components/schemas/MessageStatusUser'
    ApplicationInfo:
      description: |
        Required information for creating an application.
      type: object
      properties:
        appId:
          description: An unique id for the application.
          type: string
          minLength: 1
          maxLength: 256
        name:
          description: User defined name for the application.
          type: string
        appUrl:
          description: The url for the app. Must start with "https://".
          type: string
        domain:
          description: Domain for app, that must match app url domain.
          type: string
        publisher:
          description: The publisher for this application.
          type: string
    ApplicationDetail:
      description: Detailed record of application.
      type: object
      properties:
        applicationInfo:
          # Required info for the creation of an application.
          $ref: '#/components/schemas/ApplicationInfo'
        iconUrl:
          description: Url to a icon to use for app. Must start with "https://".
          type: string
        description:
          description: Description of the application.
          type: string
        allowOrigins:
          description: |
            The permitted domains to send or receive a request from.
            The field is for the purpose of CORS which set the app specific "ALLOW-ORIGIN-DOMAINS" header in HTTP.
          type: string
        permissions:
          description: |
            List of application permissions provisioned for the application.
            In addition to the known ones, custom permissions are accepted.
            A custom permission should only contain upper case alphanumeric characters and underscore.
            It should not be empty or only contain spaces and its length is limited to 64 characters.
            
            Known permissions:
              - SEND_MESSAGES
              - GET_USER_CONNECTIONS
              - REQUEST_USER_CONNECTIONS
              - SET_PRESENCE
              - GET_PRESENCE
              - GET_BASIC_USER_INFO
              - GET_EXTENDED_USER_INFO
              - GET_BASIC_CONTACT_INFO
              - GET_EXTENDED_CONTACT_INFO
              - ACT_AS_USER
              - MANAGE_SIGNALS
              - MANAGE_USER_FOLLOWING
              - TRUST_APP
          type: array
          items:
            type: string
            maxLength: 64
            minLength: 1
        cert:
          description: The app public certificate in pem format.
          type: string
        authenticationKeys:
          $ref: '#/components/schemas/AppAuthenticationKeys'
        notification:
          $ref: '#/components/schemas/AppNotification'
        properties:
          $ref: '#/components/schemas/AppProperties'
    V2PresenceList:
      type: array
      items:
        $ref: '#/components/schemas/V2Presence'
    V2Presence:
      allOf:
        - $ref: '#/components/schemas/V2UserPresence'
        - type: object
          properties:
            timestamp:
              type: integer
              format: int64
              description: The time, in milliseconds since Jan 1 1970, when the presence state was set.
    V2UserPresence:
      allOf:
        - $ref: '#/components/schemas/V2PresenceStatus'
        - type: object
          properties:
            userId:
              type: integer
              format: int64
              description: The ID of the user to whom the presence state relates.
    V2PresenceStatus:
      type: object
      properties:
        category:
          type: string
          description: |
            Presence status. Possible values are:
              - UNDEFINED
              - AVAILABLE
              - BUSY
              - DO_NOT_DISTURB
              - ON_THE_PHONE
              - BE_RIGHT_BACK
              - IN_A_MEETING
              - AWAY
              - OUT_OF_OFFICE
              - OFF_WORK
              - OFFLINE
      required:
        - category
    V2AdminStreamList:
      description: list of streams info
      type: object
      properties:
        count:
          type: integer
          format: int64
          description: total number of streams which match the filter criteria
        skip:
          type: integer
          description: number of streams skipped
        limit:
          type: integer
          description: maximum number of streams return
        filter:
          # filter criteria used in the request
          $ref: '#/components/schemas/V2AdminStreamFilter'
        streams:
          # list of streams
          $ref: '#/components/schemas/V2AdminStreamInfoList'
    V2AdminStreamInfoList:
      type: array
      description: list of stream info
      items:
        $ref: '#/components/schemas/V2AdminStreamInfo'
    V2AdminStreamInfo:
      description: Stream information
      type: object
      properties:
        id:
          type: string
          description: stream id
        isExternal:
          type: boolean
          description: true indicate this stream has the scope of external and false indictate this stream has the scope of internal. Deprecated, use origin
        isActive:
          type: boolean
          description: true indicate that this stream has the status of active and false indicate this stream has the scope of inactive
        isPublic:
          type: boolean
          description: true indicate that this stream has a privacy setting of public.  This only apply a ROOM stream type.
        type:
          type: string
          description: type of stream (IM, MIM, ROOM)
        crossPod:
          type: boolean
          description: If true, this is a cross-pod stream.
        origin:
          type: string
          description: INTERNAL if the creator of this stream belongs to the pod, EXTERNAL otherwise
        attributes:
          # additional optional properties of the stream
          $ref: '#/components/schemas/V2AdminStreamAttributes'
    V2AdminStreamAttributes:
      description: additional optional properties for the stream
      type: object
      properties:
        roomName:
          type: string
          description: room name (room only)
        roomDescription:
          type: string
          description: description of the room (room only)
        members:
          type: array
          description: list of userid who is member of the stream - im or mim only
          items:
            type: integer
            format: int64
        createdByUserId:
          type: integer
          format: int64
          description: creator user id
        createdDate:
          type: integer
          format: int64
          description: created date
        lastModifiedDate:
          type: integer
          format: int64
          description: last modified date
        originCompany:
          type: string
          description: company name of the creator
        originCompanyId:
          type: integer
          description: company id of the creator
        membersCount:
          type: integer
          description: total number of members in the stream
        lastMessageDate:
          type: integer
          format: int64
          description: last date a message was sent in this stream
        groupChat:
          type: boolean
          description: whether a stream is a group chat or not
    FileExtension:
      type: object
      required:
        - extension
      properties:
        extension:
          type: string
          description: |
            The file extension that this specific record is for.  This is a unique ID
            that allows this record to be referenced in the URI.
          example: ".txt"
        scope_internal:
          type: boolean
          description: |
            File extension allowed for internal scope
        scope_external:
          type: boolean
          description: |
            File extension allowed for external scope
        scope_xpod:
          type: boolean
          description: |
            File extension allowed to be received from another POD
        source:
          type: string
          description: |
            File extension with metadata understood by the system or file extension created by a customer
          enum:
            - "SYSTEM"
            - "CUSTOMER"
    Pagination:
      type: object
      required:
        - cursors
      properties:
        cursors:
          type: object
          properties:
            before:
              type: string
              description: |
                This is the opaque url-safe string that points to the start of the page of data
                that has been returned.
              example: "MTAxNTExOTQ1MjAwNzI5NDE="
            after:
              type: string
              description: |
                This is the opaque url-safe string that points to the end of the page of data
                that has been returned.
              example: "NDMyNzQyODI3OTQw"
        previous:
          type: string
          description: |
            API endpoint that will return the previous page of data. If not included, this is
            the first page of data.
          example: "https://tenantapi.d.isym.io/v1/tenantinfo?limit=25&before=MTAxNTExOTQ1MjAwNzI5NDE="
        next:
          type: string
          description: |
            API endpoint that will return the next page of data. If not included, this is the
            last page of data. Due to how pagination works with visibility and privacy, it is
            possible that a page may be empty but contain a 'next' paging link. Stop paging when
            the 'next' link no longer appears.
          example: "https://tenantapi.d.isym.io/v1/tenantinfo?limit=25&after=NDMyNzQyODI3OTQw"
    FileExtensionsResponse:
      type: object
      required:
        - data
        - paging
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/FileExtension"
    Protocol:
      type: object
      required:
        - scheme
      properties:
        scheme:
          type: string
          description: "URI protocol scheme (example: http, https, ftp)"
    AppAuthenticationKeys:
      description: App RSA keys information.
      type: object
      properties:
        current:
          $ref: "#/components/schemas/AppAuthenticationKey"
        previous:
          $ref: "#/components/schemas/AppAuthenticationKey"
    AppAuthenticationKey:
      description: App RSA key information.
      type: object
      properties:
        key:
          description: Application RSA public key.
          type: string
        expirationDate:
          description: RSA key expiration date. This value is set just for rotated keys.
          type: integer
          format: int64
        action:
          description: |
            Action to be performed on the RSA key.
            The following actions can be performed onto the app's active RSA key:
              - SAVE
              - REVOKE
            The following actions can be performed onto the app's rotated RSA key:
              - REVOKE
              - EXTEND
          type: string
    AppNotification:
      type: object
      description: Application callback information
      properties:
        url:
          type: string
          description: "callback URL"
        apiKey:
          type: string
          description: "apiKey sent into every callback request, using the X-API-KEY header"
    AppProperties:
      type: array
      description: Application configuration properties that are shared with the extension application, client side. Do not store sensitive information here.
      items:
        $ref: '#/components/schemas/AppProperty'
    AppProperty:
      type: object
      description: Application configuration property that is shared with the extension application, client side. Do not store sensitive information here.
      properties:
        key:
          type: string
          description: Name of an application configuration property. It cannot be null or empty and its length is limited to 1024 characters. Keys are unique.
        value:
          type: string
          description: Value of an application configuration property. It cannot be null and its length is limited to 4096 characters. It can be empty.
    StreamAttachmentResponse:
      type: array
      items:
        $ref: "#/components/schemas/StreamAttachmentItem"
    StreamAttachmentItem:
      description: File attachments for a message in a stream
      type: object
      properties:
        messageId:
          type: string
        ingestionDate:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        fileId:
          type: string
          description: The attachment File ID.
        name:
          type: string
          description: The file name.
        size:
          type: integer
          format: int64
          description: Size in bytes.
        content-type:
          type: string
        previews:
          type: array
          items:
            $ref: "#/components/schemas/AttachmentPreview"
    AttachmentPreview:
      description: Preview file for image attachments
      type: object
      properties:
        fileId:
          type: string
          description: The preview file ID
        width:
          type: integer
          description: The preview image width
    UserGroupCreate:
      description: Body for group creation
      type: object
      properties:
        name:
          description: Group name
          type: string
        area:
          description: Group area
          type: string
        description:
          description: Group description
          type: string
        type:
          description: Group type
          type: string
      required:
        - name
        - type
    UserGroupResponse:
      description: Group object response
      type: object
      properties:
        id:
          description: Group ID
          type: string
        name:
          description: Group name
          type: string
        area:
          description: An optional string attribute used for categorizing groups
          type: string
        description:
          description: Group description
          type: string
        type:
          description: Group type
          type: string
        active:
          description: Group status
          type: boolean
        createdDate:
          description: Date of group creation
          type: integer
          format: int64
        modifiedDate:
          description: Date of group last update
          type: integer
          format: int64
        memberCount:
          description: Number of group members
          type: integer
          format: int64
        assigneeCount:
          description: Number of group assignees
          type: integer
          format: int64
    UserGroupResponseList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserGroupResponse'
        pagination:
          type: object
          $ref: "#/components/schemas/Pagination"
    UserGroupUpdate:
      description: Body for group update
      type: object
      properties:
        name:
          description: Group name
          type: string
        area:
          description: Group area
          type: string
        description:
          description: Group description
          type: string
        active:
          description: Group status
          type: boolean
    UserGroupMembershipResponseData:
      description: User object response
      type: object
      properties:
        id:
          type: string
        groupId:
          type: string
        group:
          type: object
          $ref: '#/components/schemas/GroupRoleScope'
        userId:
          type: integer
          format: int64
        user:
          type: object
          $ref: '#/components/schemas/UserCompp'
        active:
          type: boolean
        lastAddedDate:
          type: integer
          format: int64
        lastRemovedDate:
          type: integer
          format: int64
    GroupRoleScope:
      description: User Group info to include in other models
      type: object
      properties:
        id:
          type: string
          description: Group ID
        name:
          type: string
          description: Group name
        area:
          type: string
          description: An optional string attribute used for categorizing groups
        type:
          type: string
          description: Group type
        active:
          type: boolean
          description: Group status
    UserCompp:
      description: Basic user information to include in other models
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: User ID
        username:
          type: string
          description: Username
        firstName:
          type: string
          description: User first name
        lastName:
          type: string
          description: User last name
        emailAddress:
          type: string
          description: User email addressIntegrationUserManagerTest
    UserGroupMembershipRequest:
      description: Body for user group membership creation
      type: object
      properties:
        active:
          type: boolean
    UserGroupMembershipData:
      description: Body for user group membership response
      type: object
      properties:
        id:
          type: string
        groupId:
          type: string
        userId:
          type: integer
          format: int64
        group:
          type: object
          $ref: "#/components/schemas/UserGroupData"
        user:
          type: object
          $ref: "#/components/schemas/MembershipData"
        active:
          type: boolean
        lastAddedDate:
          type: integer
          format: int64
        lastRemovedDate:
          type: integer
          format: int64
    MembershipData:
      description: User object response
      type: object
      properties:
        id:
          type: integer
          format: int64
        userName:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        emailAddress:
          type: string
    UserGroupData:
      description: Group object response
      type: object
      properties:
        id:
          description: Group Id
          type: string
        name:
          description: Group name
          type: string
        area:
          description: Group area
          type: string
        type:
          description: Group type
          type: string
        active:
          description: Group Status
          type: boolean
    UserGroupMembershipResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserGroupMembershipResponseData'
        pagination:
          type: object
          $ref: "#/components/schemas/Pagination"
    UserGroupAssignee:
      description: User group assignee object
      type: object
      properties:
        id:
          description: Assignee id
          type: string
        groupId:
          type: string
        group:
          description: Group
          type: object
          $ref: '#/components/schemas/GroupRoleScope'
        userId:
          type: integer
          format: int64
        user:
          type: object
          $ref: '#/components/schemas/UserCompp'
        userRoles:
          type: array
          items:
            type: string
        active:
          type: boolean
        lastAddedDate:
          description: Last added
          type: integer
          format: int64
        lastRemovedDate:
          description: Last removed
          type: integer
          format: int64
    UserData:
      description: User object response
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        emailAddress:
          type: string
    UserGroupAssigneeResponse:
      description: response
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserGroupAssignee'
        pagination:
          type: object
          $ref: '#/components/schemas/Pagination'
    UserGroupAssigneeUpdate:
      description: Body for user group assignee update
      type: object
      properties:
        current:
          description: Assignee status
          type: boolean
      required:
        - current
    UserGroupMembershipUpdate:
      description: User Group membership update object
      type: object
      properties:
        active:
          description: Group membership status
          type: boolean
    UserGroupAssignmentResponse:
      description: User Group assignment response object
      type: object
      properties:
        id:
          type: string
          description: Assignment ID
        groupId:
          type: string
          description: Group ID
        group:
          type: object
          $ref: '#/components/schemas/GroupRoleScope'
        userId:
          type: integer
          format: int64
          description: User ID
        user:
          type: object
          $ref: '#/components/schemas/UserCompp'
        userRoles:
          type: array
          items:
            type: string
        active:
          type: boolean
          description: Group membership status
        lastAddedDate:
          type: integer
          format: int64
          description: Date of group membership last added
        lastRemovedDate:
          type: integer
          format: int64
          description: Date of group membership last removed
    DownloadReceiptCount:
      type: object
      properties:
        fileName:
          type: string
        timestamp:
          type: integer
          format: int64
    MessageReceiptDetail:
      description: Message receipt details response object
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserCompp'
        deliveryReceiptTimestamp:
          description: Timestamp of message delivery receipts
          type: integer
          format: int64
        readReceiptTimestamp:
          description: Timestamp of message read receipts
          type: integer
          format: int64
        emailNotificationTimestamp:
          description: Timestamp of message email notifications
          type: integer
          format: int64
        downloadReceiptCounts:
          type: array
          items:
            $ref: '#/components/schemas/DownloadReceiptCount'
    MessageReceiptDetailResponse:
      description: List of Message receipt details
      type: object
      properties:
        creator:
          $ref: '#/components/schemas/MessageUser'
        onBehalfOfUser:
          $ref: '#/components/schemas/MessageUser'
        stream:
          $ref: '#/components/schemas/MessageStream'
        creationDate:
          type: integer
          format: int64
        deliveryReceiptCount:
          type: integer
        readReceiptCount:
          type: integer
        emailNotificationCount:
          type: integer
        downloadReceiptCounts:
          type: array
          items:
            $ref: '#/components/schemas/MessageDownloadReceiptCount'
        MessageReceiptDetail:
          type: array
          items:
            $ref: '#/components/schemas/MessageReceiptDetail'
        pagination:
          $ref: "#/components/schemas/Pagination"
    MessageUser:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    MessageStream:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        streamType:
          type: string
    MessageDownloadReceiptCount:
      type: object
      properties:
        fileName:
          type: string
        count:
          type: integer
          format: int64
    MessageDetail:
      description: Message detail
      type: object
      properties:
        messageId:
          description: message id
          type: string
        creator:
          $ref: '#/components/schemas/MessageUser'
        onBehalfOfUser:
          $ref: '#/components/schemas/MessageUser'
        stream:
          $ref: '#/components/schemas/MessageStream'
        creationDate:
          type: integer
          format: int64
        deliveryReceiptCount:
          type: integer
          format: int64
        readReceiptCount:
          type: integer
          format: int64
        emailNotificationCount:
          type: integer
          format: int64
        downloadReceiptCounts:
          type: array
          items:
            $ref: '#/components/schemas/MessageDownloadReceiptCount'
    MessageDetails:
      description: Message details
      type: array
      items:
        $ref: '#/components/schemas/MessageDetail'
    MessageIds:
      type: object
      properties:
        messageIds:
          $ref: '#/components/schemas/StringList'
    AssigneeCandidate:
      description: Assignee Candidate
      type: object
      properties:
        userId:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        surname:
          type: string
        emailAddress:
          type: string
        canBeAssigned:
          type: boolean
        roles:
          $ref: '#/components/schemas/StringList'
    AssigneeCandidates:
      description: List of assignee candidate
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/AssigneeCandidate'
        pagination:
          type: object
          $ref: "#/components/schemas/Pagination"
    Languages:
      description: List of languages
      type: object
      properties:
        languages:
          $ref: "#/components/schemas/StringList"
    MessageMetadataResponse:
      description: Message metadata
      type: object
      properties:
        messageId:
          type: string
        parent:
          type: object
          properties:
            messageId:
              type: string
              description: Id of the parent message queried
            relationshipType:
              type: string
              enum:
                - REPLY_FORM
                - REPLY
                - FORWARD
        replies:
          type: array
          items:
            type: string
        forwards:
          type: array
          items:
            type: string
        formReplies:
          type: array
          items:
            type: string
    UserSuspension:
      type: object
      properties:
        suspended:
          type: boolean
        suspendedUntil:
          type: integer
          format: int64
        suspensionReason:
          type: string
    FollowersList:
      type: object
      properties:
        followers:
          $ref: '#/components/schemas/UserIdList'
    FollowersListResponse:
      type: object
      properties:
        count:
          type: integer
          format: int64
        followers:
          type: array
          items:
            type: integer
            format: int64
        pagination:
          $ref: '#/components/schemas/Pagination'
    FollowingListResponse:
      type: object
      properties:
        count:
          type: integer
          format: int64
        following:
          type: array
          items:
            type: integer
            format: int64
        pagination:
          $ref: '#/components/schemas/Pagination'
    V1IMAttributes:
      type: object
      properties:
        pinnedMessageId:
          type: string
          description: UrlSafe message id of the pinned message inside the IM. To perform unpin operation, send an empty string.
    V1IMDetail:
      type: object
      properties:
        V1IMAttributes:
          $ref: '#/components/schemas/V1IMAttributes'
        IMSystemInfo:
          $ref: '#/components/schemas/IMSystemInfo'
    IMSystemInfo:
      type: object
      properties:
        id:
          type: string
        creationDate:
          type: integer
          format: int64
          description: The datetime when the stream was originally created. Milliseconds since Jan 1 1970.
        active:
          type: boolean
          description: If false, no messages can be sent in this stream, and membership is locked.
    ServiceAccountManifest:
      type: object
      properties:
        manifest:
          type: string
          maxLength: 6144
          description: Manifest containing commands supported by the service account. Must be valid JSON.
      required:
        - manifest

