{
	"info": {
		"_postman_id": "b0d4d0d6-5cf3-424b-8546-59fd8c8271b7",
		"name": "Symphony REST APIs",
		"description": "[Full documentation on the developer's website](https://developers.symphony.com/restapi/reference)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "RSA Session Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"sessionToken\", pm.response.json().token);",
									"",
									"// parse JWT token",
									"var parts = pm.response.json().token.split('.');",
									"pm.environment.set(\"user_id\", JSON.parse(atob(parts[1])).userId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*",
									"* JSEncrypt Library extracted from https://github.com/travist/jsencrypt",
									"* Modified to remove references to window, navigator that will not run in Postman",
									"*/",
									"var BI_RM=\"0123456789abcdefghijklmnopqrstuvwxyz\";function int2char(t){return BI_RM.charAt(t)}function op_and(t,e){return t&e}function op_or(t,e){return t|e}function op_xor(t,e){return t^e}function op_andnot(t,e){return t&~e}function lbit(t){if(0==t)return-1;var e=0;return 0==(65535&t)&&(t>>=16,e+=16),0==(255&t)&&(t>>=8,e+=8),0==(15&t)&&(t>>=4,e+=4),0==(3&t)&&(t>>=2,e+=2),0==(1&t)&&++e,e}function cbit(t){for(var e=0;0!=t;)t&=t-1,++e;return e}var b64map=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",b64pad=\"=\";function hex2b64(t){var e,i,r=\"\";for(e=0;e+3<=t.length;e+=3)i=parseInt(t.substring(e,e+3),16),r+=b64map.charAt(i>>6)+b64map.charAt(63&i);for(e+1==t.length?(i=parseInt(t.substring(e,e+1),16),r+=b64map.charAt(i<<2)):e+2==t.length&&(i=parseInt(t.substring(e,e+2),16),r+=b64map.charAt(i>>2)+b64map.charAt((3&i)<<4));(3&r.length)>0;)r+=b64pad;return r}function b64tohex(t){var e,i=\"\",r=0,n=0;for(e=0;e<t.length&&t.charAt(e)!=b64pad;++e){var s=b64map.indexOf(t.charAt(e));s<0||(0==r?(i+=int2char(s>>2),n=3&s,r=1):1==r?(i+=int2char(n<<2|s>>4),n=15&s,r=2):2==r?(i+=int2char(n),i+=int2char(s>>2),n=3&s,r=3):(i+=int2char(n<<2|s>>4),i+=int2char(15&s),r=0))}return 1==r&&(i+=int2char(n<<2)),i}var decoder,extendStatics=function(t,e){return(extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)};function __extends(t,e){function i(){this.constructor=t}extendStatics(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}var decoder$1,Hex={decode:function(t){var e;if(void 0===decoder){var i=\"0123456789ABCDEF\",r=\" \\f\\n\\r\\t \\u2028\\u2029\";for(decoder={},e=0;e<16;++e)decoder[i.charAt(e)]=e;for(i=i.toLowerCase(),e=10;e<16;++e)decoder[i.charAt(e)]=e;for(e=0;e<r.length;++e)decoder[r.charAt(e)]=-1}var n=[],s=0,o=0;for(e=0;e<t.length;++e){var h=t.charAt(e);if(\"=\"==h)break;if(-1!=(h=decoder[h])){if(void 0===h)throw new Error(\"Illegal character at offset \"+e);s|=h,++o>=2?(n[n.length]=s,s=0,o=0):s<<=4}}if(o)throw new Error(\"Hex encoding incomplete: 4 bits missing\");return n}},Base64={decode:function(t){var e;if(void 0===decoder$1){var i=\"= \\f\\n\\r\\t \\u2028\\u2029\";for(decoder$1=Object.create(null),e=0;e<64;++e)decoder$1[\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".charAt(e)]=e;for(e=0;e<i.length;++e)decoder$1[i.charAt(e)]=-1}var r=[],n=0,s=0;for(e=0;e<t.length;++e){var o=t.charAt(e);if(\"=\"==o)break;if(-1!=(o=decoder$1[o])){if(void 0===o)throw new Error(\"Illegal character at offset \"+e);n|=o,++s>=4?(r[r.length]=n>>16,r[r.length]=n>>8&255,r[r.length]=255&n,n=0,s=0):n<<=6}}switch(s){case 1:throw new Error(\"Base64 encoding incomplete: at least 2 bits missing\");case 2:r[r.length]=n>>10;break;case 3:r[r.length]=n>>16,r[r.length]=n>>8&255}return r},re:/-----BEGIN [^-]+-----([A-Za-z0-9+\\/=\\s]+)-----END [^-]+-----|begin-base64[^\\n]+\\n([A-Za-z0-9+\\/=\\s]+)====/,unarmor:function(t){var e=Base64.re.exec(t);if(e)if(e[1])t=e[1];else{if(!e[2])throw new Error(\"RegExp out of sync\");t=e[2]}return Base64.decode(t)}},max=1e13,Int10=function(){function t(t){this.buf=[+t||0]}return t.prototype.mulAdd=function(t,e){var i,r,n=this.buf,s=n.length;for(i=0;i<s;++i)(r=n[i]*t+e)<max?e=0:r-=(e=0|r/max)*max,n[i]=r;e>0&&(n[i]=e)},t.prototype.sub=function(t){var e,i,r=this.buf,n=r.length;for(e=0;e<n;++e)(i=r[e]-t)<0?(i+=max,t=1):t=0,r[e]=i;for(;0===r[r.length-1];)r.pop()},t.prototype.toString=function(t){if(10!=(t||10))throw new Error(\"only base 10 is supported\");for(var e=this.buf,i=e[e.length-1].toString(),r=e.length-2;r>=0;--r)i+=(max+e[r]).toString().substring(1);return i},t.prototype.valueOf=function(){for(var t=this.buf,e=0,i=t.length-1;i>=0;--i)e=e*max+t[i];return e},t.prototype.simplify=function(){var t=this.buf;return 1==t.length?t[0]:this},t}(),ellipsis=\"…\",reTimeS=/^(\\d\\d)(0[1-9]|1[0-2])(0[1-9]|[12]\\d|3[01])([01]\\d|2[0-3])(?:([0-5]\\d)(?:([0-5]\\d)(?:[.,](\\d{1,3}))?)?)?(Z|[-+](?:[0]\\d|1[0-2])([0-5]\\d)?)?$/,reTimeL=/^(\\d\\d\\d\\d)(0[1-9]|1[0-2])(0[1-9]|[12]\\d|3[01])([01]\\d|2[0-3])(?:([0-5]\\d)(?:([0-5]\\d)(?:[.,](\\d{1,3}))?)?)?(Z|[-+](?:[0]\\d|1[0-2])([0-5]\\d)?)?$/;function stringCut(t,e){return t.length>e&&(t=t.substring(0,e)+ellipsis),t}var dbits,Stream=function(){function t(e,i){this.hexDigits=\"0123456789ABCDEF\",e instanceof t?(this.enc=e.enc,this.pos=e.pos):(this.enc=e,this.pos=i)}return t.prototype.get=function(t){if(void 0===t&&(t=this.pos++),t>=this.enc.length)throw new Error(\"Requesting byte offset \"+t+\" on a stream of length \"+this.enc.length);return\"string\"==typeof this.enc?this.enc.charCodeAt(t):this.enc[t]},t.prototype.hexByte=function(t){return this.hexDigits.charAt(t>>4&15)+this.hexDigits.charAt(15&t)},t.prototype.hexDump=function(t,e,i){for(var r=\"\",n=t;n<e;++n)if(r+=this.hexByte(this.get(n)),!0!==i)switch(15&n){case 7:r+=\"  \";break;case 15:r+=\"\\n\";break;default:r+=\" \"}return r},t.prototype.isASCII=function(t,e){for(var i=t;i<e;++i){var r=this.get(i);if(r<32||r>176)return!1}return!0},t.prototype.parseStringISO=function(t,e){for(var i=\"\",r=t;r<e;++r)i+=String.fromCharCode(this.get(r));return i},t.prototype.parseStringUTF=function(t,e){for(var i=\"\",r=t;r<e;){var n=this.get(r++);i+=n<128?String.fromCharCode(n):n>191&&n<224?String.fromCharCode((31&n)<<6|63&this.get(r++)):String.fromCharCode((15&n)<<12|(63&this.get(r++))<<6|63&this.get(r++))}return i},t.prototype.parseStringBMP=function(t,e){for(var i,r,n=\"\",s=t;s<e;)i=this.get(s++),r=this.get(s++),n+=String.fromCharCode(i<<8|r);return n},t.prototype.parseTime=function(t,e,i){var r=this.parseStringISO(t,e),n=(i?reTimeS:reTimeL).exec(r);return n?(i&&(n[1]=+n[1],n[1]+=+n[1]<70?2e3:1900),r=n[1]+\"-\"+n[2]+\"-\"+n[3]+\" \"+n[4],n[5]&&(r+=\":\"+n[5],n[6]&&(r+=\":\"+n[6],n[7]&&(r+=\".\"+n[7]))),n[8]&&(r+=\" UTC\",\"Z\"!=n[8]&&(r+=n[8],n[9]&&(r+=\":\"+n[9]))),r):\"Unrecognized time: \"+r},t.prototype.parseInteger=function(t,e){for(var i,r=this.get(t),n=r>127,s=n?255:0,o=\"\";r==s&&++t<e;)r=this.get(t);if(0===(i=e-t))return n?-1:0;if(i>4){for(o=r,i<<=3;0==(128&(+o^s));)o=+o<<1,--i;o=\"(\"+i+\" bit)\\n\"}n&&(r-=256);for(var h=new Int10(r),a=t+1;a<e;++a)h.mulAdd(256,this.get(a));return o+h.toString()},t.prototype.parseBitString=function(t,e,i){for(var r=this.get(t),n=\"(\"+((e-t-1<<3)-r)+\" bit)\\n\",s=\"\",o=t+1;o<e;++o){for(var h=this.get(o),a=o==e-1?r:0,u=7;u>=a;--u)s+=h>>u&1?\"1\":\"0\";if(s.length>i)return n+stringCut(s,i)}return n+s},t.prototype.parseOctetString=function(t,e,i){if(this.isASCII(t,e))return stringCut(this.parseStringISO(t,e),i);var r=e-t,n=\"(\"+r+\" byte)\\n\";r>(i/=2)&&(e=t+i);for(var s=t;s<e;++s)n+=this.hexByte(this.get(s));return r>i&&(n+=ellipsis),n},t.prototype.parseOID=function(t,e,i){for(var r=\"\",n=new Int10,s=0,o=t;o<e;++o){var h=this.get(o);if(n.mulAdd(128,127&h),s+=7,!(128&h)){if(\"\"===r)if((n=n.simplify())instanceof Int10)n.sub(80),r=\"2.\"+n.toString();else{var a=n<80?n<40?0:1:2;r=a+\".\"+(n-40*a)}else r+=\".\"+n.toString();if(r.length>i)return stringCut(r,i);n=new Int10,s=0}}return s>0&&(r+=\".incomplete\"),r},t}(),ASN1=function(){function t(t,e,i,r,n){if(!(r instanceof ASN1Tag))throw new Error(\"Invalid tag value.\");this.stream=t,this.header=e,this.length=i,this.tag=r,this.sub=n}return t.prototype.typeName=function(){switch(this.tag.tagClass){case 0:switch(this.tag.tagNumber){case 0:return\"EOC\";case 1:return\"BOOLEAN\";case 2:return\"INTEGER\";case 3:return\"BIT_STRING\";case 4:return\"OCTET_STRING\";case 5:return\"NULL\";case 6:return\"OBJECT_IDENTIFIER\";case 7:return\"ObjectDescriptor\";case 8:return\"EXTERNAL\";case 9:return\"REAL\";case 10:return\"ENUMERATED\";case 11:return\"EMBEDDED_PDV\";case 12:return\"UTF8String\";case 16:return\"SEQUENCE\";case 17:return\"SET\";case 18:return\"NumericString\";case 19:return\"PrintableString\";case 20:return\"TeletexString\";case 21:return\"VideotexString\";case 22:return\"IA5String\";case 23:return\"UTCTime\";case 24:return\"GeneralizedTime\";case 25:return\"GraphicString\";case 26:return\"VisibleString\";case 27:return\"GeneralString\";case 28:return\"UniversalString\";case 30:return\"BMPString\"}return\"Universal_\"+this.tag.tagNumber.toString();case 1:return\"Application_\"+this.tag.tagNumber.toString();case 2:return\"[\"+this.tag.tagNumber.toString()+\"]\";case 3:return\"Private_\"+this.tag.tagNumber.toString()}},t.prototype.content=function(t){if(void 0===this.tag)return null;void 0===t&&(t=1/0);var e=this.posContent(),i=Math.abs(this.length);if(!this.tag.isUniversal())return null!==this.sub?\"(\"+this.sub.length+\" elem)\":this.stream.parseOctetString(e,e+i,t);switch(this.tag.tagNumber){case 1:return 0===this.stream.get(e)?\"false\":\"true\";case 2:return this.stream.parseInteger(e,e+i);case 3:return this.sub?\"(\"+this.sub.length+\" elem)\":this.stream.parseBitString(e,e+i,t);case 4:return this.sub?\"(\"+this.sub.length+\" elem)\":this.stream.parseOctetString(e,e+i,t);case 6:return this.stream.parseOID(e,e+i,t);case 16:case 17:return null!==this.sub?\"(\"+this.sub.length+\" elem)\":\"(no elem)\";case 12:return stringCut(this.stream.parseStringUTF(e,e+i),t);case 18:case 19:case 20:case 21:case 22:case 26:return stringCut(this.stream.parseStringISO(e,e+i),t);case 30:return stringCut(this.stream.parseStringBMP(e,e+i),t);case 23:case 24:return this.stream.parseTime(e,e+i,23==this.tag.tagNumber)}return null},t.prototype.toString=function(){return this.typeName()+\"@\"+this.stream.pos+\"[header:\"+this.header+\",length:\"+this.length+\",sub:\"+(null===this.sub?\"null\":this.sub.length)+\"]\"},t.prototype.toPrettyString=function(t){void 0===t&&(t=\"\");var e=t+this.typeName()+\" @\"+this.stream.pos;if(this.length>=0&&(e+=\"+\"),e+=this.length,this.tag.tagConstructed?e+=\" (constructed)\":!this.tag.isUniversal()||3!=this.tag.tagNumber&&4!=this.tag.tagNumber||null===this.sub||(e+=\" (encapsulates)\"),e+=\"\\n\",null!==this.sub){t+=\"  \";for(var i=0,r=this.sub.length;i<r;++i)e+=this.sub[i].toPrettyString(t)}return e},t.prototype.posStart=function(){return this.stream.pos},t.prototype.posContent=function(){return this.stream.pos+this.header},t.prototype.posEnd=function(){return this.stream.pos+this.header+Math.abs(this.length)},t.prototype.toHexString=function(){return this.stream.hexDump(this.posStart(),this.posEnd(),!0)},t.decodeLength=function(t){var e=t.get(),i=127&e;if(i==e)return i;if(i>6)throw new Error(\"Length over 48 bits not supported at position \"+(t.pos-1));if(0===i)return null;e=0;for(var r=0;r<i;++r)e=256*e+t.get();return e},t.prototype.getHexStringValue=function(){var t=this.toHexString(),e=2*this.header,i=2*this.length;return t.substr(e,i)},t.decode=function(e){var i;i=e instanceof Stream?e:new Stream(e,0);var r=new Stream(i),n=new ASN1Tag(i),s=t.decodeLength(i),o=i.pos,h=o-r.pos,a=null,u=function(){var e=[];if(null!==s){for(var r=o+s;i.pos<r;)e[e.length]=t.decode(i);if(i.pos!=r)throw new Error(\"Content size is not correct for container starting at offset \"+o)}else try{for(;;){var n=t.decode(i);if(n.tag.isEOC())break;e[e.length]=n}s=o-i.pos}catch(t){throw new Error(\"Exception while decoding undefined length content: \"+t)}return e};if(n.tagConstructed)a=u();else if(n.isUniversal()&&(3==n.tagNumber||4==n.tagNumber))try{if(3==n.tagNumber&&0!=i.get())throw new Error(\"BIT STRINGs with unused bits cannot encapsulate.\");a=u();for(var c=0;c<a.length;++c)if(a[c].tag.isEOC())throw new Error(\"EOC is not supposed to be actual content.\")}catch(t){a=null}if(null===a){if(null===s)throw new Error(\"We can't skip over an invalid tag with undefined length at offset \"+o);i.pos=o+Math.abs(s)}return new t(r,h,s,n,a)},t}(),ASN1Tag=function(){function t(t){var e=t.get();if(this.tagClass=e>>6,this.tagConstructed=0!=(32&e),this.tagNumber=31&e,31==this.tagNumber){var i=new Int10;do{e=t.get(),i.mulAdd(128,127&e)}while(128&e);this.tagNumber=i.simplify()}}return t.prototype.isUniversal=function(){return 0===this.tagClass},t.prototype.isEOC=function(){return 0===this.tagClass&&0===this.tagNumber},t}(),canary=0xdeadbeefcafe,j_lm=15715070==(16777215&canary),lowprimes=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],lplim=(1<<26)/lowprimes[lowprimes.length-1],BigInteger=function(){function t(t,e,i){null!=t&&(\"number\"==typeof t?this.fromNumber(t,e,i):null==e&&\"string\"!=typeof t?this.fromString(t,256):this.fromString(t,e))}return t.prototype.toString=function(t){if(this.s<0)return\"-\"+this.negate().toString(t);var e;if(16==t)e=4;else if(8==t)e=3;else if(2==t)e=1;else if(32==t)e=5;else{if(4!=t)return this.toRadix(t);e=2}var i,r=(1<<e)-1,n=!1,s=\"\",o=this.t,h=this.DB-o*this.DB%e;if(o-- >0)for(h<this.DB&&(i=this[o]>>h)>0&&(n=!0,s=int2char(i));o>=0;)h<e?(i=(this[o]&(1<<h)-1)<<e-h,i|=this[--o]>>(h+=this.DB-e)):(i=this[o]>>(h-=e)&r,h<=0&&(h+=this.DB,--o)),i>0&&(n=!0),n&&(s+=int2char(i));return n?s:\"0\"},t.prototype.negate=function(){var e=nbi();return t.ZERO.subTo(this,e),e},t.prototype.abs=function(){return this.s<0?this.negate():this},t.prototype.compareTo=function(t){var e=this.s-t.s;if(0!=e)return e;var i=this.t;if(0!=(e=i-t.t))return this.s<0?-e:e;for(;--i>=0;)if(0!=(e=this[i]-t[i]))return e;return 0},t.prototype.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+nbits(this[this.t-1]^this.s&this.DM)},t.prototype.mod=function(e){var i=nbi();return this.abs().divRemTo(e,null,i),this.s<0&&i.compareTo(t.ZERO)>0&&e.subTo(i,i),i},t.prototype.modPowInt=function(t,e){var i;return i=t<256||e.isEven()?new Classic(e):new Montgomery(e),this.exp(t,i)},t.prototype.clone=function(){var t=nbi();return this.copyTo(t),t},t.prototype.intValue=function(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},t.prototype.byteValue=function(){return 0==this.t?this.s:this[0]<<24>>24},t.prototype.shortValue=function(){return 0==this.t?this.s:this[0]<<16>>16},t.prototype.signum=function(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},t.prototype.toByteArray=function(){var t=this.t,e=[];e[0]=this.s;var i,r=this.DB-t*this.DB%8,n=0;if(t-- >0)for(r<this.DB&&(i=this[t]>>r)!=(this.s&this.DM)>>r&&(e[n++]=i|this.s<<this.DB-r);t>=0;)r<8?(i=(this[t]&(1<<r)-1)<<8-r,i|=this[--t]>>(r+=this.DB-8)):(i=this[t]>>(r-=8)&255,r<=0&&(r+=this.DB,--t)),0!=(128&i)&&(i|=-256),0==n&&(128&this.s)!=(128&i)&&++n,(n>0||i!=this.s)&&(e[n++]=i);return e},t.prototype.equals=function(t){return 0==this.compareTo(t)},t.prototype.min=function(t){return this.compareTo(t)<0?this:t},t.prototype.max=function(t){return this.compareTo(t)>0?this:t},t.prototype.and=function(t){var e=nbi();return this.bitwiseTo(t,op_and,e),e},t.prototype.or=function(t){var e=nbi();return this.bitwiseTo(t,op_or,e),e},t.prototype.xor=function(t){var e=nbi();return this.bitwiseTo(t,op_xor,e),e},t.prototype.andNot=function(t){var e=nbi();return this.bitwiseTo(t,op_andnot,e),e},t.prototype.not=function(){for(var t=nbi(),e=0;e<this.t;++e)t[e]=this.DM&~this[e];return t.t=this.t,t.s=~this.s,t},t.prototype.shiftLeft=function(t){var e=nbi();return t<0?this.rShiftTo(-t,e):this.lShiftTo(t,e),e},t.prototype.shiftRight=function(t){var e=nbi();return t<0?this.lShiftTo(-t,e):this.rShiftTo(t,e),e},t.prototype.getLowestSetBit=function(){for(var t=0;t<this.t;++t)if(0!=this[t])return t*this.DB+lbit(this[t]);return this.s<0?this.t*this.DB:-1},t.prototype.bitCount=function(){for(var t=0,e=this.s&this.DM,i=0;i<this.t;++i)t+=cbit(this[i]^e);return t},t.prototype.testBit=function(t){var e=Math.floor(t/this.DB);return e>=this.t?0!=this.s:0!=(this[e]&1<<t%this.DB)},t.prototype.setBit=function(t){return this.changeBit(t,op_or)},t.prototype.clearBit=function(t){return this.changeBit(t,op_andnot)},t.prototype.flipBit=function(t){return this.changeBit(t,op_xor)},t.prototype.add=function(t){var e=nbi();return this.addTo(t,e),e},t.prototype.subtract=function(t){var e=nbi();return this.subTo(t,e),e},t.prototype.multiply=function(t){var e=nbi();return this.multiplyTo(t,e),e},t.prototype.divide=function(t){var e=nbi();return this.divRemTo(t,e,null),e},t.prototype.remainder=function(t){var e=nbi();return this.divRemTo(t,null,e),e},t.prototype.divideAndRemainder=function(t){var e=nbi(),i=nbi();return this.divRemTo(t,e,i),[e,i]},t.prototype.modPow=function(t,e){var i,r,n=t.bitLength(),s=nbv(1);if(n<=0)return s;i=n<18?1:n<48?3:n<144?4:n<768?5:6,r=n<8?new Classic(e):e.isEven()?new Barrett(e):new Montgomery(e);var o=[],h=3,a=i-1,u=(1<<i)-1;if(o[1]=r.convert(this),i>1){var c=nbi();for(r.sqrTo(o[1],c);h<=u;)o[h]=nbi(),r.mulTo(c,o[h-2],o[h]),h+=2}var f,p,l=t.t-1,g=!0,d=nbi();for(n=nbits(t[l])-1;l>=0;){for(n>=a?f=t[l]>>n-a&u:(f=(t[l]&(1<<n+1)-1)<<a-n,l>0&&(f|=t[l-1]>>this.DB+n-a)),h=i;0==(1&f);)f>>=1,--h;if((n-=h)<0&&(n+=this.DB,--l),g)o[f].copyTo(s),g=!1;else{for(;h>1;)r.sqrTo(s,d),r.sqrTo(d,s),h-=2;h>0?r.sqrTo(s,d):(p=s,s=d,d=p),r.mulTo(d,o[f],s)}for(;l>=0&&0==(t[l]&1<<n);)r.sqrTo(s,d),p=s,s=d,d=p,--n<0&&(n=this.DB-1,--l)}return r.revert(s)},t.prototype.modInverse=function(e){var i=e.isEven();if(this.isEven()&&i||0==e.signum())return t.ZERO;for(var r=e.clone(),n=this.clone(),s=nbv(1),o=nbv(0),h=nbv(0),a=nbv(1);0!=r.signum();){for(;r.isEven();)r.rShiftTo(1,r),i?(s.isEven()&&o.isEven()||(s.addTo(this,s),o.subTo(e,o)),s.rShiftTo(1,s)):o.isEven()||o.subTo(e,o),o.rShiftTo(1,o);for(;n.isEven();)n.rShiftTo(1,n),i?(h.isEven()&&a.isEven()||(h.addTo(this,h),a.subTo(e,a)),h.rShiftTo(1,h)):a.isEven()||a.subTo(e,a),a.rShiftTo(1,a);r.compareTo(n)>=0?(r.subTo(n,r),i&&s.subTo(h,s),o.subTo(a,o)):(n.subTo(r,n),i&&h.subTo(s,h),a.subTo(o,a))}return 0!=n.compareTo(t.ONE)?t.ZERO:a.compareTo(e)>=0?a.subtract(e):a.signum()<0?(a.addTo(e,a),a.signum()<0?a.add(e):a):a},t.prototype.pow=function(t){return this.exp(t,new NullExp)},t.prototype.gcd=function(t){var e=this.s<0?this.negate():this.clone(),i=t.s<0?t.negate():t.clone();if(e.compareTo(i)<0){var r=e;e=i,i=r}var n=e.getLowestSetBit(),s=i.getLowestSetBit();if(s<0)return e;for(n<s&&(s=n),s>0&&(e.rShiftTo(s,e),i.rShiftTo(s,i));e.signum()>0;)(n=e.getLowestSetBit())>0&&e.rShiftTo(n,e),(n=i.getLowestSetBit())>0&&i.rShiftTo(n,i),e.compareTo(i)>=0?(e.subTo(i,e),e.rShiftTo(1,e)):(i.subTo(e,i),i.rShiftTo(1,i));return s>0&&i.lShiftTo(s,i),i},t.prototype.isProbablePrime=function(t){var e,i=this.abs();if(1==i.t&&i[0]<=lowprimes[lowprimes.length-1]){for(e=0;e<lowprimes.length;++e)if(i[0]==lowprimes[e])return!0;return!1}if(i.isEven())return!1;for(e=1;e<lowprimes.length;){for(var r=lowprimes[e],n=e+1;n<lowprimes.length&&r<lplim;)r*=lowprimes[n++];for(r=i.modInt(r);e<n;)if(r%lowprimes[e++]==0)return!1}return i.millerRabin(t)},t.prototype.copyTo=function(t){for(var e=this.t-1;e>=0;--e)t[e]=this[e];t.t=this.t,t.s=this.s},t.prototype.fromInt=function(t){this.t=1,this.s=t<0?-1:0,t>0?this[0]=t:t<-1?this[0]=t+this.DV:this.t=0},t.prototype.fromString=function(e,i){var r;if(16==i)r=4;else if(8==i)r=3;else if(256==i)r=8;else if(2==i)r=1;else if(32==i)r=5;else{if(4!=i)return void this.fromRadix(e,i);r=2}this.t=0,this.s=0;for(var n=e.length,s=!1,o=0;--n>=0;){var h=8==r?255&+e[n]:intAt(e,n);h<0?\"-\"==e.charAt(n)&&(s=!0):(s=!1,0==o?this[this.t++]=h:o+r>this.DB?(this[this.t-1]|=(h&(1<<this.DB-o)-1)<<o,this[this.t++]=h>>this.DB-o):this[this.t-1]|=h<<o,(o+=r)>=this.DB&&(o-=this.DB))}8==r&&0!=(128&+e[0])&&(this.s=-1,o>0&&(this[this.t-1]|=(1<<this.DB-o)-1<<o)),this.clamp(),s&&t.ZERO.subTo(this,this)},t.prototype.clamp=function(){for(var t=this.s&this.DM;this.t>0&&this[this.t-1]==t;)--this.t},t.prototype.dlShiftTo=function(t,e){var i;for(i=this.t-1;i>=0;--i)e[i+t]=this[i];for(i=t-1;i>=0;--i)e[i]=0;e.t=this.t+t,e.s=this.s},t.prototype.drShiftTo=function(t,e){for(var i=t;i<this.t;++i)e[i-t]=this[i];e.t=Math.max(this.t-t,0),e.s=this.s},t.prototype.lShiftTo=function(t,e){for(var i=t%this.DB,r=this.DB-i,n=(1<<r)-1,s=Math.floor(t/this.DB),o=this.s<<i&this.DM,h=this.t-1;h>=0;--h)e[h+s+1]=this[h]>>r|o,o=(this[h]&n)<<i;for(h=s-1;h>=0;--h)e[h]=0;e[s]=o,e.t=this.t+s+1,e.s=this.s,e.clamp()},t.prototype.rShiftTo=function(t,e){e.s=this.s;var i=Math.floor(t/this.DB);if(i>=this.t)e.t=0;else{var r=t%this.DB,n=this.DB-r,s=(1<<r)-1;e[0]=this[i]>>r;for(var o=i+1;o<this.t;++o)e[o-i-1]|=(this[o]&s)<<n,e[o-i]=this[o]>>r;r>0&&(e[this.t-i-1]|=(this.s&s)<<n),e.t=this.t-i,e.clamp()}},t.prototype.subTo=function(t,e){for(var i=0,r=0,n=Math.min(t.t,this.t);i<n;)r+=this[i]-t[i],e[i++]=r&this.DM,r>>=this.DB;if(t.t<this.t){for(r-=t.s;i<this.t;)r+=this[i],e[i++]=r&this.DM,r>>=this.DB;r+=this.s}else{for(r+=this.s;i<t.t;)r-=t[i],e[i++]=r&this.DM,r>>=this.DB;r-=t.s}e.s=r<0?-1:0,r<-1?e[i++]=this.DV+r:r>0&&(e[i++]=r),e.t=i,e.clamp()},t.prototype.multiplyTo=function(e,i){var r=this.abs(),n=e.abs(),s=r.t;for(i.t=s+n.t;--s>=0;)i[s]=0;for(s=0;s<n.t;++s)i[s+r.t]=r.am(0,n[s],i,s,0,r.t);i.s=0,i.clamp(),this.s!=e.s&&t.ZERO.subTo(i,i)},t.prototype.squareTo=function(t){for(var e=this.abs(),i=t.t=2*e.t;--i>=0;)t[i]=0;for(i=0;i<e.t-1;++i){var r=e.am(i,e[i],t,2*i,0,1);(t[i+e.t]+=e.am(i+1,2*e[i],t,2*i+1,r,e.t-i-1))>=e.DV&&(t[i+e.t]-=e.DV,t[i+e.t+1]=1)}t.t>0&&(t[t.t-1]+=e.am(i,e[i],t,2*i,0,1)),t.s=0,t.clamp()},t.prototype.divRemTo=function(e,i,r){var n=e.abs();if(!(n.t<=0)){var s=this.abs();if(s.t<n.t)return null!=i&&i.fromInt(0),void(null!=r&&this.copyTo(r));null==r&&(r=nbi());var o=nbi(),h=this.s,a=e.s,u=this.DB-nbits(n[n.t-1]);u>0?(n.lShiftTo(u,o),s.lShiftTo(u,r)):(n.copyTo(o),s.copyTo(r));var c=o.t,f=o[c-1];if(0!=f){var p=f*(1<<this.F1)+(c>1?o[c-2]>>this.F2:0),l=this.FV/p,g=(1<<this.F1)/p,d=1<<this.F2,m=r.t,v=m-c,y=null==i?nbi():i;for(o.dlShiftTo(v,y),r.compareTo(y)>=0&&(r[r.t++]=1,r.subTo(y,r)),t.ONE.dlShiftTo(c,y),y.subTo(o,o);o.t<c;)o[o.t++]=0;for(;--v>=0;){var b=r[--m]==f?this.DM:Math.floor(r[m]*l+(r[m-1]+d)*g);if((r[m]+=o.am(0,b,r,v,0,c))<b)for(o.dlShiftTo(v,y),r.subTo(y,r);r[m]<--b;)r.subTo(y,r)}null!=i&&(r.drShiftTo(c,i),h!=a&&t.ZERO.subTo(i,i)),r.t=c,r.clamp(),u>0&&r.rShiftTo(u,r),h<0&&t.ZERO.subTo(r,r)}}},t.prototype.invDigit=function(){if(this.t<1)return 0;var t=this[0];if(0==(1&t))return 0;var e=3&t;return(e=(e=(e=(e=e*(2-(15&t)*e)&15)*(2-(255&t)*e)&255)*(2-((65535&t)*e&65535))&65535)*(2-t*e%this.DV)%this.DV)>0?this.DV-e:-e},t.prototype.isEven=function(){return 0==(this.t>0?1&this[0]:this.s)},t.prototype.exp=function(e,i){if(e>4294967295||e<1)return t.ONE;var r=nbi(),n=nbi(),s=i.convert(this),o=nbits(e)-1;for(s.copyTo(r);--o>=0;)if(i.sqrTo(r,n),(e&1<<o)>0)i.mulTo(n,s,r);else{var h=r;r=n,n=h}return i.revert(r)},t.prototype.chunkSize=function(t){return Math.floor(Math.LN2*this.DB/Math.log(t))},t.prototype.toRadix=function(t){if(null==t&&(t=10),0==this.signum()||t<2||t>36)return\"0\";var e=this.chunkSize(t),i=Math.pow(t,e),r=nbv(i),n=nbi(),s=nbi(),o=\"\";for(this.divRemTo(r,n,s);n.signum()>0;)o=(i+s.intValue()).toString(t).substr(1)+o,n.divRemTo(r,n,s);return s.intValue().toString(t)+o},t.prototype.fromRadix=function(e,i){this.fromInt(0),null==i&&(i=10);for(var r=this.chunkSize(i),n=Math.pow(i,r),s=!1,o=0,h=0,a=0;a<e.length;++a){var u=intAt(e,a);u<0?\"-\"==e.charAt(a)&&0==this.signum()&&(s=!0):(h=i*h+u,++o>=r&&(this.dMultiply(n),this.dAddOffset(h,0),o=0,h=0))}o>0&&(this.dMultiply(Math.pow(i,o)),this.dAddOffset(h,0)),s&&t.ZERO.subTo(this,this)},t.prototype.fromNumber=function(e,i,r){if(\"number\"==typeof i)if(e<2)this.fromInt(1);else for(this.fromNumber(e,r),this.testBit(e-1)||this.bitwiseTo(t.ONE.shiftLeft(e-1),op_or,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(i);)this.dAddOffset(2,0),this.bitLength()>e&&this.subTo(t.ONE.shiftLeft(e-1),this);else{var n=[],s=7&e;n.length=1+(e>>3),i.nextBytes(n),s>0?n[0]&=(1<<s)-1:n[0]=0,this.fromString(n,256)}},t.prototype.bitwiseTo=function(t,e,i){var r,n,s=Math.min(t.t,this.t);for(r=0;r<s;++r)i[r]=e(this[r],t[r]);if(t.t<this.t){for(n=t.s&this.DM,r=s;r<this.t;++r)i[r]=e(this[r],n);i.t=this.t}else{for(n=this.s&this.DM,r=s;r<t.t;++r)i[r]=e(n,t[r]);i.t=t.t}i.s=e(this.s,t.s),i.clamp()},t.prototype.changeBit=function(e,i){var r=t.ONE.shiftLeft(e);return this.bitwiseTo(r,i,r),r},t.prototype.addTo=function(t,e){for(var i=0,r=0,n=Math.min(t.t,this.t);i<n;)r+=this[i]+t[i],e[i++]=r&this.DM,r>>=this.DB;if(t.t<this.t){for(r+=t.s;i<this.t;)r+=this[i],e[i++]=r&this.DM,r>>=this.DB;r+=this.s}else{for(r+=this.s;i<t.t;)r+=t[i],e[i++]=r&this.DM,r>>=this.DB;r+=t.s}e.s=r<0?-1:0,r>0?e[i++]=r:r<-1&&(e[i++]=this.DV+r),e.t=i,e.clamp()},t.prototype.dMultiply=function(t){this[this.t]=this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp()},t.prototype.dAddOffset=function(t,e){if(0!=t){for(;this.t<=e;)this[this.t++]=0;for(this[e]+=t;this[e]>=this.DV;)this[e]-=this.DV,++e>=this.t&&(this[this.t++]=0),++this[e]}},t.prototype.multiplyLowerTo=function(t,e,i){var r=Math.min(this.t+t.t,e);for(i.s=0,i.t=r;r>0;)i[--r]=0;for(var n=i.t-this.t;r<n;++r)i[r+this.t]=this.am(0,t[r],i,r,0,this.t);for(n=Math.min(t.t,e);r<n;++r)this.am(0,t[r],i,r,0,e-r);i.clamp()},t.prototype.multiplyUpperTo=function(t,e,i){--e;var r=i.t=this.t+t.t-e;for(i.s=0;--r>=0;)i[r]=0;for(r=Math.max(e-this.t,0);r<t.t;++r)i[this.t+r-e]=this.am(e-r,t[r],i,0,0,this.t+r-e);i.clamp(),i.drShiftTo(1,i)},t.prototype.modInt=function(t){if(t<=0)return 0;var e=this.DV%t,i=this.s<0?t-1:0;if(this.t>0)if(0==e)i=this[0]%t;else for(var r=this.t-1;r>=0;--r)i=(e*i+this[r])%t;return i},t.prototype.millerRabin=function(e){var i=this.subtract(t.ONE),r=i.getLowestSetBit();if(r<=0)return!1;var n=i.shiftRight(r);(e=e+1>>1)>lowprimes.length&&(e=lowprimes.length);for(var s=nbi(),o=0;o<e;++o){s.fromInt(lowprimes[Math.floor(Math.random()*lowprimes.length)]);var h=s.modPow(n,this);if(0!=h.compareTo(t.ONE)&&0!=h.compareTo(i)){for(var a=1;a++<r&&0!=h.compareTo(i);)if(0==(h=h.modPowInt(2,this)).compareTo(t.ONE))return!1;if(0!=h.compareTo(i))return!1}}return!0},t.prototype.square=function(){var t=nbi();return this.squareTo(t),t},t.prototype.gcda=function(t,e){var i=this.s<0?this.negate():this.clone(),r=t.s<0?t.negate():t.clone();if(i.compareTo(r)<0){var n=i;i=r,r=n}var s=i.getLowestSetBit(),o=r.getLowestSetBit();if(o<0)e(i);else{s<o&&(o=s),o>0&&(i.rShiftTo(o,i),r.rShiftTo(o,r));var h=function(){(s=i.getLowestSetBit())>0&&i.rShiftTo(s,i),(s=r.getLowestSetBit())>0&&r.rShiftTo(s,r),i.compareTo(r)>=0?(i.subTo(r,i),i.rShiftTo(1,i)):(r.subTo(i,r),r.rShiftTo(1,r)),i.signum()>0?setTimeout(h,0):(o>0&&r.lShiftTo(o,r),setTimeout(function(){e(r)},0))};setTimeout(h,10)}},t.prototype.fromNumberAsync=function(e,i,r,n){if(\"number\"==typeof i)if(e<2)this.fromInt(1);else{this.fromNumber(e,r),this.testBit(e-1)||this.bitwiseTo(t.ONE.shiftLeft(e-1),op_or,this),this.isEven()&&this.dAddOffset(1,0);var s=this,o=function(){s.dAddOffset(2,0),s.bitLength()>e&&s.subTo(t.ONE.shiftLeft(e-1),s),s.isProbablePrime(i)?setTimeout(function(){n()},0):setTimeout(o,0)};setTimeout(o,0)}else{var h=[],a=7&e;h.length=1+(e>>3),i.nextBytes(h),a>0?h[0]&=(1<<a)-1:h[0]=0,this.fromString(h,256)}},t}(),NullExp=function(){function t(){}return t.prototype.convert=function(t){return t},t.prototype.revert=function(t){return t},t.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i)},t.prototype.sqrTo=function(t,e){t.squareTo(e)},t}(),Classic=function(){function t(t){this.m=t}return t.prototype.convert=function(t){return t.s<0||t.compareTo(this.m)>=0?t.mod(this.m):t},t.prototype.revert=function(t){return t},t.prototype.reduce=function(t){t.divRemTo(this.m,null,t)},t.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i),this.reduce(i)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}(),Montgomery=function(){function t(t){this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t}return t.prototype.convert=function(t){var e=nbi();return t.abs().dlShiftTo(this.m.t,e),e.divRemTo(this.m,null,e),t.s<0&&e.compareTo(BigInteger.ZERO)>0&&this.m.subTo(e,e),e},t.prototype.revert=function(t){var e=nbi();return t.copyTo(e),this.reduce(e),e},t.prototype.reduce=function(t){for(;t.t<=this.mt2;)t[t.t++]=0;for(var e=0;e<this.m.t;++e){var i=32767&t[e],r=i*this.mpl+((i*this.mph+(t[e]>>15)*this.mpl&this.um)<<15)&t.DM;for(t[i=e+this.m.t]+=this.m.am(0,r,t,e,0,this.m.t);t[i]>=t.DV;)t[i]-=t.DV,t[++i]++}t.clamp(),t.drShiftTo(this.m.t,t),t.compareTo(this.m)>=0&&t.subTo(this.m,t)},t.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i),this.reduce(i)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}(),Barrett=function(){function t(t){this.m=t,this.r2=nbi(),this.q3=nbi(),BigInteger.ONE.dlShiftTo(2*t.t,this.r2),this.mu=this.r2.divide(t)}return t.prototype.convert=function(t){if(t.s<0||t.t>2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)<0)return t;var e=nbi();return t.copyTo(e),this.reduce(e),e},t.prototype.revert=function(t){return t},t.prototype.reduce=function(t){for(t.drShiftTo(this.m.t-1,this.r2),t.t>this.m.t+1&&(t.t=this.m.t+1,t.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);t.compareTo(this.r2)<0;)t.dAddOffset(1,this.m.t+1);for(t.subTo(this.r2,t);t.compareTo(this.m)>=0;)t.subTo(this.m,t)},t.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i),this.reduce(i)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}();function nbi(){return new BigInteger(null)}function parseBigInt(t,e){return new BigInteger(t,e)}function am1(t,e,i,r,n,s){for(;--s>=0;){var o=e*this[t++]+i[r]+n;n=Math.floor(o/67108864),i[r++]=67108863&o}return n}function am2(t,e,i,r,n,s){for(var o=32767&e,h=e>>15;--s>=0;){var a=32767&this[t],u=this[t++]>>15,c=h*a+u*o;n=((a=o*a+((32767&c)<<15)+i[r]+(1073741823&n))>>>30)+(c>>>15)+h*u+(n>>>30),i[r++]=1073741823&a}return n}function am3(t,e,i,r,n,s){for(var o=16383&e,h=e>>14;--s>=0;){var a=16383&this[t],u=this[t++]>>14,c=h*a+u*o;n=((a=o*a+((16383&c)<<14)+i[r]+n)>>28)+(c>>14)+h*u,i[r++]=268435455&a}return n}BigInteger.prototype.am=am3,dbits=28,BigInteger.prototype.DB=dbits,BigInteger.prototype.DM=(1<<dbits)-1,BigInteger.prototype.DV=1<<dbits;var BI_FP=52;BigInteger.prototype.FV=Math.pow(2,BI_FP),BigInteger.prototype.F1=BI_FP-dbits,BigInteger.prototype.F2=2*dbits-BI_FP;var rr,vv,BI_RC=[];for(rr=\"0\".charCodeAt(0),vv=0;vv<=9;++vv)BI_RC[rr++]=vv;for(rr=\"a\".charCodeAt(0),vv=10;vv<36;++vv)BI_RC[rr++]=vv;for(rr=\"A\".charCodeAt(0),vv=10;vv<36;++vv)BI_RC[rr++]=vv;function intAt(t,e){var i=BI_RC[t.charCodeAt(e)];return null==i?-1:i}function nbv(t){var e=nbi();return e.fromInt(t),e}function nbits(t){var e,i=1;return 0!=(e=t>>>16)&&(t=e,i+=16),0!=(e=t>>8)&&(t=e,i+=8),0!=(e=t>>4)&&(t=e,i+=4),0!=(e=t>>2)&&(t=e,i+=2),0!=(e=t>>1)&&(t=e,i+=1),i}BigInteger.ZERO=nbv(0),BigInteger.ONE=nbv(1);var Arcfour=function(){function t(){this.i=0,this.j=0,this.S=[]}return t.prototype.init=function(t){var e,i,r;for(e=0;e<256;++e)this.S[e]=e;for(i=0,e=0;e<256;++e)i=i+this.S[e]+t[e%t.length]&255,r=this.S[e],this.S[e]=this.S[i],this.S[i]=r;this.i=0,this.j=0},t.prototype.next=function(){var t;return this.i=this.i+1&255,this.j=this.j+this.S[this.i]&255,t=this.S[this.i],this.S[this.i]=this.S[this.j],this.S[this.j]=t,this.S[t+this.S[this.i]&255]},t}();function prng_newstate(){return new Arcfour}var rng_state,rng_pptr,rng_psize=256,rng_pool=null;if(null==rng_pool){rng_pool=[],rng_pptr=0;var t=void 0}function rng_get_byte(){if(null==rng_state){for(rng_state=prng_newstate();rng_pptr<rng_psize;){var t=Math.floor(65536*Math.random());rng_pool[rng_pptr++]=255&t}for(rng_state.init(rng_pool),rng_pptr=0;rng_pptr<rng_pool.length;++rng_pptr)rng_pool[rng_pptr]=0;rng_pptr=0}return rng_state.next()}var SecureRandom=function(){function t(){}return t.prototype.nextBytes=function(t){for(var e=0;e<t.length;++e)t[e]=rng_get_byte()},t}();function pkcs1pad1(t,e){if(e<t.length+22)return console.error(\"Message too long for RSA\"),null;for(var i=e-t.length-6,r=\"\",n=0;n<i;n+=2)r+=\"ff\";return parseBigInt(\"0001\"+r+\"00\"+t,16)}function pkcs1pad2(t,e){if(e<t.length+11)return console.error(\"Message too long for RSA\"),null;for(var i=[],r=t.length-1;r>=0&&e>0;){var n=t.charCodeAt(r--);n<128?i[--e]=n:n>127&&n<2048?(i[--e]=63&n|128,i[--e]=n>>6|192):(i[--e]=63&n|128,i[--e]=n>>6&63|128,i[--e]=n>>12|224)}i[--e]=0;for(var s=new SecureRandom,o=[];e>2;){for(o[0]=0;0==o[0];)s.nextBytes(o);i[--e]=o[0]}return i[--e]=2,i[--e]=0,new BigInteger(i)}var RSAKey=function(){function t(){this.n=null,this.e=0,this.d=null,this.p=null,this.q=null,this.dmp1=null,this.dmq1=null,this.coeff=null}return t.prototype.doPublic=function(t){return t.modPowInt(this.e,this.n)},t.prototype.doPrivate=function(t){if(null==this.p||null==this.q)return t.modPow(this.d,this.n);for(var e=t.mod(this.p).modPow(this.dmp1,this.p),i=t.mod(this.q).modPow(this.dmq1,this.q);e.compareTo(i)<0;)e=e.add(this.p);return e.subtract(i).multiply(this.coeff).mod(this.p).multiply(this.q).add(i)},t.prototype.setPublic=function(t,e){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=parseBigInt(t,16),this.e=parseInt(e,16)):console.error(\"Invalid RSA public key\")},t.prototype.encrypt=function(t){var e=pkcs1pad2(t,this.n.bitLength()+7>>3);if(null==e)return null;var i=this.doPublic(e);if(null==i)return null;var r=i.toString(16);return 0==(1&r.length)?r:\"0\"+r},t.prototype.setPrivate=function(t,e,i){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=parseBigInt(t,16),this.e=parseInt(e,16),this.d=parseBigInt(i,16)):console.error(\"Invalid RSA private key\")},t.prototype.setPrivateEx=function(t,e,i,r,n,s,o,h){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=parseBigInt(t,16),this.e=parseInt(e,16),this.d=parseBigInt(i,16),this.p=parseBigInt(r,16),this.q=parseBigInt(n,16),this.dmp1=parseBigInt(s,16),this.dmq1=parseBigInt(o,16),this.coeff=parseBigInt(h,16)):console.error(\"Invalid RSA private key\")},t.prototype.generate=function(t,e){var i=new SecureRandom,r=t>>1;this.e=parseInt(e,16);for(var n=new BigInteger(e,16);;){for(;this.p=new BigInteger(t-r,1,i),0!=this.p.subtract(BigInteger.ONE).gcd(n).compareTo(BigInteger.ONE)||!this.p.isProbablePrime(10););for(;this.q=new BigInteger(r,1,i),0!=this.q.subtract(BigInteger.ONE).gcd(n).compareTo(BigInteger.ONE)||!this.q.isProbablePrime(10););if(this.p.compareTo(this.q)<=0){var s=this.p;this.p=this.q,this.q=s}var o=this.p.subtract(BigInteger.ONE),h=this.q.subtract(BigInteger.ONE),a=o.multiply(h);if(0==a.gcd(n).compareTo(BigInteger.ONE)){this.n=this.p.multiply(this.q),this.d=n.modInverse(a),this.dmp1=this.d.mod(o),this.dmq1=this.d.mod(h),this.coeff=this.q.modInverse(this.p);break}}},t.prototype.decrypt=function(t){var e=parseBigInt(t,16),i=this.doPrivate(e);return null==i?null:pkcs1unpad2(i,this.n.bitLength()+7>>3)},t.prototype.generateAsync=function(t,e,i){var r=new SecureRandom,n=t>>1;this.e=parseInt(e,16);var s=new BigInteger(e,16),o=this,h=function(){var e=function(){if(o.p.compareTo(o.q)<=0){var t=o.p;o.p=o.q,o.q=t}var e=o.p.subtract(BigInteger.ONE),r=o.q.subtract(BigInteger.ONE),n=e.multiply(r);0==n.gcd(s).compareTo(BigInteger.ONE)?(o.n=o.p.multiply(o.q),o.d=s.modInverse(n),o.dmp1=o.d.mod(e),o.dmq1=o.d.mod(r),o.coeff=o.q.modInverse(o.p),setTimeout(function(){i()},0)):setTimeout(h,0)},a=function(){o.q=nbi(),o.q.fromNumberAsync(n,1,r,function(){o.q.subtract(BigInteger.ONE).gcda(s,function(t){0==t.compareTo(BigInteger.ONE)&&o.q.isProbablePrime(10)?setTimeout(e,0):setTimeout(a,0)})})},u=function(){o.p=nbi(),o.p.fromNumberAsync(t-n,1,r,function(){o.p.subtract(BigInteger.ONE).gcda(s,function(t){0==t.compareTo(BigInteger.ONE)&&o.p.isProbablePrime(10)?setTimeout(a,0):setTimeout(u,0)})})};setTimeout(u,0)};setTimeout(h,0)},t.prototype.sign=function(t,e,i){var r=pkcs1pad1(getDigestHeader(i)+e(t).toString(),this.n.bitLength()/4);if(null==r)return null;var n=this.doPrivate(r);if(null==n)return null;var s=n.toString(16);return 0==(1&s.length)?s:\"0\"+s},t.prototype.verify=function(t,e,i){var r=parseBigInt(e,16),n=this.doPublic(r);return null==n?null:removeDigestHeader(n.toString(16).replace(/^1f+00/,\"\"))==i(t).toString()},t}();function pkcs1unpad2(t,e){for(var i=t.toByteArray(),r=0;r<i.length&&0==i[r];)++r;if(i.length-r!=e-1||2!=i[r])return null;for(++r;0!=i[r];)if(++r>=i.length)return null;for(var n=\"\";++r<i.length;){var s=255&i[r];s<128?n+=String.fromCharCode(s):s>191&&s<224?(n+=String.fromCharCode((31&s)<<6|63&i[r+1]),++r):(n+=String.fromCharCode((15&s)<<12|(63&i[r+1])<<6|63&i[r+2]),r+=2)}return n}var DIGEST_HEADERS={md2:\"3020300c06082a864886f70d020205000410\",md5:\"3020300c06082a864886f70d020505000410\",sha1:\"3021300906052b0e03021a05000414\",sha224:\"302d300d06096086480165030402040500041c\",sha256:\"3031300d060960864801650304020105000420\",sha384:\"3041300d060960864801650304020205000430\",sha512:\"3051300d060960864801650304020305000440\",ripemd160:\"3021300906052b2403020105000414\"};function getDigestHeader(t){return DIGEST_HEADERS[t]||\"\"}function removeDigestHeader(t){for(var e in DIGEST_HEADERS)if(DIGEST_HEADERS.hasOwnProperty(e)){var i=DIGEST_HEADERS[e],r=i.length;if(t.substr(0,r)==i)return t.substr(r)}return t}var YAHOO={};YAHOO.lang={extend:function(t,e,i){if(!e||!t)throw new Error(\"YAHOO.lang.extend failed, please check that all dependencies are included.\");var r,n=function(){};if(n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t,t.superclass=e.prototype,e.prototype.constructor==Object.prototype.constructor&&(e.prototype.constructor=e),i)for(r in i)t.prototype[r]=i[r]}};var KJUR={};void 0!==KJUR.asn1&&KJUR.asn1||(KJUR.asn1={}),KJUR.asn1.ASN1Util=new function(){this.integerToByteHex=function(t){var e=t.toString(16);return e.length%2==1&&(e=\"0\"+e),e},this.bigIntToMinTwosComplementsHex=function(t){var e=t.toString(16);if(\"-\"!=e.substr(0,1))e.length%2==1?e=\"0\"+e:e.match(/^[0-7]/)||(e=\"00\"+e);else{var i=e.substr(1).length;i%2==1?i+=1:e.match(/^[0-7]/)||(i+=2);for(var r=\"\",n=0;n<i;n++)r+=\"f\";e=new BigInteger(r,16).xor(t).add(BigInteger.ONE).toString(16).replace(/^-/,\"\")}return e},this.getPEMStringFromHex=function(t,e){return hextopem(t,e)},this.newObject=function(t){var e=KJUR.asn1,i=e.DERBoolean,r=e.DERInteger,n=e.DERBitString,s=e.DEROctetString,o=e.DERNull,h=e.DERObjectIdentifier,a=e.DEREnumerated,u=e.DERUTF8String,c=e.DERNumericString,f=e.DERPrintableString,p=e.DERTeletexString,l=e.DERIA5String,g=e.DERUTCTime,d=e.DERGeneralizedTime,m=e.DERSequence,v=e.DERSet,y=e.DERTaggedObject,b=e.ASN1Util.newObject,S=Object.keys(t);if(1!=S.length)throw\"key of param shall be only one.\";var T=S[0];if(-1==\":bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:seq:set:tag:\".indexOf(\":\"+T+\":\"))throw\"undefined key: \"+T;if(\"bool\"==T)return new i(t[T]);if(\"int\"==T)return new r(t[T]);if(\"bitstr\"==T)return new n(t[T]);if(\"octstr\"==T)return new s(t[T]);if(\"null\"==T)return new o(t[T]);if(\"oid\"==T)return new h(t[T]);if(\"enum\"==T)return new a(t[T]);if(\"utf8str\"==T)return new u(t[T]);if(\"numstr\"==T)return new c(t[T]);if(\"prnstr\"==T)return new f(t[T]);if(\"telstr\"==T)return new p(t[T]);if(\"ia5str\"==T)return new l(t[T]);if(\"utctime\"==T)return new g(t[T]);if(\"gentime\"==T)return new d(t[T]);if(\"seq\"==T){for(var R=t[T],E=[],D=0;D<R.length;D++){var B=b(R[D]);E.push(B)}return new m({array:E})}if(\"set\"==T){for(R=t[T],E=[],D=0;D<R.length;D++){B=b(R[D]);E.push(B)}return new v({array:E})}if(\"tag\"==T){var w=t[T];if(\"[object Array]\"===Object.prototype.toString.call(w)&&3==w.length){var I=b(w[2]);return new y({tag:w[0],explicit:w[1],obj:I})}var x={};if(void 0!==w.explicit&&(x.explicit=w.explicit),void 0!==w.tag&&(x.tag=w.tag),void 0===w.obj)throw\"obj shall be specified for 'tag'.\";return x.obj=b(w.obj),new y(x)}},this.jsonToASN1HEX=function(t){return this.newObject(t).getEncodedHex()}},KJUR.asn1.ASN1Util.oidHexToInt=function(t){for(var e=\"\",i=parseInt(t.substr(0,2),16),r=(e=Math.floor(i/40)+\".\"+i%40,\"\"),n=2;n<t.length;n+=2){var s=(\"00000000\"+parseInt(t.substr(n,2),16).toString(2)).slice(-8);if(r+=s.substr(1,7),\"0\"==s.substr(0,1))e=e+\".\"+new BigInteger(r,2).toString(10),r=\"\"}return e},KJUR.asn1.ASN1Util.oidIntToHex=function(t){var e=function(t){var e=t.toString(16);return 1==e.length&&(e=\"0\"+e),e},i=function(t){var i=\"\",r=new BigInteger(t,10).toString(2),n=7-r.length%7;7==n&&(n=0);for(var s=\"\",o=0;o<n;o++)s+=\"0\";r=s+r;for(o=0;o<r.length-1;o+=7){var h=r.substr(o,7);o!=r.length-7&&(h=\"1\"+h),i+=e(parseInt(h,2))}return i};if(!t.match(/^[0-9.]+$/))throw\"malformed oid string: \"+t;var r=\"\",n=t.split(\".\"),s=40*parseInt(n[0])+parseInt(n[1]);r+=e(s),n.splice(0,2);for(var o=0;o<n.length;o++)r+=i(n[o]);return r},KJUR.asn1.ASN1Object=function(){this.getLengthHexFromValue=function(){if(void 0===this.hV||null==this.hV)throw\"this.hV is null or undefined.\";if(this.hV.length%2==1)throw\"value hex must be even length: n=\"+\"\".length+\",v=\"+this.hV;var t=this.hV.length/2,e=t.toString(16);if(e.length%2==1&&(e=\"0\"+e),t<128)return e;var i=e.length/2;if(i>15)throw\"ASN.1 length too long to represent by 8x: n = \"+t.toString(16);return(128+i).toString(16)+e},this.getEncodedHex=function(){return(null==this.hTLV||this.isModified)&&(this.hV=this.getFreshValueHex(),this.hL=this.getLengthHexFromValue(),this.hTLV=this.hT+this.hL+this.hV,this.isModified=!1),this.hTLV},this.getValueHex=function(){return this.getEncodedHex(),this.hV},this.getFreshValueHex=function(){return\"\"}},KJUR.asn1.DERAbstractString=function(t){KJUR.asn1.DERAbstractString.superclass.constructor.call(this),this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=stohex(this.s)},this.setStringHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(\"string\"==typeof t?this.setString(t):void 0!==t.str?this.setString(t.str):void 0!==t.hex&&this.setStringHex(t.hex))},YAHOO.lang.extend(KJUR.asn1.DERAbstractString,KJUR.asn1.ASN1Object),KJUR.asn1.DERAbstractTime=function(t){KJUR.asn1.DERAbstractTime.superclass.constructor.call(this),this.localDateToUTC=function(t){return utc=t.getTime()+6e4*t.getTimezoneOffset(),new Date(utc)},this.formatDate=function(t,e,i){var r=this.zeroPadding,n=this.localDateToUTC(t),s=String(n.getFullYear());\"utc\"==e&&(s=s.substr(2,2));var o=s+r(String(n.getMonth()+1),2)+r(String(n.getDate()),2)+r(String(n.getHours()),2)+r(String(n.getMinutes()),2)+r(String(n.getSeconds()),2);if(!0===i){var h=n.getMilliseconds();if(0!=h){var a=r(String(h),3);o=o+\".\"+(a=a.replace(/[0]+$/,\"\"))}}return o+\"Z\"},this.zeroPadding=function(t,e){return t.length>=e?t:new Array(e-t.length+1).join(\"0\")+t},this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=stohex(t)},this.setByDateValue=function(t,e,i,r,n,s){var o=new Date(Date.UTC(t,e-1,i,r,n,s,0));this.setByDate(o)},this.getFreshValueHex=function(){return this.hV}},YAHOO.lang.extend(KJUR.asn1.DERAbstractTime,KJUR.asn1.ASN1Object),KJUR.asn1.DERAbstractStructured=function(t){KJUR.asn1.DERAbstractString.superclass.constructor.call(this),this.setByASN1ObjectArray=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array=t},this.appendASN1Object=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array.push(t)},this.asn1Array=new Array,void 0!==t&&void 0!==t.array&&(this.asn1Array=t.array)},YAHOO.lang.extend(KJUR.asn1.DERAbstractStructured,KJUR.asn1.ASN1Object),KJUR.asn1.DERBoolean=function(){KJUR.asn1.DERBoolean.superclass.constructor.call(this),this.hT=\"01\",this.hTLV=\"0101ff\"},YAHOO.lang.extend(KJUR.asn1.DERBoolean,KJUR.asn1.ASN1Object),KJUR.asn1.DERInteger=function(t){KJUR.asn1.DERInteger.superclass.constructor.call(this),this.hT=\"02\",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new BigInteger(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.bigint?this.setByBigInteger(t.bigint):void 0!==t.int?this.setByInteger(t.int):\"number\"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},YAHOO.lang.extend(KJUR.asn1.DERInteger,KJUR.asn1.ASN1Object),KJUR.asn1.DERBitString=function(t){if(void 0!==t&&void 0!==t.obj){var e=KJUR.asn1.ASN1Util.newObject(t.obj);t.hex=\"00\"+e.getEncodedHex()}KJUR.asn1.DERBitString.superclass.constructor.call(this),this.hT=\"03\",this.setHexValueIncludingUnusedBits=function(t){this.hTLV=null,this.isModified=!0,this.hV=t},this.setUnusedBitsAndHexValue=function(t,e){if(t<0||7<t)throw\"unused bits shall be from 0 to 7: u = \"+t;var i=\"0\"+t;this.hTLV=null,this.isModified=!0,this.hV=i+e},this.setByBinaryString=function(t){var e=8-(t=t.replace(/0+$/,\"\")).length%8;8==e&&(e=0);for(var i=0;i<=e;i++)t+=\"0\";var r=\"\";for(i=0;i<t.length-1;i+=8){var n=t.substr(i,8),s=parseInt(n,2).toString(16);1==s.length&&(s=\"0\"+s),r+=s}this.hTLV=null,this.isModified=!0,this.hV=\"0\"+e+r},this.setByBooleanArray=function(t){for(var e=\"\",i=0;i<t.length;i++)1==t[i]?e+=\"1\":e+=\"0\";this.setByBinaryString(e)},this.newFalseArray=function(t){for(var e=new Array(t),i=0;i<t;i++)e[i]=!1;return e},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(\"string\"==typeof t&&t.toLowerCase().match(/^[0-9a-f]+$/)?this.setHexValueIncludingUnusedBits(t):void 0!==t.hex?this.setHexValueIncludingUnusedBits(t.hex):void 0!==t.bin?this.setByBinaryString(t.bin):void 0!==t.array&&this.setByBooleanArray(t.array))},YAHOO.lang.extend(KJUR.asn1.DERBitString,KJUR.asn1.ASN1Object),KJUR.asn1.DEROctetString=function(t){if(void 0!==t&&void 0!==t.obj){var e=KJUR.asn1.ASN1Util.newObject(t.obj);t.hex=e.getEncodedHex()}KJUR.asn1.DEROctetString.superclass.constructor.call(this,t),this.hT=\"04\"},YAHOO.lang.extend(KJUR.asn1.DEROctetString,KJUR.asn1.DERAbstractString),KJUR.asn1.DERNull=function(){KJUR.asn1.DERNull.superclass.constructor.call(this),this.hT=\"05\",this.hTLV=\"0500\"},YAHOO.lang.extend(KJUR.asn1.DERNull,KJUR.asn1.ASN1Object),KJUR.asn1.DERObjectIdentifier=function(t){var e=function(t){var e=t.toString(16);return 1==e.length&&(e=\"0\"+e),e},i=function(t){var i=\"\",r=new BigInteger(t,10).toString(2),n=7-r.length%7;7==n&&(n=0);for(var s=\"\",o=0;o<n;o++)s+=\"0\";r=s+r;for(o=0;o<r.length-1;o+=7){var h=r.substr(o,7);o!=r.length-7&&(h=\"1\"+h),i+=e(parseInt(h,2))}return i};KJUR.asn1.DERObjectIdentifier.superclass.constructor.call(this),this.hT=\"06\",this.setValueHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.setValueOidString=function(t){if(!t.match(/^[0-9.]+$/))throw\"malformed oid string: \"+t;var r=\"\",n=t.split(\".\"),s=40*parseInt(n[0])+parseInt(n[1]);r+=e(s),n.splice(0,2);for(var o=0;o<n.length;o++)r+=i(n[o]);this.hTLV=null,this.isModified=!0,this.s=null,this.hV=r},this.setValueName=function(t){var e=KJUR.asn1.x509.OID.name2oid(t);if(\"\"===e)throw\"DERObjectIdentifier oidName undefined: \"+t;this.setValueOidString(e)},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(\"string\"==typeof t?t.match(/^[0-2].[0-9.]+$/)?this.setValueOidString(t):this.setValueName(t):void 0!==t.oid?this.setValueOidString(t.oid):void 0!==t.hex?this.setValueHex(t.hex):void 0!==t.name&&this.setValueName(t.name))},YAHOO.lang.extend(KJUR.asn1.DERObjectIdentifier,KJUR.asn1.ASN1Object),KJUR.asn1.DEREnumerated=function(t){KJUR.asn1.DEREnumerated.superclass.constructor.call(this),this.hT=\"0a\",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new BigInteger(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.int?this.setByInteger(t.int):\"number\"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},YAHOO.lang.extend(KJUR.asn1.DEREnumerated,KJUR.asn1.ASN1Object),KJUR.asn1.DERUTF8String=function(t){KJUR.asn1.DERUTF8String.superclass.constructor.call(this,t),this.hT=\"0c\"},YAHOO.lang.extend(KJUR.asn1.DERUTF8String,KJUR.asn1.DERAbstractString),KJUR.asn1.DERNumericString=function(t){KJUR.asn1.DERNumericString.superclass.constructor.call(this,t),this.hT=\"12\"},YAHOO.lang.extend(KJUR.asn1.DERNumericString,KJUR.asn1.DERAbstractString),KJUR.asn1.DERPrintableString=function(t){KJUR.asn1.DERPrintableString.superclass.constructor.call(this,t),this.hT=\"13\"},YAHOO.lang.extend(KJUR.asn1.DERPrintableString,KJUR.asn1.DERAbstractString),KJUR.asn1.DERTeletexString=function(t){KJUR.asn1.DERTeletexString.superclass.constructor.call(this,t),this.hT=\"14\"},YAHOO.lang.extend(KJUR.asn1.DERTeletexString,KJUR.asn1.DERAbstractString),KJUR.asn1.DERIA5String=function(t){KJUR.asn1.DERIA5String.superclass.constructor.call(this,t),this.hT=\"16\"},YAHOO.lang.extend(KJUR.asn1.DERIA5String,KJUR.asn1.DERAbstractString),KJUR.asn1.DERUTCTime=function(t){KJUR.asn1.DERUTCTime.superclass.constructor.call(this,t),this.hT=\"17\",this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,\"utc\"),this.hV=stohex(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,\"utc\"),this.hV=stohex(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):\"string\"==typeof t&&t.match(/^[0-9]{12}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date))},YAHOO.lang.extend(KJUR.asn1.DERUTCTime,KJUR.asn1.DERAbstractTime),KJUR.asn1.DERGeneralizedTime=function(t){KJUR.asn1.DERGeneralizedTime.superclass.constructor.call(this,t),this.hT=\"18\",this.withMillis=!1,this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,\"gen\",this.withMillis),this.hV=stohex(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,\"gen\",this.withMillis),this.hV=stohex(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):\"string\"==typeof t&&t.match(/^[0-9]{14}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date),!0===t.millis&&(this.withMillis=!0))},YAHOO.lang.extend(KJUR.asn1.DERGeneralizedTime,KJUR.asn1.DERAbstractTime),KJUR.asn1.DERSequence=function(t){KJUR.asn1.DERSequence.superclass.constructor.call(this,t),this.hT=\"30\",this.getFreshValueHex=function(){for(var t=\"\",e=0;e<this.asn1Array.length;e++){t+=this.asn1Array[e].getEncodedHex()}return this.hV=t,this.hV}},YAHOO.lang.extend(KJUR.asn1.DERSequence,KJUR.asn1.DERAbstractStructured),KJUR.asn1.DERSet=function(t){KJUR.asn1.DERSet.superclass.constructor.call(this,t),this.hT=\"31\",this.sortFlag=!0,this.getFreshValueHex=function(){for(var t=new Array,e=0;e<this.asn1Array.length;e++){var i=this.asn1Array[e];t.push(i.getEncodedHex())}return 1==this.sortFlag&&t.sort(),this.hV=t.join(\"\"),this.hV},void 0!==t&&void 0!==t.sortflag&&0==t.sortflag&&(this.sortFlag=!1)},YAHOO.lang.extend(KJUR.asn1.DERSet,KJUR.asn1.DERAbstractStructured),KJUR.asn1.DERTaggedObject=function(t){KJUR.asn1.DERTaggedObject.superclass.constructor.call(this),this.hT=\"a0\",this.hV=\"\",this.isExplicit=!0,this.asn1Object=null,this.setASN1Object=function(t,e,i){this.hT=e,this.isExplicit=t,this.asn1Object=i,this.isExplicit?(this.hV=this.asn1Object.getEncodedHex(),this.hTLV=null,this.isModified=!0):(this.hV=null,this.hTLV=i.getEncodedHex(),this.hTLV=this.hTLV.replace(/^../,e),this.isModified=!1)},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.tag&&(this.hT=t.tag),void 0!==t.explicit&&(this.isExplicit=t.explicit),void 0!==t.obj&&(this.asn1Object=t.obj,this.setASN1Object(this.isExplicit,this.hT,this.asn1Object)))},YAHOO.lang.extend(KJUR.asn1.DERTaggedObject,KJUR.asn1.ASN1Object);var JSEncryptRSAKey=function(t){function e(i){var r=t.call(this)||this;return i&&(\"string\"==typeof i?r.parseKey(i):(e.hasPrivateKeyProperty(i)||e.hasPublicKeyProperty(i))&&r.parsePropertiesFrom(i)),r}return __extends(e,t),e.prototype.parseKey=function(t){try{var e=0,i=0,r=/^\\s*(?:[0-9A-Fa-f][0-9A-Fa-f]\\s*)+$/.test(t)?Hex.decode(t):Base64.unarmor(t),n=ASN1.decode(r);if(3===n.sub.length&&(n=n.sub[2].sub[0]),9===n.sub.length){e=n.sub[1].getHexStringValue(),this.n=parseBigInt(e,16),i=n.sub[2].getHexStringValue(),this.e=parseInt(i,16);var s=n.sub[3].getHexStringValue();this.d=parseBigInt(s,16);var o=n.sub[4].getHexStringValue();this.p=parseBigInt(o,16);var h=n.sub[5].getHexStringValue();this.q=parseBigInt(h,16);var a=n.sub[6].getHexStringValue();this.dmp1=parseBigInt(a,16);var u=n.sub[7].getHexStringValue();this.dmq1=parseBigInt(u,16);var c=n.sub[8].getHexStringValue();this.coeff=parseBigInt(c,16)}else{if(2!==n.sub.length)return!1;var f=n.sub[1].sub[0];e=f.sub[0].getHexStringValue(),this.n=parseBigInt(e,16),i=f.sub[1].getHexStringValue(),this.e=parseInt(i,16)}return!0}catch(t){return!1}},e.prototype.getPrivateBaseKey=function(){var t={array:[new KJUR.asn1.DERInteger({int:0}),new KJUR.asn1.DERInteger({bigint:this.n}),new KJUR.asn1.DERInteger({int:this.e}),new KJUR.asn1.DERInteger({bigint:this.d}),new KJUR.asn1.DERInteger({bigint:this.p}),new KJUR.asn1.DERInteger({bigint:this.q}),new KJUR.asn1.DERInteger({bigint:this.dmp1}),new KJUR.asn1.DERInteger({bigint:this.dmq1}),new KJUR.asn1.DERInteger({bigint:this.coeff})]};return new KJUR.asn1.DERSequence(t).getEncodedHex()},e.prototype.getPrivateBaseKeyB64=function(){return hex2b64(this.getPrivateBaseKey())},e.prototype.getPublicBaseKey=function(){var t=new KJUR.asn1.DERSequence({array:[new KJUR.asn1.DERObjectIdentifier({oid:\"1.2.840.113549.1.1.1\"}),new KJUR.asn1.DERNull]}),e=new KJUR.asn1.DERSequence({array:[new KJUR.asn1.DERInteger({bigint:this.n}),new KJUR.asn1.DERInteger({int:this.e})]}),i=new KJUR.asn1.DERBitString({hex:\"00\"+e.getEncodedHex()});return new KJUR.asn1.DERSequence({array:[t,i]}).getEncodedHex()},e.prototype.getPublicBaseKeyB64=function(){return hex2b64(this.getPublicBaseKey())},e.wordwrap=function(t,e){if(!t)return t;var i=\"(.{1,\"+(e=e||64)+\"})( +|$\\n?)|(.{1,\"+e+\"})\";return t.match(RegExp(i,\"g\")).join(\"\\n\")},e.prototype.getPrivateKey=function(){var t=\"-----BEGIN\"+\" RSA \"+\"PRIVATE KEY-----\\n\";return t+=e.wordwrap(this.getPrivateBaseKeyB64())+\"\\n\",t+=\"-----END \"+\"RSA PRIVATE KEY-----\"},e.prototype.getPublicKey=function(){var t=\"-----BEGIN PUBLIC KEY-----\\n\";return t+=e.wordwrap(this.getPublicBaseKeyB64())+\"\\n\",t+=\"-----END PUBLIC KEY-----\"},e.hasPublicKeyProperty=function(t){return(t=t||{}).hasOwnProperty(\"n\")&&t.hasOwnProperty(\"e\")},e.hasPrivateKeyProperty=function(t){return(t=t||{}).hasOwnProperty(\"n\")&&t.hasOwnProperty(\"e\")&&t.hasOwnProperty(\"d\")&&t.hasOwnProperty(\"p\")&&t.hasOwnProperty(\"q\")&&t.hasOwnProperty(\"dmp1\")&&t.hasOwnProperty(\"dmq1\")&&t.hasOwnProperty(\"coeff\")},e.prototype.parsePropertiesFrom=function(t){this.n=t.n,this.e=t.e,t.hasOwnProperty(\"d\")&&(this.d=t.d,this.p=t.p,this.q=t.q,this.dmp1=t.dmp1,this.dmq1=t.dmq1,this.coeff=t.coeff)},e}(RSAKey);function JSEncrypt(){return this}JSEncrypt.prototype.setKey=function(t){this.log&&this.key&&console.warn(\"A key was already set, overriding existing.\"),this.key=new JSEncryptRSAKey(t)},JSEncrypt.prototype.setPrivateKey=function(t){this.setKey(t)},JSEncrypt.prototype.setPublicKey=function(t){this.setKey(t)},JSEncrypt.prototype.decrypt=function(t){try{return this.getKey().decrypt(b64tohex(t))}catch(t){return!1}},JSEncrypt.prototype.encrypt=function(t){try{return hex2b64(this.getKey().encrypt(t))}catch(t){return!1}},JSEncrypt.prototype.sign=function(t,e,i){try{return hex2b64(this.getKey().sign(t,e,i))}catch(t){return!1}},JSEncrypt.prototype.verify=function(t,e,i){try{return this.getKey().verify(t,b64tohex(e),i)}catch(t){return!1}},JSEncrypt.prototype.getKey=function(t){if(!this.key){if(this.key=new JSEncryptRSAKey,t&&\"[object Function]\"==={}.toString.call(t))return void this.key.generateAsync(this.default_key_size,this.default_public_exponent,t);this.key.generate(this.default_key_size,this.default_public_exponent)}return this.key},JSEncrypt.prototype.getPrivateKey=function(){return this.getKey().getPrivateKey()},JSEncrypt.prototype.getPrivateKeyB64=function(){return this.getKey().getPrivateBaseKeyB64()},JSEncrypt.prototype.getPublicKey=function(){return this.getKey().getPublicKey()},JSEncrypt.prototype.getPublicKeyB64=function(){return this.getKey().getPublicBaseKeyB64()},JSEncrypt.version=\"3.0.0-rc.1\";",
									"",
									"/*",
									"* JWT generation code extracted from",
									"* https://developers.symphony.com/restapi/docs/rsa-bot-authentication-workflow#section-generate-a-signed-jwt",
									"* Modified to use JSEncrypt and CryptoJS to be compatible with Postman",
									"*/",
									"let jse = new JSEncrypt();",
									"let crypto = require('crypto-js');",
									"",
									"function base64urlEncode(str) {",
									"    return new Buffer(str).toString('base64').replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');",
									"}",
									"function Jwt(username, signingKey) {",
									"    this.header = { typ: 'JWT', alg: 'RS512' };",
									"    this.body = {",
									"        sub: username,",
									"        exp: (Math.floor(new Date().getTime() / 1000) + (5 * 60))",
									"    };",
									"    this.signingKey = signingKey;",
									"    return this;",
									"}",
									"Jwt.prototype.sign = function sign(payload, cryptoInput) {",
									"    jse.setPrivateKey(cryptoInput);",
									"    let buffer = jse.sign(payload, crypto.SHA512, \"sha512\");",
									"    return buffer;",
									"};",
									"Jwt.prototype.compact = function compact() {",
									"    let segments = [];",
									"    segments.push(base64urlEncode(JSON.stringify(this.header)));",
									"    segments.push(base64urlEncode(JSON.stringify(this.body)));",
									"    this.signature = this.sign(segments.join('.'), this.signingKey);",
									"    segments.push(this.signature);",
									"    return segments.join('.');",
									"};",
									"const jwt = new Jwt(pm.environment.get(\"botName\"), pm.environment.get(\"botKey\"));",
									"const jws = jwt.compact();",
									"pm.environment.set(\"jwt\", jws);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"token\":\"{{jwt}}\"}"
						},
						"url": {
							"raw": "https://{{sessionAuthUrl}}/login/pubkey/authenticate",
							"protocol": "https",
							"host": [
								"{{sessionAuthUrl}}"
							],
							"path": [
								"login",
								"pubkey",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "RSA KeyMan Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"keyManToken\", pm.response.json().token);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*",
									"* JSEncrypt Library extracted from https://github.com/travist/jsencrypt",
									"* Modified to remove references to window, navigator that will not run in Postman",
									"*/",
									"var BI_RM=\"0123456789abcdefghijklmnopqrstuvwxyz\";function int2char(t){return BI_RM.charAt(t)}function op_and(t,e){return t&e}function op_or(t,e){return t|e}function op_xor(t,e){return t^e}function op_andnot(t,e){return t&~e}function lbit(t){if(0==t)return-1;var e=0;return 0==(65535&t)&&(t>>=16,e+=16),0==(255&t)&&(t>>=8,e+=8),0==(15&t)&&(t>>=4,e+=4),0==(3&t)&&(t>>=2,e+=2),0==(1&t)&&++e,e}function cbit(t){for(var e=0;0!=t;)t&=t-1,++e;return e}var b64map=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",b64pad=\"=\";function hex2b64(t){var e,i,r=\"\";for(e=0;e+3<=t.length;e+=3)i=parseInt(t.substring(e,e+3),16),r+=b64map.charAt(i>>6)+b64map.charAt(63&i);for(e+1==t.length?(i=parseInt(t.substring(e,e+1),16),r+=b64map.charAt(i<<2)):e+2==t.length&&(i=parseInt(t.substring(e,e+2),16),r+=b64map.charAt(i>>2)+b64map.charAt((3&i)<<4));(3&r.length)>0;)r+=b64pad;return r}function b64tohex(t){var e,i=\"\",r=0,n=0;for(e=0;e<t.length&&t.charAt(e)!=b64pad;++e){var s=b64map.indexOf(t.charAt(e));s<0||(0==r?(i+=int2char(s>>2),n=3&s,r=1):1==r?(i+=int2char(n<<2|s>>4),n=15&s,r=2):2==r?(i+=int2char(n),i+=int2char(s>>2),n=3&s,r=3):(i+=int2char(n<<2|s>>4),i+=int2char(15&s),r=0))}return 1==r&&(i+=int2char(n<<2)),i}var decoder,extendStatics=function(t,e){return(extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)};function __extends(t,e){function i(){this.constructor=t}extendStatics(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}var decoder$1,Hex={decode:function(t){var e;if(void 0===decoder){var i=\"0123456789ABCDEF\",r=\" \\f\\n\\r\\t \\u2028\\u2029\";for(decoder={},e=0;e<16;++e)decoder[i.charAt(e)]=e;for(i=i.toLowerCase(),e=10;e<16;++e)decoder[i.charAt(e)]=e;for(e=0;e<r.length;++e)decoder[r.charAt(e)]=-1}var n=[],s=0,o=0;for(e=0;e<t.length;++e){var h=t.charAt(e);if(\"=\"==h)break;if(-1!=(h=decoder[h])){if(void 0===h)throw new Error(\"Illegal character at offset \"+e);s|=h,++o>=2?(n[n.length]=s,s=0,o=0):s<<=4}}if(o)throw new Error(\"Hex encoding incomplete: 4 bits missing\");return n}},Base64={decode:function(t){var e;if(void 0===decoder$1){var i=\"= \\f\\n\\r\\t \\u2028\\u2029\";for(decoder$1=Object.create(null),e=0;e<64;++e)decoder$1[\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".charAt(e)]=e;for(e=0;e<i.length;++e)decoder$1[i.charAt(e)]=-1}var r=[],n=0,s=0;for(e=0;e<t.length;++e){var o=t.charAt(e);if(\"=\"==o)break;if(-1!=(o=decoder$1[o])){if(void 0===o)throw new Error(\"Illegal character at offset \"+e);n|=o,++s>=4?(r[r.length]=n>>16,r[r.length]=n>>8&255,r[r.length]=255&n,n=0,s=0):n<<=6}}switch(s){case 1:throw new Error(\"Base64 encoding incomplete: at least 2 bits missing\");case 2:r[r.length]=n>>10;break;case 3:r[r.length]=n>>16,r[r.length]=n>>8&255}return r},re:/-----BEGIN [^-]+-----([A-Za-z0-9+\\/=\\s]+)-----END [^-]+-----|begin-base64[^\\n]+\\n([A-Za-z0-9+\\/=\\s]+)====/,unarmor:function(t){var e=Base64.re.exec(t);if(e)if(e[1])t=e[1];else{if(!e[2])throw new Error(\"RegExp out of sync\");t=e[2]}return Base64.decode(t)}},max=1e13,Int10=function(){function t(t){this.buf=[+t||0]}return t.prototype.mulAdd=function(t,e){var i,r,n=this.buf,s=n.length;for(i=0;i<s;++i)(r=n[i]*t+e)<max?e=0:r-=(e=0|r/max)*max,n[i]=r;e>0&&(n[i]=e)},t.prototype.sub=function(t){var e,i,r=this.buf,n=r.length;for(e=0;e<n;++e)(i=r[e]-t)<0?(i+=max,t=1):t=0,r[e]=i;for(;0===r[r.length-1];)r.pop()},t.prototype.toString=function(t){if(10!=(t||10))throw new Error(\"only base 10 is supported\");for(var e=this.buf,i=e[e.length-1].toString(),r=e.length-2;r>=0;--r)i+=(max+e[r]).toString().substring(1);return i},t.prototype.valueOf=function(){for(var t=this.buf,e=0,i=t.length-1;i>=0;--i)e=e*max+t[i];return e},t.prototype.simplify=function(){var t=this.buf;return 1==t.length?t[0]:this},t}(),ellipsis=\"…\",reTimeS=/^(\\d\\d)(0[1-9]|1[0-2])(0[1-9]|[12]\\d|3[01])([01]\\d|2[0-3])(?:([0-5]\\d)(?:([0-5]\\d)(?:[.,](\\d{1,3}))?)?)?(Z|[-+](?:[0]\\d|1[0-2])([0-5]\\d)?)?$/,reTimeL=/^(\\d\\d\\d\\d)(0[1-9]|1[0-2])(0[1-9]|[12]\\d|3[01])([01]\\d|2[0-3])(?:([0-5]\\d)(?:([0-5]\\d)(?:[.,](\\d{1,3}))?)?)?(Z|[-+](?:[0]\\d|1[0-2])([0-5]\\d)?)?$/;function stringCut(t,e){return t.length>e&&(t=t.substring(0,e)+ellipsis),t}var dbits,Stream=function(){function t(e,i){this.hexDigits=\"0123456789ABCDEF\",e instanceof t?(this.enc=e.enc,this.pos=e.pos):(this.enc=e,this.pos=i)}return t.prototype.get=function(t){if(void 0===t&&(t=this.pos++),t>=this.enc.length)throw new Error(\"Requesting byte offset \"+t+\" on a stream of length \"+this.enc.length);return\"string\"==typeof this.enc?this.enc.charCodeAt(t):this.enc[t]},t.prototype.hexByte=function(t){return this.hexDigits.charAt(t>>4&15)+this.hexDigits.charAt(15&t)},t.prototype.hexDump=function(t,e,i){for(var r=\"\",n=t;n<e;++n)if(r+=this.hexByte(this.get(n)),!0!==i)switch(15&n){case 7:r+=\"  \";break;case 15:r+=\"\\n\";break;default:r+=\" \"}return r},t.prototype.isASCII=function(t,e){for(var i=t;i<e;++i){var r=this.get(i);if(r<32||r>176)return!1}return!0},t.prototype.parseStringISO=function(t,e){for(var i=\"\",r=t;r<e;++r)i+=String.fromCharCode(this.get(r));return i},t.prototype.parseStringUTF=function(t,e){for(var i=\"\",r=t;r<e;){var n=this.get(r++);i+=n<128?String.fromCharCode(n):n>191&&n<224?String.fromCharCode((31&n)<<6|63&this.get(r++)):String.fromCharCode((15&n)<<12|(63&this.get(r++))<<6|63&this.get(r++))}return i},t.prototype.parseStringBMP=function(t,e){for(var i,r,n=\"\",s=t;s<e;)i=this.get(s++),r=this.get(s++),n+=String.fromCharCode(i<<8|r);return n},t.prototype.parseTime=function(t,e,i){var r=this.parseStringISO(t,e),n=(i?reTimeS:reTimeL).exec(r);return n?(i&&(n[1]=+n[1],n[1]+=+n[1]<70?2e3:1900),r=n[1]+\"-\"+n[2]+\"-\"+n[3]+\" \"+n[4],n[5]&&(r+=\":\"+n[5],n[6]&&(r+=\":\"+n[6],n[7]&&(r+=\".\"+n[7]))),n[8]&&(r+=\" UTC\",\"Z\"!=n[8]&&(r+=n[8],n[9]&&(r+=\":\"+n[9]))),r):\"Unrecognized time: \"+r},t.prototype.parseInteger=function(t,e){for(var i,r=this.get(t),n=r>127,s=n?255:0,o=\"\";r==s&&++t<e;)r=this.get(t);if(0===(i=e-t))return n?-1:0;if(i>4){for(o=r,i<<=3;0==(128&(+o^s));)o=+o<<1,--i;o=\"(\"+i+\" bit)\\n\"}n&&(r-=256);for(var h=new Int10(r),a=t+1;a<e;++a)h.mulAdd(256,this.get(a));return o+h.toString()},t.prototype.parseBitString=function(t,e,i){for(var r=this.get(t),n=\"(\"+((e-t-1<<3)-r)+\" bit)\\n\",s=\"\",o=t+1;o<e;++o){for(var h=this.get(o),a=o==e-1?r:0,u=7;u>=a;--u)s+=h>>u&1?\"1\":\"0\";if(s.length>i)return n+stringCut(s,i)}return n+s},t.prototype.parseOctetString=function(t,e,i){if(this.isASCII(t,e))return stringCut(this.parseStringISO(t,e),i);var r=e-t,n=\"(\"+r+\" byte)\\n\";r>(i/=2)&&(e=t+i);for(var s=t;s<e;++s)n+=this.hexByte(this.get(s));return r>i&&(n+=ellipsis),n},t.prototype.parseOID=function(t,e,i){for(var r=\"\",n=new Int10,s=0,o=t;o<e;++o){var h=this.get(o);if(n.mulAdd(128,127&h),s+=7,!(128&h)){if(\"\"===r)if((n=n.simplify())instanceof Int10)n.sub(80),r=\"2.\"+n.toString();else{var a=n<80?n<40?0:1:2;r=a+\".\"+(n-40*a)}else r+=\".\"+n.toString();if(r.length>i)return stringCut(r,i);n=new Int10,s=0}}return s>0&&(r+=\".incomplete\"),r},t}(),ASN1=function(){function t(t,e,i,r,n){if(!(r instanceof ASN1Tag))throw new Error(\"Invalid tag value.\");this.stream=t,this.header=e,this.length=i,this.tag=r,this.sub=n}return t.prototype.typeName=function(){switch(this.tag.tagClass){case 0:switch(this.tag.tagNumber){case 0:return\"EOC\";case 1:return\"BOOLEAN\";case 2:return\"INTEGER\";case 3:return\"BIT_STRING\";case 4:return\"OCTET_STRING\";case 5:return\"NULL\";case 6:return\"OBJECT_IDENTIFIER\";case 7:return\"ObjectDescriptor\";case 8:return\"EXTERNAL\";case 9:return\"REAL\";case 10:return\"ENUMERATED\";case 11:return\"EMBEDDED_PDV\";case 12:return\"UTF8String\";case 16:return\"SEQUENCE\";case 17:return\"SET\";case 18:return\"NumericString\";case 19:return\"PrintableString\";case 20:return\"TeletexString\";case 21:return\"VideotexString\";case 22:return\"IA5String\";case 23:return\"UTCTime\";case 24:return\"GeneralizedTime\";case 25:return\"GraphicString\";case 26:return\"VisibleString\";case 27:return\"GeneralString\";case 28:return\"UniversalString\";case 30:return\"BMPString\"}return\"Universal_\"+this.tag.tagNumber.toString();case 1:return\"Application_\"+this.tag.tagNumber.toString();case 2:return\"[\"+this.tag.tagNumber.toString()+\"]\";case 3:return\"Private_\"+this.tag.tagNumber.toString()}},t.prototype.content=function(t){if(void 0===this.tag)return null;void 0===t&&(t=1/0);var e=this.posContent(),i=Math.abs(this.length);if(!this.tag.isUniversal())return null!==this.sub?\"(\"+this.sub.length+\" elem)\":this.stream.parseOctetString(e,e+i,t);switch(this.tag.tagNumber){case 1:return 0===this.stream.get(e)?\"false\":\"true\";case 2:return this.stream.parseInteger(e,e+i);case 3:return this.sub?\"(\"+this.sub.length+\" elem)\":this.stream.parseBitString(e,e+i,t);case 4:return this.sub?\"(\"+this.sub.length+\" elem)\":this.stream.parseOctetString(e,e+i,t);case 6:return this.stream.parseOID(e,e+i,t);case 16:case 17:return null!==this.sub?\"(\"+this.sub.length+\" elem)\":\"(no elem)\";case 12:return stringCut(this.stream.parseStringUTF(e,e+i),t);case 18:case 19:case 20:case 21:case 22:case 26:return stringCut(this.stream.parseStringISO(e,e+i),t);case 30:return stringCut(this.stream.parseStringBMP(e,e+i),t);case 23:case 24:return this.stream.parseTime(e,e+i,23==this.tag.tagNumber)}return null},t.prototype.toString=function(){return this.typeName()+\"@\"+this.stream.pos+\"[header:\"+this.header+\",length:\"+this.length+\",sub:\"+(null===this.sub?\"null\":this.sub.length)+\"]\"},t.prototype.toPrettyString=function(t){void 0===t&&(t=\"\");var e=t+this.typeName()+\" @\"+this.stream.pos;if(this.length>=0&&(e+=\"+\"),e+=this.length,this.tag.tagConstructed?e+=\" (constructed)\":!this.tag.isUniversal()||3!=this.tag.tagNumber&&4!=this.tag.tagNumber||null===this.sub||(e+=\" (encapsulates)\"),e+=\"\\n\",null!==this.sub){t+=\"  \";for(var i=0,r=this.sub.length;i<r;++i)e+=this.sub[i].toPrettyString(t)}return e},t.prototype.posStart=function(){return this.stream.pos},t.prototype.posContent=function(){return this.stream.pos+this.header},t.prototype.posEnd=function(){return this.stream.pos+this.header+Math.abs(this.length)},t.prototype.toHexString=function(){return this.stream.hexDump(this.posStart(),this.posEnd(),!0)},t.decodeLength=function(t){var e=t.get(),i=127&e;if(i==e)return i;if(i>6)throw new Error(\"Length over 48 bits not supported at position \"+(t.pos-1));if(0===i)return null;e=0;for(var r=0;r<i;++r)e=256*e+t.get();return e},t.prototype.getHexStringValue=function(){var t=this.toHexString(),e=2*this.header,i=2*this.length;return t.substr(e,i)},t.decode=function(e){var i;i=e instanceof Stream?e:new Stream(e,0);var r=new Stream(i),n=new ASN1Tag(i),s=t.decodeLength(i),o=i.pos,h=o-r.pos,a=null,u=function(){var e=[];if(null!==s){for(var r=o+s;i.pos<r;)e[e.length]=t.decode(i);if(i.pos!=r)throw new Error(\"Content size is not correct for container starting at offset \"+o)}else try{for(;;){var n=t.decode(i);if(n.tag.isEOC())break;e[e.length]=n}s=o-i.pos}catch(t){throw new Error(\"Exception while decoding undefined length content: \"+t)}return e};if(n.tagConstructed)a=u();else if(n.isUniversal()&&(3==n.tagNumber||4==n.tagNumber))try{if(3==n.tagNumber&&0!=i.get())throw new Error(\"BIT STRINGs with unused bits cannot encapsulate.\");a=u();for(var c=0;c<a.length;++c)if(a[c].tag.isEOC())throw new Error(\"EOC is not supposed to be actual content.\")}catch(t){a=null}if(null===a){if(null===s)throw new Error(\"We can't skip over an invalid tag with undefined length at offset \"+o);i.pos=o+Math.abs(s)}return new t(r,h,s,n,a)},t}(),ASN1Tag=function(){function t(t){var e=t.get();if(this.tagClass=e>>6,this.tagConstructed=0!=(32&e),this.tagNumber=31&e,31==this.tagNumber){var i=new Int10;do{e=t.get(),i.mulAdd(128,127&e)}while(128&e);this.tagNumber=i.simplify()}}return t.prototype.isUniversal=function(){return 0===this.tagClass},t.prototype.isEOC=function(){return 0===this.tagClass&&0===this.tagNumber},t}(),canary=0xdeadbeefcafe,j_lm=15715070==(16777215&canary),lowprimes=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],lplim=(1<<26)/lowprimes[lowprimes.length-1],BigInteger=function(){function t(t,e,i){null!=t&&(\"number\"==typeof t?this.fromNumber(t,e,i):null==e&&\"string\"!=typeof t?this.fromString(t,256):this.fromString(t,e))}return t.prototype.toString=function(t){if(this.s<0)return\"-\"+this.negate().toString(t);var e;if(16==t)e=4;else if(8==t)e=3;else if(2==t)e=1;else if(32==t)e=5;else{if(4!=t)return this.toRadix(t);e=2}var i,r=(1<<e)-1,n=!1,s=\"\",o=this.t,h=this.DB-o*this.DB%e;if(o-- >0)for(h<this.DB&&(i=this[o]>>h)>0&&(n=!0,s=int2char(i));o>=0;)h<e?(i=(this[o]&(1<<h)-1)<<e-h,i|=this[--o]>>(h+=this.DB-e)):(i=this[o]>>(h-=e)&r,h<=0&&(h+=this.DB,--o)),i>0&&(n=!0),n&&(s+=int2char(i));return n?s:\"0\"},t.prototype.negate=function(){var e=nbi();return t.ZERO.subTo(this,e),e},t.prototype.abs=function(){return this.s<0?this.negate():this},t.prototype.compareTo=function(t){var e=this.s-t.s;if(0!=e)return e;var i=this.t;if(0!=(e=i-t.t))return this.s<0?-e:e;for(;--i>=0;)if(0!=(e=this[i]-t[i]))return e;return 0},t.prototype.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+nbits(this[this.t-1]^this.s&this.DM)},t.prototype.mod=function(e){var i=nbi();return this.abs().divRemTo(e,null,i),this.s<0&&i.compareTo(t.ZERO)>0&&e.subTo(i,i),i},t.prototype.modPowInt=function(t,e){var i;return i=t<256||e.isEven()?new Classic(e):new Montgomery(e),this.exp(t,i)},t.prototype.clone=function(){var t=nbi();return this.copyTo(t),t},t.prototype.intValue=function(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},t.prototype.byteValue=function(){return 0==this.t?this.s:this[0]<<24>>24},t.prototype.shortValue=function(){return 0==this.t?this.s:this[0]<<16>>16},t.prototype.signum=function(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},t.prototype.toByteArray=function(){var t=this.t,e=[];e[0]=this.s;var i,r=this.DB-t*this.DB%8,n=0;if(t-- >0)for(r<this.DB&&(i=this[t]>>r)!=(this.s&this.DM)>>r&&(e[n++]=i|this.s<<this.DB-r);t>=0;)r<8?(i=(this[t]&(1<<r)-1)<<8-r,i|=this[--t]>>(r+=this.DB-8)):(i=this[t]>>(r-=8)&255,r<=0&&(r+=this.DB,--t)),0!=(128&i)&&(i|=-256),0==n&&(128&this.s)!=(128&i)&&++n,(n>0||i!=this.s)&&(e[n++]=i);return e},t.prototype.equals=function(t){return 0==this.compareTo(t)},t.prototype.min=function(t){return this.compareTo(t)<0?this:t},t.prototype.max=function(t){return this.compareTo(t)>0?this:t},t.prototype.and=function(t){var e=nbi();return this.bitwiseTo(t,op_and,e),e},t.prototype.or=function(t){var e=nbi();return this.bitwiseTo(t,op_or,e),e},t.prototype.xor=function(t){var e=nbi();return this.bitwiseTo(t,op_xor,e),e},t.prototype.andNot=function(t){var e=nbi();return this.bitwiseTo(t,op_andnot,e),e},t.prototype.not=function(){for(var t=nbi(),e=0;e<this.t;++e)t[e]=this.DM&~this[e];return t.t=this.t,t.s=~this.s,t},t.prototype.shiftLeft=function(t){var e=nbi();return t<0?this.rShiftTo(-t,e):this.lShiftTo(t,e),e},t.prototype.shiftRight=function(t){var e=nbi();return t<0?this.lShiftTo(-t,e):this.rShiftTo(t,e),e},t.prototype.getLowestSetBit=function(){for(var t=0;t<this.t;++t)if(0!=this[t])return t*this.DB+lbit(this[t]);return this.s<0?this.t*this.DB:-1},t.prototype.bitCount=function(){for(var t=0,e=this.s&this.DM,i=0;i<this.t;++i)t+=cbit(this[i]^e);return t},t.prototype.testBit=function(t){var e=Math.floor(t/this.DB);return e>=this.t?0!=this.s:0!=(this[e]&1<<t%this.DB)},t.prototype.setBit=function(t){return this.changeBit(t,op_or)},t.prototype.clearBit=function(t){return this.changeBit(t,op_andnot)},t.prototype.flipBit=function(t){return this.changeBit(t,op_xor)},t.prototype.add=function(t){var e=nbi();return this.addTo(t,e),e},t.prototype.subtract=function(t){var e=nbi();return this.subTo(t,e),e},t.prototype.multiply=function(t){var e=nbi();return this.multiplyTo(t,e),e},t.prototype.divide=function(t){var e=nbi();return this.divRemTo(t,e,null),e},t.prototype.remainder=function(t){var e=nbi();return this.divRemTo(t,null,e),e},t.prototype.divideAndRemainder=function(t){var e=nbi(),i=nbi();return this.divRemTo(t,e,i),[e,i]},t.prototype.modPow=function(t,e){var i,r,n=t.bitLength(),s=nbv(1);if(n<=0)return s;i=n<18?1:n<48?3:n<144?4:n<768?5:6,r=n<8?new Classic(e):e.isEven()?new Barrett(e):new Montgomery(e);var o=[],h=3,a=i-1,u=(1<<i)-1;if(o[1]=r.convert(this),i>1){var c=nbi();for(r.sqrTo(o[1],c);h<=u;)o[h]=nbi(),r.mulTo(c,o[h-2],o[h]),h+=2}var f,p,l=t.t-1,g=!0,d=nbi();for(n=nbits(t[l])-1;l>=0;){for(n>=a?f=t[l]>>n-a&u:(f=(t[l]&(1<<n+1)-1)<<a-n,l>0&&(f|=t[l-1]>>this.DB+n-a)),h=i;0==(1&f);)f>>=1,--h;if((n-=h)<0&&(n+=this.DB,--l),g)o[f].copyTo(s),g=!1;else{for(;h>1;)r.sqrTo(s,d),r.sqrTo(d,s),h-=2;h>0?r.sqrTo(s,d):(p=s,s=d,d=p),r.mulTo(d,o[f],s)}for(;l>=0&&0==(t[l]&1<<n);)r.sqrTo(s,d),p=s,s=d,d=p,--n<0&&(n=this.DB-1,--l)}return r.revert(s)},t.prototype.modInverse=function(e){var i=e.isEven();if(this.isEven()&&i||0==e.signum())return t.ZERO;for(var r=e.clone(),n=this.clone(),s=nbv(1),o=nbv(0),h=nbv(0),a=nbv(1);0!=r.signum();){for(;r.isEven();)r.rShiftTo(1,r),i?(s.isEven()&&o.isEven()||(s.addTo(this,s),o.subTo(e,o)),s.rShiftTo(1,s)):o.isEven()||o.subTo(e,o),o.rShiftTo(1,o);for(;n.isEven();)n.rShiftTo(1,n),i?(h.isEven()&&a.isEven()||(h.addTo(this,h),a.subTo(e,a)),h.rShiftTo(1,h)):a.isEven()||a.subTo(e,a),a.rShiftTo(1,a);r.compareTo(n)>=0?(r.subTo(n,r),i&&s.subTo(h,s),o.subTo(a,o)):(n.subTo(r,n),i&&h.subTo(s,h),a.subTo(o,a))}return 0!=n.compareTo(t.ONE)?t.ZERO:a.compareTo(e)>=0?a.subtract(e):a.signum()<0?(a.addTo(e,a),a.signum()<0?a.add(e):a):a},t.prototype.pow=function(t){return this.exp(t,new NullExp)},t.prototype.gcd=function(t){var e=this.s<0?this.negate():this.clone(),i=t.s<0?t.negate():t.clone();if(e.compareTo(i)<0){var r=e;e=i,i=r}var n=e.getLowestSetBit(),s=i.getLowestSetBit();if(s<0)return e;for(n<s&&(s=n),s>0&&(e.rShiftTo(s,e),i.rShiftTo(s,i));e.signum()>0;)(n=e.getLowestSetBit())>0&&e.rShiftTo(n,e),(n=i.getLowestSetBit())>0&&i.rShiftTo(n,i),e.compareTo(i)>=0?(e.subTo(i,e),e.rShiftTo(1,e)):(i.subTo(e,i),i.rShiftTo(1,i));return s>0&&i.lShiftTo(s,i),i},t.prototype.isProbablePrime=function(t){var e,i=this.abs();if(1==i.t&&i[0]<=lowprimes[lowprimes.length-1]){for(e=0;e<lowprimes.length;++e)if(i[0]==lowprimes[e])return!0;return!1}if(i.isEven())return!1;for(e=1;e<lowprimes.length;){for(var r=lowprimes[e],n=e+1;n<lowprimes.length&&r<lplim;)r*=lowprimes[n++];for(r=i.modInt(r);e<n;)if(r%lowprimes[e++]==0)return!1}return i.millerRabin(t)},t.prototype.copyTo=function(t){for(var e=this.t-1;e>=0;--e)t[e]=this[e];t.t=this.t,t.s=this.s},t.prototype.fromInt=function(t){this.t=1,this.s=t<0?-1:0,t>0?this[0]=t:t<-1?this[0]=t+this.DV:this.t=0},t.prototype.fromString=function(e,i){var r;if(16==i)r=4;else if(8==i)r=3;else if(256==i)r=8;else if(2==i)r=1;else if(32==i)r=5;else{if(4!=i)return void this.fromRadix(e,i);r=2}this.t=0,this.s=0;for(var n=e.length,s=!1,o=0;--n>=0;){var h=8==r?255&+e[n]:intAt(e,n);h<0?\"-\"==e.charAt(n)&&(s=!0):(s=!1,0==o?this[this.t++]=h:o+r>this.DB?(this[this.t-1]|=(h&(1<<this.DB-o)-1)<<o,this[this.t++]=h>>this.DB-o):this[this.t-1]|=h<<o,(o+=r)>=this.DB&&(o-=this.DB))}8==r&&0!=(128&+e[0])&&(this.s=-1,o>0&&(this[this.t-1]|=(1<<this.DB-o)-1<<o)),this.clamp(),s&&t.ZERO.subTo(this,this)},t.prototype.clamp=function(){for(var t=this.s&this.DM;this.t>0&&this[this.t-1]==t;)--this.t},t.prototype.dlShiftTo=function(t,e){var i;for(i=this.t-1;i>=0;--i)e[i+t]=this[i];for(i=t-1;i>=0;--i)e[i]=0;e.t=this.t+t,e.s=this.s},t.prototype.drShiftTo=function(t,e){for(var i=t;i<this.t;++i)e[i-t]=this[i];e.t=Math.max(this.t-t,0),e.s=this.s},t.prototype.lShiftTo=function(t,e){for(var i=t%this.DB,r=this.DB-i,n=(1<<r)-1,s=Math.floor(t/this.DB),o=this.s<<i&this.DM,h=this.t-1;h>=0;--h)e[h+s+1]=this[h]>>r|o,o=(this[h]&n)<<i;for(h=s-1;h>=0;--h)e[h]=0;e[s]=o,e.t=this.t+s+1,e.s=this.s,e.clamp()},t.prototype.rShiftTo=function(t,e){e.s=this.s;var i=Math.floor(t/this.DB);if(i>=this.t)e.t=0;else{var r=t%this.DB,n=this.DB-r,s=(1<<r)-1;e[0]=this[i]>>r;for(var o=i+1;o<this.t;++o)e[o-i-1]|=(this[o]&s)<<n,e[o-i]=this[o]>>r;r>0&&(e[this.t-i-1]|=(this.s&s)<<n),e.t=this.t-i,e.clamp()}},t.prototype.subTo=function(t,e){for(var i=0,r=0,n=Math.min(t.t,this.t);i<n;)r+=this[i]-t[i],e[i++]=r&this.DM,r>>=this.DB;if(t.t<this.t){for(r-=t.s;i<this.t;)r+=this[i],e[i++]=r&this.DM,r>>=this.DB;r+=this.s}else{for(r+=this.s;i<t.t;)r-=t[i],e[i++]=r&this.DM,r>>=this.DB;r-=t.s}e.s=r<0?-1:0,r<-1?e[i++]=this.DV+r:r>0&&(e[i++]=r),e.t=i,e.clamp()},t.prototype.multiplyTo=function(e,i){var r=this.abs(),n=e.abs(),s=r.t;for(i.t=s+n.t;--s>=0;)i[s]=0;for(s=0;s<n.t;++s)i[s+r.t]=r.am(0,n[s],i,s,0,r.t);i.s=0,i.clamp(),this.s!=e.s&&t.ZERO.subTo(i,i)},t.prototype.squareTo=function(t){for(var e=this.abs(),i=t.t=2*e.t;--i>=0;)t[i]=0;for(i=0;i<e.t-1;++i){var r=e.am(i,e[i],t,2*i,0,1);(t[i+e.t]+=e.am(i+1,2*e[i],t,2*i+1,r,e.t-i-1))>=e.DV&&(t[i+e.t]-=e.DV,t[i+e.t+1]=1)}t.t>0&&(t[t.t-1]+=e.am(i,e[i],t,2*i,0,1)),t.s=0,t.clamp()},t.prototype.divRemTo=function(e,i,r){var n=e.abs();if(!(n.t<=0)){var s=this.abs();if(s.t<n.t)return null!=i&&i.fromInt(0),void(null!=r&&this.copyTo(r));null==r&&(r=nbi());var o=nbi(),h=this.s,a=e.s,u=this.DB-nbits(n[n.t-1]);u>0?(n.lShiftTo(u,o),s.lShiftTo(u,r)):(n.copyTo(o),s.copyTo(r));var c=o.t,f=o[c-1];if(0!=f){var p=f*(1<<this.F1)+(c>1?o[c-2]>>this.F2:0),l=this.FV/p,g=(1<<this.F1)/p,d=1<<this.F2,m=r.t,v=m-c,y=null==i?nbi():i;for(o.dlShiftTo(v,y),r.compareTo(y)>=0&&(r[r.t++]=1,r.subTo(y,r)),t.ONE.dlShiftTo(c,y),y.subTo(o,o);o.t<c;)o[o.t++]=0;for(;--v>=0;){var b=r[--m]==f?this.DM:Math.floor(r[m]*l+(r[m-1]+d)*g);if((r[m]+=o.am(0,b,r,v,0,c))<b)for(o.dlShiftTo(v,y),r.subTo(y,r);r[m]<--b;)r.subTo(y,r)}null!=i&&(r.drShiftTo(c,i),h!=a&&t.ZERO.subTo(i,i)),r.t=c,r.clamp(),u>0&&r.rShiftTo(u,r),h<0&&t.ZERO.subTo(r,r)}}},t.prototype.invDigit=function(){if(this.t<1)return 0;var t=this[0];if(0==(1&t))return 0;var e=3&t;return(e=(e=(e=(e=e*(2-(15&t)*e)&15)*(2-(255&t)*e)&255)*(2-((65535&t)*e&65535))&65535)*(2-t*e%this.DV)%this.DV)>0?this.DV-e:-e},t.prototype.isEven=function(){return 0==(this.t>0?1&this[0]:this.s)},t.prototype.exp=function(e,i){if(e>4294967295||e<1)return t.ONE;var r=nbi(),n=nbi(),s=i.convert(this),o=nbits(e)-1;for(s.copyTo(r);--o>=0;)if(i.sqrTo(r,n),(e&1<<o)>0)i.mulTo(n,s,r);else{var h=r;r=n,n=h}return i.revert(r)},t.prototype.chunkSize=function(t){return Math.floor(Math.LN2*this.DB/Math.log(t))},t.prototype.toRadix=function(t){if(null==t&&(t=10),0==this.signum()||t<2||t>36)return\"0\";var e=this.chunkSize(t),i=Math.pow(t,e),r=nbv(i),n=nbi(),s=nbi(),o=\"\";for(this.divRemTo(r,n,s);n.signum()>0;)o=(i+s.intValue()).toString(t).substr(1)+o,n.divRemTo(r,n,s);return s.intValue().toString(t)+o},t.prototype.fromRadix=function(e,i){this.fromInt(0),null==i&&(i=10);for(var r=this.chunkSize(i),n=Math.pow(i,r),s=!1,o=0,h=0,a=0;a<e.length;++a){var u=intAt(e,a);u<0?\"-\"==e.charAt(a)&&0==this.signum()&&(s=!0):(h=i*h+u,++o>=r&&(this.dMultiply(n),this.dAddOffset(h,0),o=0,h=0))}o>0&&(this.dMultiply(Math.pow(i,o)),this.dAddOffset(h,0)),s&&t.ZERO.subTo(this,this)},t.prototype.fromNumber=function(e,i,r){if(\"number\"==typeof i)if(e<2)this.fromInt(1);else for(this.fromNumber(e,r),this.testBit(e-1)||this.bitwiseTo(t.ONE.shiftLeft(e-1),op_or,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(i);)this.dAddOffset(2,0),this.bitLength()>e&&this.subTo(t.ONE.shiftLeft(e-1),this);else{var n=[],s=7&e;n.length=1+(e>>3),i.nextBytes(n),s>0?n[0]&=(1<<s)-1:n[0]=0,this.fromString(n,256)}},t.prototype.bitwiseTo=function(t,e,i){var r,n,s=Math.min(t.t,this.t);for(r=0;r<s;++r)i[r]=e(this[r],t[r]);if(t.t<this.t){for(n=t.s&this.DM,r=s;r<this.t;++r)i[r]=e(this[r],n);i.t=this.t}else{for(n=this.s&this.DM,r=s;r<t.t;++r)i[r]=e(n,t[r]);i.t=t.t}i.s=e(this.s,t.s),i.clamp()},t.prototype.changeBit=function(e,i){var r=t.ONE.shiftLeft(e);return this.bitwiseTo(r,i,r),r},t.prototype.addTo=function(t,e){for(var i=0,r=0,n=Math.min(t.t,this.t);i<n;)r+=this[i]+t[i],e[i++]=r&this.DM,r>>=this.DB;if(t.t<this.t){for(r+=t.s;i<this.t;)r+=this[i],e[i++]=r&this.DM,r>>=this.DB;r+=this.s}else{for(r+=this.s;i<t.t;)r+=t[i],e[i++]=r&this.DM,r>>=this.DB;r+=t.s}e.s=r<0?-1:0,r>0?e[i++]=r:r<-1&&(e[i++]=this.DV+r),e.t=i,e.clamp()},t.prototype.dMultiply=function(t){this[this.t]=this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp()},t.prototype.dAddOffset=function(t,e){if(0!=t){for(;this.t<=e;)this[this.t++]=0;for(this[e]+=t;this[e]>=this.DV;)this[e]-=this.DV,++e>=this.t&&(this[this.t++]=0),++this[e]}},t.prototype.multiplyLowerTo=function(t,e,i){var r=Math.min(this.t+t.t,e);for(i.s=0,i.t=r;r>0;)i[--r]=0;for(var n=i.t-this.t;r<n;++r)i[r+this.t]=this.am(0,t[r],i,r,0,this.t);for(n=Math.min(t.t,e);r<n;++r)this.am(0,t[r],i,r,0,e-r);i.clamp()},t.prototype.multiplyUpperTo=function(t,e,i){--e;var r=i.t=this.t+t.t-e;for(i.s=0;--r>=0;)i[r]=0;for(r=Math.max(e-this.t,0);r<t.t;++r)i[this.t+r-e]=this.am(e-r,t[r],i,0,0,this.t+r-e);i.clamp(),i.drShiftTo(1,i)},t.prototype.modInt=function(t){if(t<=0)return 0;var e=this.DV%t,i=this.s<0?t-1:0;if(this.t>0)if(0==e)i=this[0]%t;else for(var r=this.t-1;r>=0;--r)i=(e*i+this[r])%t;return i},t.prototype.millerRabin=function(e){var i=this.subtract(t.ONE),r=i.getLowestSetBit();if(r<=0)return!1;var n=i.shiftRight(r);(e=e+1>>1)>lowprimes.length&&(e=lowprimes.length);for(var s=nbi(),o=0;o<e;++o){s.fromInt(lowprimes[Math.floor(Math.random()*lowprimes.length)]);var h=s.modPow(n,this);if(0!=h.compareTo(t.ONE)&&0!=h.compareTo(i)){for(var a=1;a++<r&&0!=h.compareTo(i);)if(0==(h=h.modPowInt(2,this)).compareTo(t.ONE))return!1;if(0!=h.compareTo(i))return!1}}return!0},t.prototype.square=function(){var t=nbi();return this.squareTo(t),t},t.prototype.gcda=function(t,e){var i=this.s<0?this.negate():this.clone(),r=t.s<0?t.negate():t.clone();if(i.compareTo(r)<0){var n=i;i=r,r=n}var s=i.getLowestSetBit(),o=r.getLowestSetBit();if(o<0)e(i);else{s<o&&(o=s),o>0&&(i.rShiftTo(o,i),r.rShiftTo(o,r));var h=function(){(s=i.getLowestSetBit())>0&&i.rShiftTo(s,i),(s=r.getLowestSetBit())>0&&r.rShiftTo(s,r),i.compareTo(r)>=0?(i.subTo(r,i),i.rShiftTo(1,i)):(r.subTo(i,r),r.rShiftTo(1,r)),i.signum()>0?setTimeout(h,0):(o>0&&r.lShiftTo(o,r),setTimeout(function(){e(r)},0))};setTimeout(h,10)}},t.prototype.fromNumberAsync=function(e,i,r,n){if(\"number\"==typeof i)if(e<2)this.fromInt(1);else{this.fromNumber(e,r),this.testBit(e-1)||this.bitwiseTo(t.ONE.shiftLeft(e-1),op_or,this),this.isEven()&&this.dAddOffset(1,0);var s=this,o=function(){s.dAddOffset(2,0),s.bitLength()>e&&s.subTo(t.ONE.shiftLeft(e-1),s),s.isProbablePrime(i)?setTimeout(function(){n()},0):setTimeout(o,0)};setTimeout(o,0)}else{var h=[],a=7&e;h.length=1+(e>>3),i.nextBytes(h),a>0?h[0]&=(1<<a)-1:h[0]=0,this.fromString(h,256)}},t}(),NullExp=function(){function t(){}return t.prototype.convert=function(t){return t},t.prototype.revert=function(t){return t},t.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i)},t.prototype.sqrTo=function(t,e){t.squareTo(e)},t}(),Classic=function(){function t(t){this.m=t}return t.prototype.convert=function(t){return t.s<0||t.compareTo(this.m)>=0?t.mod(this.m):t},t.prototype.revert=function(t){return t},t.prototype.reduce=function(t){t.divRemTo(this.m,null,t)},t.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i),this.reduce(i)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}(),Montgomery=function(){function t(t){this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t}return t.prototype.convert=function(t){var e=nbi();return t.abs().dlShiftTo(this.m.t,e),e.divRemTo(this.m,null,e),t.s<0&&e.compareTo(BigInteger.ZERO)>0&&this.m.subTo(e,e),e},t.prototype.revert=function(t){var e=nbi();return t.copyTo(e),this.reduce(e),e},t.prototype.reduce=function(t){for(;t.t<=this.mt2;)t[t.t++]=0;for(var e=0;e<this.m.t;++e){var i=32767&t[e],r=i*this.mpl+((i*this.mph+(t[e]>>15)*this.mpl&this.um)<<15)&t.DM;for(t[i=e+this.m.t]+=this.m.am(0,r,t,e,0,this.m.t);t[i]>=t.DV;)t[i]-=t.DV,t[++i]++}t.clamp(),t.drShiftTo(this.m.t,t),t.compareTo(this.m)>=0&&t.subTo(this.m,t)},t.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i),this.reduce(i)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}(),Barrett=function(){function t(t){this.m=t,this.r2=nbi(),this.q3=nbi(),BigInteger.ONE.dlShiftTo(2*t.t,this.r2),this.mu=this.r2.divide(t)}return t.prototype.convert=function(t){if(t.s<0||t.t>2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)<0)return t;var e=nbi();return t.copyTo(e),this.reduce(e),e},t.prototype.revert=function(t){return t},t.prototype.reduce=function(t){for(t.drShiftTo(this.m.t-1,this.r2),t.t>this.m.t+1&&(t.t=this.m.t+1,t.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);t.compareTo(this.r2)<0;)t.dAddOffset(1,this.m.t+1);for(t.subTo(this.r2,t);t.compareTo(this.m)>=0;)t.subTo(this.m,t)},t.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i),this.reduce(i)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}();function nbi(){return new BigInteger(null)}function parseBigInt(t,e){return new BigInteger(t,e)}function am1(t,e,i,r,n,s){for(;--s>=0;){var o=e*this[t++]+i[r]+n;n=Math.floor(o/67108864),i[r++]=67108863&o}return n}function am2(t,e,i,r,n,s){for(var o=32767&e,h=e>>15;--s>=0;){var a=32767&this[t],u=this[t++]>>15,c=h*a+u*o;n=((a=o*a+((32767&c)<<15)+i[r]+(1073741823&n))>>>30)+(c>>>15)+h*u+(n>>>30),i[r++]=1073741823&a}return n}function am3(t,e,i,r,n,s){for(var o=16383&e,h=e>>14;--s>=0;){var a=16383&this[t],u=this[t++]>>14,c=h*a+u*o;n=((a=o*a+((16383&c)<<14)+i[r]+n)>>28)+(c>>14)+h*u,i[r++]=268435455&a}return n}BigInteger.prototype.am=am3,dbits=28,BigInteger.prototype.DB=dbits,BigInteger.prototype.DM=(1<<dbits)-1,BigInteger.prototype.DV=1<<dbits;var BI_FP=52;BigInteger.prototype.FV=Math.pow(2,BI_FP),BigInteger.prototype.F1=BI_FP-dbits,BigInteger.prototype.F2=2*dbits-BI_FP;var rr,vv,BI_RC=[];for(rr=\"0\".charCodeAt(0),vv=0;vv<=9;++vv)BI_RC[rr++]=vv;for(rr=\"a\".charCodeAt(0),vv=10;vv<36;++vv)BI_RC[rr++]=vv;for(rr=\"A\".charCodeAt(0),vv=10;vv<36;++vv)BI_RC[rr++]=vv;function intAt(t,e){var i=BI_RC[t.charCodeAt(e)];return null==i?-1:i}function nbv(t){var e=nbi();return e.fromInt(t),e}function nbits(t){var e,i=1;return 0!=(e=t>>>16)&&(t=e,i+=16),0!=(e=t>>8)&&(t=e,i+=8),0!=(e=t>>4)&&(t=e,i+=4),0!=(e=t>>2)&&(t=e,i+=2),0!=(e=t>>1)&&(t=e,i+=1),i}BigInteger.ZERO=nbv(0),BigInteger.ONE=nbv(1);var Arcfour=function(){function t(){this.i=0,this.j=0,this.S=[]}return t.prototype.init=function(t){var e,i,r;for(e=0;e<256;++e)this.S[e]=e;for(i=0,e=0;e<256;++e)i=i+this.S[e]+t[e%t.length]&255,r=this.S[e],this.S[e]=this.S[i],this.S[i]=r;this.i=0,this.j=0},t.prototype.next=function(){var t;return this.i=this.i+1&255,this.j=this.j+this.S[this.i]&255,t=this.S[this.i],this.S[this.i]=this.S[this.j],this.S[this.j]=t,this.S[t+this.S[this.i]&255]},t}();function prng_newstate(){return new Arcfour}var rng_state,rng_pptr,rng_psize=256,rng_pool=null;if(null==rng_pool){rng_pool=[],rng_pptr=0;var t=void 0}function rng_get_byte(){if(null==rng_state){for(rng_state=prng_newstate();rng_pptr<rng_psize;){var t=Math.floor(65536*Math.random());rng_pool[rng_pptr++]=255&t}for(rng_state.init(rng_pool),rng_pptr=0;rng_pptr<rng_pool.length;++rng_pptr)rng_pool[rng_pptr]=0;rng_pptr=0}return rng_state.next()}var SecureRandom=function(){function t(){}return t.prototype.nextBytes=function(t){for(var e=0;e<t.length;++e)t[e]=rng_get_byte()},t}();function pkcs1pad1(t,e){if(e<t.length+22)return console.error(\"Message too long for RSA\"),null;for(var i=e-t.length-6,r=\"\",n=0;n<i;n+=2)r+=\"ff\";return parseBigInt(\"0001\"+r+\"00\"+t,16)}function pkcs1pad2(t,e){if(e<t.length+11)return console.error(\"Message too long for RSA\"),null;for(var i=[],r=t.length-1;r>=0&&e>0;){var n=t.charCodeAt(r--);n<128?i[--e]=n:n>127&&n<2048?(i[--e]=63&n|128,i[--e]=n>>6|192):(i[--e]=63&n|128,i[--e]=n>>6&63|128,i[--e]=n>>12|224)}i[--e]=0;for(var s=new SecureRandom,o=[];e>2;){for(o[0]=0;0==o[0];)s.nextBytes(o);i[--e]=o[0]}return i[--e]=2,i[--e]=0,new BigInteger(i)}var RSAKey=function(){function t(){this.n=null,this.e=0,this.d=null,this.p=null,this.q=null,this.dmp1=null,this.dmq1=null,this.coeff=null}return t.prototype.doPublic=function(t){return t.modPowInt(this.e,this.n)},t.prototype.doPrivate=function(t){if(null==this.p||null==this.q)return t.modPow(this.d,this.n);for(var e=t.mod(this.p).modPow(this.dmp1,this.p),i=t.mod(this.q).modPow(this.dmq1,this.q);e.compareTo(i)<0;)e=e.add(this.p);return e.subtract(i).multiply(this.coeff).mod(this.p).multiply(this.q).add(i)},t.prototype.setPublic=function(t,e){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=parseBigInt(t,16),this.e=parseInt(e,16)):console.error(\"Invalid RSA public key\")},t.prototype.encrypt=function(t){var e=pkcs1pad2(t,this.n.bitLength()+7>>3);if(null==e)return null;var i=this.doPublic(e);if(null==i)return null;var r=i.toString(16);return 0==(1&r.length)?r:\"0\"+r},t.prototype.setPrivate=function(t,e,i){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=parseBigInt(t,16),this.e=parseInt(e,16),this.d=parseBigInt(i,16)):console.error(\"Invalid RSA private key\")},t.prototype.setPrivateEx=function(t,e,i,r,n,s,o,h){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=parseBigInt(t,16),this.e=parseInt(e,16),this.d=parseBigInt(i,16),this.p=parseBigInt(r,16),this.q=parseBigInt(n,16),this.dmp1=parseBigInt(s,16),this.dmq1=parseBigInt(o,16),this.coeff=parseBigInt(h,16)):console.error(\"Invalid RSA private key\")},t.prototype.generate=function(t,e){var i=new SecureRandom,r=t>>1;this.e=parseInt(e,16);for(var n=new BigInteger(e,16);;){for(;this.p=new BigInteger(t-r,1,i),0!=this.p.subtract(BigInteger.ONE).gcd(n).compareTo(BigInteger.ONE)||!this.p.isProbablePrime(10););for(;this.q=new BigInteger(r,1,i),0!=this.q.subtract(BigInteger.ONE).gcd(n).compareTo(BigInteger.ONE)||!this.q.isProbablePrime(10););if(this.p.compareTo(this.q)<=0){var s=this.p;this.p=this.q,this.q=s}var o=this.p.subtract(BigInteger.ONE),h=this.q.subtract(BigInteger.ONE),a=o.multiply(h);if(0==a.gcd(n).compareTo(BigInteger.ONE)){this.n=this.p.multiply(this.q),this.d=n.modInverse(a),this.dmp1=this.d.mod(o),this.dmq1=this.d.mod(h),this.coeff=this.q.modInverse(this.p);break}}},t.prototype.decrypt=function(t){var e=parseBigInt(t,16),i=this.doPrivate(e);return null==i?null:pkcs1unpad2(i,this.n.bitLength()+7>>3)},t.prototype.generateAsync=function(t,e,i){var r=new SecureRandom,n=t>>1;this.e=parseInt(e,16);var s=new BigInteger(e,16),o=this,h=function(){var e=function(){if(o.p.compareTo(o.q)<=0){var t=o.p;o.p=o.q,o.q=t}var e=o.p.subtract(BigInteger.ONE),r=o.q.subtract(BigInteger.ONE),n=e.multiply(r);0==n.gcd(s).compareTo(BigInteger.ONE)?(o.n=o.p.multiply(o.q),o.d=s.modInverse(n),o.dmp1=o.d.mod(e),o.dmq1=o.d.mod(r),o.coeff=o.q.modInverse(o.p),setTimeout(function(){i()},0)):setTimeout(h,0)},a=function(){o.q=nbi(),o.q.fromNumberAsync(n,1,r,function(){o.q.subtract(BigInteger.ONE).gcda(s,function(t){0==t.compareTo(BigInteger.ONE)&&o.q.isProbablePrime(10)?setTimeout(e,0):setTimeout(a,0)})})},u=function(){o.p=nbi(),o.p.fromNumberAsync(t-n,1,r,function(){o.p.subtract(BigInteger.ONE).gcda(s,function(t){0==t.compareTo(BigInteger.ONE)&&o.p.isProbablePrime(10)?setTimeout(a,0):setTimeout(u,0)})})};setTimeout(u,0)};setTimeout(h,0)},t.prototype.sign=function(t,e,i){var r=pkcs1pad1(getDigestHeader(i)+e(t).toString(),this.n.bitLength()/4);if(null==r)return null;var n=this.doPrivate(r);if(null==n)return null;var s=n.toString(16);return 0==(1&s.length)?s:\"0\"+s},t.prototype.verify=function(t,e,i){var r=parseBigInt(e,16),n=this.doPublic(r);return null==n?null:removeDigestHeader(n.toString(16).replace(/^1f+00/,\"\"))==i(t).toString()},t}();function pkcs1unpad2(t,e){for(var i=t.toByteArray(),r=0;r<i.length&&0==i[r];)++r;if(i.length-r!=e-1||2!=i[r])return null;for(++r;0!=i[r];)if(++r>=i.length)return null;for(var n=\"\";++r<i.length;){var s=255&i[r];s<128?n+=String.fromCharCode(s):s>191&&s<224?(n+=String.fromCharCode((31&s)<<6|63&i[r+1]),++r):(n+=String.fromCharCode((15&s)<<12|(63&i[r+1])<<6|63&i[r+2]),r+=2)}return n}var DIGEST_HEADERS={md2:\"3020300c06082a864886f70d020205000410\",md5:\"3020300c06082a864886f70d020505000410\",sha1:\"3021300906052b0e03021a05000414\",sha224:\"302d300d06096086480165030402040500041c\",sha256:\"3031300d060960864801650304020105000420\",sha384:\"3041300d060960864801650304020205000430\",sha512:\"3051300d060960864801650304020305000440\",ripemd160:\"3021300906052b2403020105000414\"};function getDigestHeader(t){return DIGEST_HEADERS[t]||\"\"}function removeDigestHeader(t){for(var e in DIGEST_HEADERS)if(DIGEST_HEADERS.hasOwnProperty(e)){var i=DIGEST_HEADERS[e],r=i.length;if(t.substr(0,r)==i)return t.substr(r)}return t}var YAHOO={};YAHOO.lang={extend:function(t,e,i){if(!e||!t)throw new Error(\"YAHOO.lang.extend failed, please check that all dependencies are included.\");var r,n=function(){};if(n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t,t.superclass=e.prototype,e.prototype.constructor==Object.prototype.constructor&&(e.prototype.constructor=e),i)for(r in i)t.prototype[r]=i[r]}};var KJUR={};void 0!==KJUR.asn1&&KJUR.asn1||(KJUR.asn1={}),KJUR.asn1.ASN1Util=new function(){this.integerToByteHex=function(t){var e=t.toString(16);return e.length%2==1&&(e=\"0\"+e),e},this.bigIntToMinTwosComplementsHex=function(t){var e=t.toString(16);if(\"-\"!=e.substr(0,1))e.length%2==1?e=\"0\"+e:e.match(/^[0-7]/)||(e=\"00\"+e);else{var i=e.substr(1).length;i%2==1?i+=1:e.match(/^[0-7]/)||(i+=2);for(var r=\"\",n=0;n<i;n++)r+=\"f\";e=new BigInteger(r,16).xor(t).add(BigInteger.ONE).toString(16).replace(/^-/,\"\")}return e},this.getPEMStringFromHex=function(t,e){return hextopem(t,e)},this.newObject=function(t){var e=KJUR.asn1,i=e.DERBoolean,r=e.DERInteger,n=e.DERBitString,s=e.DEROctetString,o=e.DERNull,h=e.DERObjectIdentifier,a=e.DEREnumerated,u=e.DERUTF8String,c=e.DERNumericString,f=e.DERPrintableString,p=e.DERTeletexString,l=e.DERIA5String,g=e.DERUTCTime,d=e.DERGeneralizedTime,m=e.DERSequence,v=e.DERSet,y=e.DERTaggedObject,b=e.ASN1Util.newObject,S=Object.keys(t);if(1!=S.length)throw\"key of param shall be only one.\";var T=S[0];if(-1==\":bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:seq:set:tag:\".indexOf(\":\"+T+\":\"))throw\"undefined key: \"+T;if(\"bool\"==T)return new i(t[T]);if(\"int\"==T)return new r(t[T]);if(\"bitstr\"==T)return new n(t[T]);if(\"octstr\"==T)return new s(t[T]);if(\"null\"==T)return new o(t[T]);if(\"oid\"==T)return new h(t[T]);if(\"enum\"==T)return new a(t[T]);if(\"utf8str\"==T)return new u(t[T]);if(\"numstr\"==T)return new c(t[T]);if(\"prnstr\"==T)return new f(t[T]);if(\"telstr\"==T)return new p(t[T]);if(\"ia5str\"==T)return new l(t[T]);if(\"utctime\"==T)return new g(t[T]);if(\"gentime\"==T)return new d(t[T]);if(\"seq\"==T){for(var R=t[T],E=[],D=0;D<R.length;D++){var B=b(R[D]);E.push(B)}return new m({array:E})}if(\"set\"==T){for(R=t[T],E=[],D=0;D<R.length;D++){B=b(R[D]);E.push(B)}return new v({array:E})}if(\"tag\"==T){var w=t[T];if(\"[object Array]\"===Object.prototype.toString.call(w)&&3==w.length){var I=b(w[2]);return new y({tag:w[0],explicit:w[1],obj:I})}var x={};if(void 0!==w.explicit&&(x.explicit=w.explicit),void 0!==w.tag&&(x.tag=w.tag),void 0===w.obj)throw\"obj shall be specified for 'tag'.\";return x.obj=b(w.obj),new y(x)}},this.jsonToASN1HEX=function(t){return this.newObject(t).getEncodedHex()}},KJUR.asn1.ASN1Util.oidHexToInt=function(t){for(var e=\"\",i=parseInt(t.substr(0,2),16),r=(e=Math.floor(i/40)+\".\"+i%40,\"\"),n=2;n<t.length;n+=2){var s=(\"00000000\"+parseInt(t.substr(n,2),16).toString(2)).slice(-8);if(r+=s.substr(1,7),\"0\"==s.substr(0,1))e=e+\".\"+new BigInteger(r,2).toString(10),r=\"\"}return e},KJUR.asn1.ASN1Util.oidIntToHex=function(t){var e=function(t){var e=t.toString(16);return 1==e.length&&(e=\"0\"+e),e},i=function(t){var i=\"\",r=new BigInteger(t,10).toString(2),n=7-r.length%7;7==n&&(n=0);for(var s=\"\",o=0;o<n;o++)s+=\"0\";r=s+r;for(o=0;o<r.length-1;o+=7){var h=r.substr(o,7);o!=r.length-7&&(h=\"1\"+h),i+=e(parseInt(h,2))}return i};if(!t.match(/^[0-9.]+$/))throw\"malformed oid string: \"+t;var r=\"\",n=t.split(\".\"),s=40*parseInt(n[0])+parseInt(n[1]);r+=e(s),n.splice(0,2);for(var o=0;o<n.length;o++)r+=i(n[o]);return r},KJUR.asn1.ASN1Object=function(){this.getLengthHexFromValue=function(){if(void 0===this.hV||null==this.hV)throw\"this.hV is null or undefined.\";if(this.hV.length%2==1)throw\"value hex must be even length: n=\"+\"\".length+\",v=\"+this.hV;var t=this.hV.length/2,e=t.toString(16);if(e.length%2==1&&(e=\"0\"+e),t<128)return e;var i=e.length/2;if(i>15)throw\"ASN.1 length too long to represent by 8x: n = \"+t.toString(16);return(128+i).toString(16)+e},this.getEncodedHex=function(){return(null==this.hTLV||this.isModified)&&(this.hV=this.getFreshValueHex(),this.hL=this.getLengthHexFromValue(),this.hTLV=this.hT+this.hL+this.hV,this.isModified=!1),this.hTLV},this.getValueHex=function(){return this.getEncodedHex(),this.hV},this.getFreshValueHex=function(){return\"\"}},KJUR.asn1.DERAbstractString=function(t){KJUR.asn1.DERAbstractString.superclass.constructor.call(this),this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=stohex(this.s)},this.setStringHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(\"string\"==typeof t?this.setString(t):void 0!==t.str?this.setString(t.str):void 0!==t.hex&&this.setStringHex(t.hex))},YAHOO.lang.extend(KJUR.asn1.DERAbstractString,KJUR.asn1.ASN1Object),KJUR.asn1.DERAbstractTime=function(t){KJUR.asn1.DERAbstractTime.superclass.constructor.call(this),this.localDateToUTC=function(t){return utc=t.getTime()+6e4*t.getTimezoneOffset(),new Date(utc)},this.formatDate=function(t,e,i){var r=this.zeroPadding,n=this.localDateToUTC(t),s=String(n.getFullYear());\"utc\"==e&&(s=s.substr(2,2));var o=s+r(String(n.getMonth()+1),2)+r(String(n.getDate()),2)+r(String(n.getHours()),2)+r(String(n.getMinutes()),2)+r(String(n.getSeconds()),2);if(!0===i){var h=n.getMilliseconds();if(0!=h){var a=r(String(h),3);o=o+\".\"+(a=a.replace(/[0]+$/,\"\"))}}return o+\"Z\"},this.zeroPadding=function(t,e){return t.length>=e?t:new Array(e-t.length+1).join(\"0\")+t},this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=stohex(t)},this.setByDateValue=function(t,e,i,r,n,s){var o=new Date(Date.UTC(t,e-1,i,r,n,s,0));this.setByDate(o)},this.getFreshValueHex=function(){return this.hV}},YAHOO.lang.extend(KJUR.asn1.DERAbstractTime,KJUR.asn1.ASN1Object),KJUR.asn1.DERAbstractStructured=function(t){KJUR.asn1.DERAbstractString.superclass.constructor.call(this),this.setByASN1ObjectArray=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array=t},this.appendASN1Object=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array.push(t)},this.asn1Array=new Array,void 0!==t&&void 0!==t.array&&(this.asn1Array=t.array)},YAHOO.lang.extend(KJUR.asn1.DERAbstractStructured,KJUR.asn1.ASN1Object),KJUR.asn1.DERBoolean=function(){KJUR.asn1.DERBoolean.superclass.constructor.call(this),this.hT=\"01\",this.hTLV=\"0101ff\"},YAHOO.lang.extend(KJUR.asn1.DERBoolean,KJUR.asn1.ASN1Object),KJUR.asn1.DERInteger=function(t){KJUR.asn1.DERInteger.superclass.constructor.call(this),this.hT=\"02\",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new BigInteger(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.bigint?this.setByBigInteger(t.bigint):void 0!==t.int?this.setByInteger(t.int):\"number\"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},YAHOO.lang.extend(KJUR.asn1.DERInteger,KJUR.asn1.ASN1Object),KJUR.asn1.DERBitString=function(t){if(void 0!==t&&void 0!==t.obj){var e=KJUR.asn1.ASN1Util.newObject(t.obj);t.hex=\"00\"+e.getEncodedHex()}KJUR.asn1.DERBitString.superclass.constructor.call(this),this.hT=\"03\",this.setHexValueIncludingUnusedBits=function(t){this.hTLV=null,this.isModified=!0,this.hV=t},this.setUnusedBitsAndHexValue=function(t,e){if(t<0||7<t)throw\"unused bits shall be from 0 to 7: u = \"+t;var i=\"0\"+t;this.hTLV=null,this.isModified=!0,this.hV=i+e},this.setByBinaryString=function(t){var e=8-(t=t.replace(/0+$/,\"\")).length%8;8==e&&(e=0);for(var i=0;i<=e;i++)t+=\"0\";var r=\"\";for(i=0;i<t.length-1;i+=8){var n=t.substr(i,8),s=parseInt(n,2).toString(16);1==s.length&&(s=\"0\"+s),r+=s}this.hTLV=null,this.isModified=!0,this.hV=\"0\"+e+r},this.setByBooleanArray=function(t){for(var e=\"\",i=0;i<t.length;i++)1==t[i]?e+=\"1\":e+=\"0\";this.setByBinaryString(e)},this.newFalseArray=function(t){for(var e=new Array(t),i=0;i<t;i++)e[i]=!1;return e},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(\"string\"==typeof t&&t.toLowerCase().match(/^[0-9a-f]+$/)?this.setHexValueIncludingUnusedBits(t):void 0!==t.hex?this.setHexValueIncludingUnusedBits(t.hex):void 0!==t.bin?this.setByBinaryString(t.bin):void 0!==t.array&&this.setByBooleanArray(t.array))},YAHOO.lang.extend(KJUR.asn1.DERBitString,KJUR.asn1.ASN1Object),KJUR.asn1.DEROctetString=function(t){if(void 0!==t&&void 0!==t.obj){var e=KJUR.asn1.ASN1Util.newObject(t.obj);t.hex=e.getEncodedHex()}KJUR.asn1.DEROctetString.superclass.constructor.call(this,t),this.hT=\"04\"},YAHOO.lang.extend(KJUR.asn1.DEROctetString,KJUR.asn1.DERAbstractString),KJUR.asn1.DERNull=function(){KJUR.asn1.DERNull.superclass.constructor.call(this),this.hT=\"05\",this.hTLV=\"0500\"},YAHOO.lang.extend(KJUR.asn1.DERNull,KJUR.asn1.ASN1Object),KJUR.asn1.DERObjectIdentifier=function(t){var e=function(t){var e=t.toString(16);return 1==e.length&&(e=\"0\"+e),e},i=function(t){var i=\"\",r=new BigInteger(t,10).toString(2),n=7-r.length%7;7==n&&(n=0);for(var s=\"\",o=0;o<n;o++)s+=\"0\";r=s+r;for(o=0;o<r.length-1;o+=7){var h=r.substr(o,7);o!=r.length-7&&(h=\"1\"+h),i+=e(parseInt(h,2))}return i};KJUR.asn1.DERObjectIdentifier.superclass.constructor.call(this),this.hT=\"06\",this.setValueHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.setValueOidString=function(t){if(!t.match(/^[0-9.]+$/))throw\"malformed oid string: \"+t;var r=\"\",n=t.split(\".\"),s=40*parseInt(n[0])+parseInt(n[1]);r+=e(s),n.splice(0,2);for(var o=0;o<n.length;o++)r+=i(n[o]);this.hTLV=null,this.isModified=!0,this.s=null,this.hV=r},this.setValueName=function(t){var e=KJUR.asn1.x509.OID.name2oid(t);if(\"\"===e)throw\"DERObjectIdentifier oidName undefined: \"+t;this.setValueOidString(e)},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(\"string\"==typeof t?t.match(/^[0-2].[0-9.]+$/)?this.setValueOidString(t):this.setValueName(t):void 0!==t.oid?this.setValueOidString(t.oid):void 0!==t.hex?this.setValueHex(t.hex):void 0!==t.name&&this.setValueName(t.name))},YAHOO.lang.extend(KJUR.asn1.DERObjectIdentifier,KJUR.asn1.ASN1Object),KJUR.asn1.DEREnumerated=function(t){KJUR.asn1.DEREnumerated.superclass.constructor.call(this),this.hT=\"0a\",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new BigInteger(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.int?this.setByInteger(t.int):\"number\"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},YAHOO.lang.extend(KJUR.asn1.DEREnumerated,KJUR.asn1.ASN1Object),KJUR.asn1.DERUTF8String=function(t){KJUR.asn1.DERUTF8String.superclass.constructor.call(this,t),this.hT=\"0c\"},YAHOO.lang.extend(KJUR.asn1.DERUTF8String,KJUR.asn1.DERAbstractString),KJUR.asn1.DERNumericString=function(t){KJUR.asn1.DERNumericString.superclass.constructor.call(this,t),this.hT=\"12\"},YAHOO.lang.extend(KJUR.asn1.DERNumericString,KJUR.asn1.DERAbstractString),KJUR.asn1.DERPrintableString=function(t){KJUR.asn1.DERPrintableString.superclass.constructor.call(this,t),this.hT=\"13\"},YAHOO.lang.extend(KJUR.asn1.DERPrintableString,KJUR.asn1.DERAbstractString),KJUR.asn1.DERTeletexString=function(t){KJUR.asn1.DERTeletexString.superclass.constructor.call(this,t),this.hT=\"14\"},YAHOO.lang.extend(KJUR.asn1.DERTeletexString,KJUR.asn1.DERAbstractString),KJUR.asn1.DERIA5String=function(t){KJUR.asn1.DERIA5String.superclass.constructor.call(this,t),this.hT=\"16\"},YAHOO.lang.extend(KJUR.asn1.DERIA5String,KJUR.asn1.DERAbstractString),KJUR.asn1.DERUTCTime=function(t){KJUR.asn1.DERUTCTime.superclass.constructor.call(this,t),this.hT=\"17\",this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,\"utc\"),this.hV=stohex(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,\"utc\"),this.hV=stohex(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):\"string\"==typeof t&&t.match(/^[0-9]{12}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date))},YAHOO.lang.extend(KJUR.asn1.DERUTCTime,KJUR.asn1.DERAbstractTime),KJUR.asn1.DERGeneralizedTime=function(t){KJUR.asn1.DERGeneralizedTime.superclass.constructor.call(this,t),this.hT=\"18\",this.withMillis=!1,this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,\"gen\",this.withMillis),this.hV=stohex(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,\"gen\",this.withMillis),this.hV=stohex(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):\"string\"==typeof t&&t.match(/^[0-9]{14}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date),!0===t.millis&&(this.withMillis=!0))},YAHOO.lang.extend(KJUR.asn1.DERGeneralizedTime,KJUR.asn1.DERAbstractTime),KJUR.asn1.DERSequence=function(t){KJUR.asn1.DERSequence.superclass.constructor.call(this,t),this.hT=\"30\",this.getFreshValueHex=function(){for(var t=\"\",e=0;e<this.asn1Array.length;e++){t+=this.asn1Array[e].getEncodedHex()}return this.hV=t,this.hV}},YAHOO.lang.extend(KJUR.asn1.DERSequence,KJUR.asn1.DERAbstractStructured),KJUR.asn1.DERSet=function(t){KJUR.asn1.DERSet.superclass.constructor.call(this,t),this.hT=\"31\",this.sortFlag=!0,this.getFreshValueHex=function(){for(var t=new Array,e=0;e<this.asn1Array.length;e++){var i=this.asn1Array[e];t.push(i.getEncodedHex())}return 1==this.sortFlag&&t.sort(),this.hV=t.join(\"\"),this.hV},void 0!==t&&void 0!==t.sortflag&&0==t.sortflag&&(this.sortFlag=!1)},YAHOO.lang.extend(KJUR.asn1.DERSet,KJUR.asn1.DERAbstractStructured),KJUR.asn1.DERTaggedObject=function(t){KJUR.asn1.DERTaggedObject.superclass.constructor.call(this),this.hT=\"a0\",this.hV=\"\",this.isExplicit=!0,this.asn1Object=null,this.setASN1Object=function(t,e,i){this.hT=e,this.isExplicit=t,this.asn1Object=i,this.isExplicit?(this.hV=this.asn1Object.getEncodedHex(),this.hTLV=null,this.isModified=!0):(this.hV=null,this.hTLV=i.getEncodedHex(),this.hTLV=this.hTLV.replace(/^../,e),this.isModified=!1)},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.tag&&(this.hT=t.tag),void 0!==t.explicit&&(this.isExplicit=t.explicit),void 0!==t.obj&&(this.asn1Object=t.obj,this.setASN1Object(this.isExplicit,this.hT,this.asn1Object)))},YAHOO.lang.extend(KJUR.asn1.DERTaggedObject,KJUR.asn1.ASN1Object);var JSEncryptRSAKey=function(t){function e(i){var r=t.call(this)||this;return i&&(\"string\"==typeof i?r.parseKey(i):(e.hasPrivateKeyProperty(i)||e.hasPublicKeyProperty(i))&&r.parsePropertiesFrom(i)),r}return __extends(e,t),e.prototype.parseKey=function(t){try{var e=0,i=0,r=/^\\s*(?:[0-9A-Fa-f][0-9A-Fa-f]\\s*)+$/.test(t)?Hex.decode(t):Base64.unarmor(t),n=ASN1.decode(r);if(3===n.sub.length&&(n=n.sub[2].sub[0]),9===n.sub.length){e=n.sub[1].getHexStringValue(),this.n=parseBigInt(e,16),i=n.sub[2].getHexStringValue(),this.e=parseInt(i,16);var s=n.sub[3].getHexStringValue();this.d=parseBigInt(s,16);var o=n.sub[4].getHexStringValue();this.p=parseBigInt(o,16);var h=n.sub[5].getHexStringValue();this.q=parseBigInt(h,16);var a=n.sub[6].getHexStringValue();this.dmp1=parseBigInt(a,16);var u=n.sub[7].getHexStringValue();this.dmq1=parseBigInt(u,16);var c=n.sub[8].getHexStringValue();this.coeff=parseBigInt(c,16)}else{if(2!==n.sub.length)return!1;var f=n.sub[1].sub[0];e=f.sub[0].getHexStringValue(),this.n=parseBigInt(e,16),i=f.sub[1].getHexStringValue(),this.e=parseInt(i,16)}return!0}catch(t){return!1}},e.prototype.getPrivateBaseKey=function(){var t={array:[new KJUR.asn1.DERInteger({int:0}),new KJUR.asn1.DERInteger({bigint:this.n}),new KJUR.asn1.DERInteger({int:this.e}),new KJUR.asn1.DERInteger({bigint:this.d}),new KJUR.asn1.DERInteger({bigint:this.p}),new KJUR.asn1.DERInteger({bigint:this.q}),new KJUR.asn1.DERInteger({bigint:this.dmp1}),new KJUR.asn1.DERInteger({bigint:this.dmq1}),new KJUR.asn1.DERInteger({bigint:this.coeff})]};return new KJUR.asn1.DERSequence(t).getEncodedHex()},e.prototype.getPrivateBaseKeyB64=function(){return hex2b64(this.getPrivateBaseKey())},e.prototype.getPublicBaseKey=function(){var t=new KJUR.asn1.DERSequence({array:[new KJUR.asn1.DERObjectIdentifier({oid:\"1.2.840.113549.1.1.1\"}),new KJUR.asn1.DERNull]}),e=new KJUR.asn1.DERSequence({array:[new KJUR.asn1.DERInteger({bigint:this.n}),new KJUR.asn1.DERInteger({int:this.e})]}),i=new KJUR.asn1.DERBitString({hex:\"00\"+e.getEncodedHex()});return new KJUR.asn1.DERSequence({array:[t,i]}).getEncodedHex()},e.prototype.getPublicBaseKeyB64=function(){return hex2b64(this.getPublicBaseKey())},e.wordwrap=function(t,e){if(!t)return t;var i=\"(.{1,\"+(e=e||64)+\"})( +|$\\n?)|(.{1,\"+e+\"})\";return t.match(RegExp(i,\"g\")).join(\"\\n\")},e.prototype.getPrivateKey=function(){var t=\"-----BEGIN\"+\" RSA \"+\"PRIVATE KEY-----\\n\";return t+=e.wordwrap(this.getPrivateBaseKeyB64())+\"\\n\",t+=\"-----END \"+\"RSA PRIVATE KEY-----\"},e.prototype.getPublicKey=function(){var t=\"-----BEGIN PUBLIC KEY-----\\n\";return t+=e.wordwrap(this.getPublicBaseKeyB64())+\"\\n\",t+=\"-----END PUBLIC KEY-----\"},e.hasPublicKeyProperty=function(t){return(t=t||{}).hasOwnProperty(\"n\")&&t.hasOwnProperty(\"e\")},e.hasPrivateKeyProperty=function(t){return(t=t||{}).hasOwnProperty(\"n\")&&t.hasOwnProperty(\"e\")&&t.hasOwnProperty(\"d\")&&t.hasOwnProperty(\"p\")&&t.hasOwnProperty(\"q\")&&t.hasOwnProperty(\"dmp1\")&&t.hasOwnProperty(\"dmq1\")&&t.hasOwnProperty(\"coeff\")},e.prototype.parsePropertiesFrom=function(t){this.n=t.n,this.e=t.e,t.hasOwnProperty(\"d\")&&(this.d=t.d,this.p=t.p,this.q=t.q,this.dmp1=t.dmp1,this.dmq1=t.dmq1,this.coeff=t.coeff)},e}(RSAKey);function JSEncrypt(){return this}JSEncrypt.prototype.setKey=function(t){this.log&&this.key&&console.warn(\"A key was already set, overriding existing.\"),this.key=new JSEncryptRSAKey(t)},JSEncrypt.prototype.setPrivateKey=function(t){this.setKey(t)},JSEncrypt.prototype.setPublicKey=function(t){this.setKey(t)},JSEncrypt.prototype.decrypt=function(t){try{return this.getKey().decrypt(b64tohex(t))}catch(t){return!1}},JSEncrypt.prototype.encrypt=function(t){try{return hex2b64(this.getKey().encrypt(t))}catch(t){return!1}},JSEncrypt.prototype.sign=function(t,e,i){try{return hex2b64(this.getKey().sign(t,e,i))}catch(t){return!1}},JSEncrypt.prototype.verify=function(t,e,i){try{return this.getKey().verify(t,b64tohex(e),i)}catch(t){return!1}},JSEncrypt.prototype.getKey=function(t){if(!this.key){if(this.key=new JSEncryptRSAKey,t&&\"[object Function]\"==={}.toString.call(t))return void this.key.generateAsync(this.default_key_size,this.default_public_exponent,t);this.key.generate(this.default_key_size,this.default_public_exponent)}return this.key},JSEncrypt.prototype.getPrivateKey=function(){return this.getKey().getPrivateKey()},JSEncrypt.prototype.getPrivateKeyB64=function(){return this.getKey().getPrivateBaseKeyB64()},JSEncrypt.prototype.getPublicKey=function(){return this.getKey().getPublicKey()},JSEncrypt.prototype.getPublicKeyB64=function(){return this.getKey().getPublicBaseKeyB64()},JSEncrypt.version=\"3.0.0-rc.1\";",
									"",
									"/*",
									"* JWT generation code extracted from",
									"* https://developers.symphony.com/restapi/docs/rsa-bot-authentication-workflow#section-generate-a-signed-jwt",
									"* Modified to use JSEncrypt and CryptoJS to be compatible with Postman",
									"*/",
									"let jse = new JSEncrypt();",
									"let crypto = require('crypto-js');",
									"",
									"function base64urlEncode(str) {",
									"    return new Buffer(str).toString('base64').replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');",
									"}",
									"function Jwt(username, signingKey) {",
									"    this.header = { typ: 'JWT', alg: 'RS512' };",
									"    this.body = {",
									"        sub: username,",
									"        exp: (Math.floor(new Date().getTime() / 1000) + (5 * 60))",
									"    };",
									"    this.signingKey = signingKey;",
									"    return this;",
									"}",
									"Jwt.prototype.sign = function sign(payload, cryptoInput) {",
									"    jse.setPrivateKey(cryptoInput);",
									"    let buffer = jse.sign(payload, crypto.SHA512, \"sha512\");",
									"    return buffer;",
									"};",
									"Jwt.prototype.compact = function compact() {",
									"    let segments = [];",
									"    segments.push(base64urlEncode(JSON.stringify(this.header)));",
									"    segments.push(base64urlEncode(JSON.stringify(this.body)));",
									"    this.signature = this.sign(segments.join('.'), this.signingKey);",
									"    segments.push(this.signature);",
									"    return segments.join('.');",
									"};",
									"const jwt = new Jwt(pm.environment.get(\"botName\"), pm.environment.get(\"botKey\"));",
									"const jws = jwt.compact();",
									"pm.environment.set(\"jwt\", jws);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"token\":\"{{jwt}}\"}"
						},
						"url": {
							"raw": "https://{{keyManAuthUrl}}/relay/pubkey/authenticate",
							"protocol": "https",
							"host": [
								"{{keyManAuthUrl}}"
							],
							"path": [
								"relay",
								"pubkey",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "RSA App Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"appToken\", pm.response.json().token);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*",
									"* JSEncrypt Library extracted from https://github.com/travist/jsencrypt",
									"* Modified to remove references to window, navigator that will not run in Postman",
									"*/",
									"var BI_RM=\"0123456789abcdefghijklmnopqrstuvwxyz\";function int2char(t){return BI_RM.charAt(t)}function op_and(t,e){return t&e}function op_or(t,e){return t|e}function op_xor(t,e){return t^e}function op_andnot(t,e){return t&~e}function lbit(t){if(0==t)return-1;var e=0;return 0==(65535&t)&&(t>>=16,e+=16),0==(255&t)&&(t>>=8,e+=8),0==(15&t)&&(t>>=4,e+=4),0==(3&t)&&(t>>=2,e+=2),0==(1&t)&&++e,e}function cbit(t){for(var e=0;0!=t;)t&=t-1,++e;return e}var b64map=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",b64pad=\"=\";function hex2b64(t){var e,i,r=\"\";for(e=0;e+3<=t.length;e+=3)i=parseInt(t.substring(e,e+3),16),r+=b64map.charAt(i>>6)+b64map.charAt(63&i);for(e+1==t.length?(i=parseInt(t.substring(e,e+1),16),r+=b64map.charAt(i<<2)):e+2==t.length&&(i=parseInt(t.substring(e,e+2),16),r+=b64map.charAt(i>>2)+b64map.charAt((3&i)<<4));(3&r.length)>0;)r+=b64pad;return r}function b64tohex(t){var e,i=\"\",r=0,n=0;for(e=0;e<t.length&&t.charAt(e)!=b64pad;++e){var s=b64map.indexOf(t.charAt(e));s<0||(0==r?(i+=int2char(s>>2),n=3&s,r=1):1==r?(i+=int2char(n<<2|s>>4),n=15&s,r=2):2==r?(i+=int2char(n),i+=int2char(s>>2),n=3&s,r=3):(i+=int2char(n<<2|s>>4),i+=int2char(15&s),r=0))}return 1==r&&(i+=int2char(n<<2)),i}var decoder,extendStatics=function(t,e){return(extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)};function __extends(t,e){function i(){this.constructor=t}extendStatics(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}var decoder$1,Hex={decode:function(t){var e;if(void 0===decoder){var i=\"0123456789ABCDEF\",r=\" \\f\\n\\r\\t \\u2028\\u2029\";for(decoder={},e=0;e<16;++e)decoder[i.charAt(e)]=e;for(i=i.toLowerCase(),e=10;e<16;++e)decoder[i.charAt(e)]=e;for(e=0;e<r.length;++e)decoder[r.charAt(e)]=-1}var n=[],s=0,o=0;for(e=0;e<t.length;++e){var h=t.charAt(e);if(\"=\"==h)break;if(-1!=(h=decoder[h])){if(void 0===h)throw new Error(\"Illegal character at offset \"+e);s|=h,++o>=2?(n[n.length]=s,s=0,o=0):s<<=4}}if(o)throw new Error(\"Hex encoding incomplete: 4 bits missing\");return n}},Base64={decode:function(t){var e;if(void 0===decoder$1){var i=\"= \\f\\n\\r\\t \\u2028\\u2029\";for(decoder$1=Object.create(null),e=0;e<64;++e)decoder$1[\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".charAt(e)]=e;for(e=0;e<i.length;++e)decoder$1[i.charAt(e)]=-1}var r=[],n=0,s=0;for(e=0;e<t.length;++e){var o=t.charAt(e);if(\"=\"==o)break;if(-1!=(o=decoder$1[o])){if(void 0===o)throw new Error(\"Illegal character at offset \"+e);n|=o,++s>=4?(r[r.length]=n>>16,r[r.length]=n>>8&255,r[r.length]=255&n,n=0,s=0):n<<=6}}switch(s){case 1:throw new Error(\"Base64 encoding incomplete: at least 2 bits missing\");case 2:r[r.length]=n>>10;break;case 3:r[r.length]=n>>16,r[r.length]=n>>8&255}return r},re:/-----BEGIN [^-]+-----([A-Za-z0-9+\\/=\\s]+)-----END [^-]+-----|begin-base64[^\\n]+\\n([A-Za-z0-9+\\/=\\s]+)====/,unarmor:function(t){var e=Base64.re.exec(t);if(e)if(e[1])t=e[1];else{if(!e[2])throw new Error(\"RegExp out of sync\");t=e[2]}return Base64.decode(t)}},max=1e13,Int10=function(){function t(t){this.buf=[+t||0]}return t.prototype.mulAdd=function(t,e){var i,r,n=this.buf,s=n.length;for(i=0;i<s;++i)(r=n[i]*t+e)<max?e=0:r-=(e=0|r/max)*max,n[i]=r;e>0&&(n[i]=e)},t.prototype.sub=function(t){var e,i,r=this.buf,n=r.length;for(e=0;e<n;++e)(i=r[e]-t)<0?(i+=max,t=1):t=0,r[e]=i;for(;0===r[r.length-1];)r.pop()},t.prototype.toString=function(t){if(10!=(t||10))throw new Error(\"only base 10 is supported\");for(var e=this.buf,i=e[e.length-1].toString(),r=e.length-2;r>=0;--r)i+=(max+e[r]).toString().substring(1);return i},t.prototype.valueOf=function(){for(var t=this.buf,e=0,i=t.length-1;i>=0;--i)e=e*max+t[i];return e},t.prototype.simplify=function(){var t=this.buf;return 1==t.length?t[0]:this},t}(),ellipsis=\"…\",reTimeS=/^(\\d\\d)(0[1-9]|1[0-2])(0[1-9]|[12]\\d|3[01])([01]\\d|2[0-3])(?:([0-5]\\d)(?:([0-5]\\d)(?:[.,](\\d{1,3}))?)?)?(Z|[-+](?:[0]\\d|1[0-2])([0-5]\\d)?)?$/,reTimeL=/^(\\d\\d\\d\\d)(0[1-9]|1[0-2])(0[1-9]|[12]\\d|3[01])([01]\\d|2[0-3])(?:([0-5]\\d)(?:([0-5]\\d)(?:[.,](\\d{1,3}))?)?)?(Z|[-+](?:[0]\\d|1[0-2])([0-5]\\d)?)?$/;function stringCut(t,e){return t.length>e&&(t=t.substring(0,e)+ellipsis),t}var dbits,Stream=function(){function t(e,i){this.hexDigits=\"0123456789ABCDEF\",e instanceof t?(this.enc=e.enc,this.pos=e.pos):(this.enc=e,this.pos=i)}return t.prototype.get=function(t){if(void 0===t&&(t=this.pos++),t>=this.enc.length)throw new Error(\"Requesting byte offset \"+t+\" on a stream of length \"+this.enc.length);return\"string\"==typeof this.enc?this.enc.charCodeAt(t):this.enc[t]},t.prototype.hexByte=function(t){return this.hexDigits.charAt(t>>4&15)+this.hexDigits.charAt(15&t)},t.prototype.hexDump=function(t,e,i){for(var r=\"\",n=t;n<e;++n)if(r+=this.hexByte(this.get(n)),!0!==i)switch(15&n){case 7:r+=\"  \";break;case 15:r+=\"\\n\";break;default:r+=\" \"}return r},t.prototype.isASCII=function(t,e){for(var i=t;i<e;++i){var r=this.get(i);if(r<32||r>176)return!1}return!0},t.prototype.parseStringISO=function(t,e){for(var i=\"\",r=t;r<e;++r)i+=String.fromCharCode(this.get(r));return i},t.prototype.parseStringUTF=function(t,e){for(var i=\"\",r=t;r<e;){var n=this.get(r++);i+=n<128?String.fromCharCode(n):n>191&&n<224?String.fromCharCode((31&n)<<6|63&this.get(r++)):String.fromCharCode((15&n)<<12|(63&this.get(r++))<<6|63&this.get(r++))}return i},t.prototype.parseStringBMP=function(t,e){for(var i,r,n=\"\",s=t;s<e;)i=this.get(s++),r=this.get(s++),n+=String.fromCharCode(i<<8|r);return n},t.prototype.parseTime=function(t,e,i){var r=this.parseStringISO(t,e),n=(i?reTimeS:reTimeL).exec(r);return n?(i&&(n[1]=+n[1],n[1]+=+n[1]<70?2e3:1900),r=n[1]+\"-\"+n[2]+\"-\"+n[3]+\" \"+n[4],n[5]&&(r+=\":\"+n[5],n[6]&&(r+=\":\"+n[6],n[7]&&(r+=\".\"+n[7]))),n[8]&&(r+=\" UTC\",\"Z\"!=n[8]&&(r+=n[8],n[9]&&(r+=\":\"+n[9]))),r):\"Unrecognized time: \"+r},t.prototype.parseInteger=function(t,e){for(var i,r=this.get(t),n=r>127,s=n?255:0,o=\"\";r==s&&++t<e;)r=this.get(t);if(0===(i=e-t))return n?-1:0;if(i>4){for(o=r,i<<=3;0==(128&(+o^s));)o=+o<<1,--i;o=\"(\"+i+\" bit)\\n\"}n&&(r-=256);for(var h=new Int10(r),a=t+1;a<e;++a)h.mulAdd(256,this.get(a));return o+h.toString()},t.prototype.parseBitString=function(t,e,i){for(var r=this.get(t),n=\"(\"+((e-t-1<<3)-r)+\" bit)\\n\",s=\"\",o=t+1;o<e;++o){for(var h=this.get(o),a=o==e-1?r:0,u=7;u>=a;--u)s+=h>>u&1?\"1\":\"0\";if(s.length>i)return n+stringCut(s,i)}return n+s},t.prototype.parseOctetString=function(t,e,i){if(this.isASCII(t,e))return stringCut(this.parseStringISO(t,e),i);var r=e-t,n=\"(\"+r+\" byte)\\n\";r>(i/=2)&&(e=t+i);for(var s=t;s<e;++s)n+=this.hexByte(this.get(s));return r>i&&(n+=ellipsis),n},t.prototype.parseOID=function(t,e,i){for(var r=\"\",n=new Int10,s=0,o=t;o<e;++o){var h=this.get(o);if(n.mulAdd(128,127&h),s+=7,!(128&h)){if(\"\"===r)if((n=n.simplify())instanceof Int10)n.sub(80),r=\"2.\"+n.toString();else{var a=n<80?n<40?0:1:2;r=a+\".\"+(n-40*a)}else r+=\".\"+n.toString();if(r.length>i)return stringCut(r,i);n=new Int10,s=0}}return s>0&&(r+=\".incomplete\"),r},t}(),ASN1=function(){function t(t,e,i,r,n){if(!(r instanceof ASN1Tag))throw new Error(\"Invalid tag value.\");this.stream=t,this.header=e,this.length=i,this.tag=r,this.sub=n}return t.prototype.typeName=function(){switch(this.tag.tagClass){case 0:switch(this.tag.tagNumber){case 0:return\"EOC\";case 1:return\"BOOLEAN\";case 2:return\"INTEGER\";case 3:return\"BIT_STRING\";case 4:return\"OCTET_STRING\";case 5:return\"NULL\";case 6:return\"OBJECT_IDENTIFIER\";case 7:return\"ObjectDescriptor\";case 8:return\"EXTERNAL\";case 9:return\"REAL\";case 10:return\"ENUMERATED\";case 11:return\"EMBEDDED_PDV\";case 12:return\"UTF8String\";case 16:return\"SEQUENCE\";case 17:return\"SET\";case 18:return\"NumericString\";case 19:return\"PrintableString\";case 20:return\"TeletexString\";case 21:return\"VideotexString\";case 22:return\"IA5String\";case 23:return\"UTCTime\";case 24:return\"GeneralizedTime\";case 25:return\"GraphicString\";case 26:return\"VisibleString\";case 27:return\"GeneralString\";case 28:return\"UniversalString\";case 30:return\"BMPString\"}return\"Universal_\"+this.tag.tagNumber.toString();case 1:return\"Application_\"+this.tag.tagNumber.toString();case 2:return\"[\"+this.tag.tagNumber.toString()+\"]\";case 3:return\"Private_\"+this.tag.tagNumber.toString()}},t.prototype.content=function(t){if(void 0===this.tag)return null;void 0===t&&(t=1/0);var e=this.posContent(),i=Math.abs(this.length);if(!this.tag.isUniversal())return null!==this.sub?\"(\"+this.sub.length+\" elem)\":this.stream.parseOctetString(e,e+i,t);switch(this.tag.tagNumber){case 1:return 0===this.stream.get(e)?\"false\":\"true\";case 2:return this.stream.parseInteger(e,e+i);case 3:return this.sub?\"(\"+this.sub.length+\" elem)\":this.stream.parseBitString(e,e+i,t);case 4:return this.sub?\"(\"+this.sub.length+\" elem)\":this.stream.parseOctetString(e,e+i,t);case 6:return this.stream.parseOID(e,e+i,t);case 16:case 17:return null!==this.sub?\"(\"+this.sub.length+\" elem)\":\"(no elem)\";case 12:return stringCut(this.stream.parseStringUTF(e,e+i),t);case 18:case 19:case 20:case 21:case 22:case 26:return stringCut(this.stream.parseStringISO(e,e+i),t);case 30:return stringCut(this.stream.parseStringBMP(e,e+i),t);case 23:case 24:return this.stream.parseTime(e,e+i,23==this.tag.tagNumber)}return null},t.prototype.toString=function(){return this.typeName()+\"@\"+this.stream.pos+\"[header:\"+this.header+\",length:\"+this.length+\",sub:\"+(null===this.sub?\"null\":this.sub.length)+\"]\"},t.prototype.toPrettyString=function(t){void 0===t&&(t=\"\");var e=t+this.typeName()+\" @\"+this.stream.pos;if(this.length>=0&&(e+=\"+\"),e+=this.length,this.tag.tagConstructed?e+=\" (constructed)\":!this.tag.isUniversal()||3!=this.tag.tagNumber&&4!=this.tag.tagNumber||null===this.sub||(e+=\" (encapsulates)\"),e+=\"\\n\",null!==this.sub){t+=\"  \";for(var i=0,r=this.sub.length;i<r;++i)e+=this.sub[i].toPrettyString(t)}return e},t.prototype.posStart=function(){return this.stream.pos},t.prototype.posContent=function(){return this.stream.pos+this.header},t.prototype.posEnd=function(){return this.stream.pos+this.header+Math.abs(this.length)},t.prototype.toHexString=function(){return this.stream.hexDump(this.posStart(),this.posEnd(),!0)},t.decodeLength=function(t){var e=t.get(),i=127&e;if(i==e)return i;if(i>6)throw new Error(\"Length over 48 bits not supported at position \"+(t.pos-1));if(0===i)return null;e=0;for(var r=0;r<i;++r)e=256*e+t.get();return e},t.prototype.getHexStringValue=function(){var t=this.toHexString(),e=2*this.header,i=2*this.length;return t.substr(e,i)},t.decode=function(e){var i;i=e instanceof Stream?e:new Stream(e,0);var r=new Stream(i),n=new ASN1Tag(i),s=t.decodeLength(i),o=i.pos,h=o-r.pos,a=null,u=function(){var e=[];if(null!==s){for(var r=o+s;i.pos<r;)e[e.length]=t.decode(i);if(i.pos!=r)throw new Error(\"Content size is not correct for container starting at offset \"+o)}else try{for(;;){var n=t.decode(i);if(n.tag.isEOC())break;e[e.length]=n}s=o-i.pos}catch(t){throw new Error(\"Exception while decoding undefined length content: \"+t)}return e};if(n.tagConstructed)a=u();else if(n.isUniversal()&&(3==n.tagNumber||4==n.tagNumber))try{if(3==n.tagNumber&&0!=i.get())throw new Error(\"BIT STRINGs with unused bits cannot encapsulate.\");a=u();for(var c=0;c<a.length;++c)if(a[c].tag.isEOC())throw new Error(\"EOC is not supposed to be actual content.\")}catch(t){a=null}if(null===a){if(null===s)throw new Error(\"We can't skip over an invalid tag with undefined length at offset \"+o);i.pos=o+Math.abs(s)}return new t(r,h,s,n,a)},t}(),ASN1Tag=function(){function t(t){var e=t.get();if(this.tagClass=e>>6,this.tagConstructed=0!=(32&e),this.tagNumber=31&e,31==this.tagNumber){var i=new Int10;do{e=t.get(),i.mulAdd(128,127&e)}while(128&e);this.tagNumber=i.simplify()}}return t.prototype.isUniversal=function(){return 0===this.tagClass},t.prototype.isEOC=function(){return 0===this.tagClass&&0===this.tagNumber},t}(),canary=0xdeadbeefcafe,j_lm=15715070==(16777215&canary),lowprimes=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],lplim=(1<<26)/lowprimes[lowprimes.length-1],BigInteger=function(){function t(t,e,i){null!=t&&(\"number\"==typeof t?this.fromNumber(t,e,i):null==e&&\"string\"!=typeof t?this.fromString(t,256):this.fromString(t,e))}return t.prototype.toString=function(t){if(this.s<0)return\"-\"+this.negate().toString(t);var e;if(16==t)e=4;else if(8==t)e=3;else if(2==t)e=1;else if(32==t)e=5;else{if(4!=t)return this.toRadix(t);e=2}var i,r=(1<<e)-1,n=!1,s=\"\",o=this.t,h=this.DB-o*this.DB%e;if(o-- >0)for(h<this.DB&&(i=this[o]>>h)>0&&(n=!0,s=int2char(i));o>=0;)h<e?(i=(this[o]&(1<<h)-1)<<e-h,i|=this[--o]>>(h+=this.DB-e)):(i=this[o]>>(h-=e)&r,h<=0&&(h+=this.DB,--o)),i>0&&(n=!0),n&&(s+=int2char(i));return n?s:\"0\"},t.prototype.negate=function(){var e=nbi();return t.ZERO.subTo(this,e),e},t.prototype.abs=function(){return this.s<0?this.negate():this},t.prototype.compareTo=function(t){var e=this.s-t.s;if(0!=e)return e;var i=this.t;if(0!=(e=i-t.t))return this.s<0?-e:e;for(;--i>=0;)if(0!=(e=this[i]-t[i]))return e;return 0},t.prototype.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+nbits(this[this.t-1]^this.s&this.DM)},t.prototype.mod=function(e){var i=nbi();return this.abs().divRemTo(e,null,i),this.s<0&&i.compareTo(t.ZERO)>0&&e.subTo(i,i),i},t.prototype.modPowInt=function(t,e){var i;return i=t<256||e.isEven()?new Classic(e):new Montgomery(e),this.exp(t,i)},t.prototype.clone=function(){var t=nbi();return this.copyTo(t),t},t.prototype.intValue=function(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},t.prototype.byteValue=function(){return 0==this.t?this.s:this[0]<<24>>24},t.prototype.shortValue=function(){return 0==this.t?this.s:this[0]<<16>>16},t.prototype.signum=function(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},t.prototype.toByteArray=function(){var t=this.t,e=[];e[0]=this.s;var i,r=this.DB-t*this.DB%8,n=0;if(t-- >0)for(r<this.DB&&(i=this[t]>>r)!=(this.s&this.DM)>>r&&(e[n++]=i|this.s<<this.DB-r);t>=0;)r<8?(i=(this[t]&(1<<r)-1)<<8-r,i|=this[--t]>>(r+=this.DB-8)):(i=this[t]>>(r-=8)&255,r<=0&&(r+=this.DB,--t)),0!=(128&i)&&(i|=-256),0==n&&(128&this.s)!=(128&i)&&++n,(n>0||i!=this.s)&&(e[n++]=i);return e},t.prototype.equals=function(t){return 0==this.compareTo(t)},t.prototype.min=function(t){return this.compareTo(t)<0?this:t},t.prototype.max=function(t){return this.compareTo(t)>0?this:t},t.prototype.and=function(t){var e=nbi();return this.bitwiseTo(t,op_and,e),e},t.prototype.or=function(t){var e=nbi();return this.bitwiseTo(t,op_or,e),e},t.prototype.xor=function(t){var e=nbi();return this.bitwiseTo(t,op_xor,e),e},t.prototype.andNot=function(t){var e=nbi();return this.bitwiseTo(t,op_andnot,e),e},t.prototype.not=function(){for(var t=nbi(),e=0;e<this.t;++e)t[e]=this.DM&~this[e];return t.t=this.t,t.s=~this.s,t},t.prototype.shiftLeft=function(t){var e=nbi();return t<0?this.rShiftTo(-t,e):this.lShiftTo(t,e),e},t.prototype.shiftRight=function(t){var e=nbi();return t<0?this.lShiftTo(-t,e):this.rShiftTo(t,e),e},t.prototype.getLowestSetBit=function(){for(var t=0;t<this.t;++t)if(0!=this[t])return t*this.DB+lbit(this[t]);return this.s<0?this.t*this.DB:-1},t.prototype.bitCount=function(){for(var t=0,e=this.s&this.DM,i=0;i<this.t;++i)t+=cbit(this[i]^e);return t},t.prototype.testBit=function(t){var e=Math.floor(t/this.DB);return e>=this.t?0!=this.s:0!=(this[e]&1<<t%this.DB)},t.prototype.setBit=function(t){return this.changeBit(t,op_or)},t.prototype.clearBit=function(t){return this.changeBit(t,op_andnot)},t.prototype.flipBit=function(t){return this.changeBit(t,op_xor)},t.prototype.add=function(t){var e=nbi();return this.addTo(t,e),e},t.prototype.subtract=function(t){var e=nbi();return this.subTo(t,e),e},t.prototype.multiply=function(t){var e=nbi();return this.multiplyTo(t,e),e},t.prototype.divide=function(t){var e=nbi();return this.divRemTo(t,e,null),e},t.prototype.remainder=function(t){var e=nbi();return this.divRemTo(t,null,e),e},t.prototype.divideAndRemainder=function(t){var e=nbi(),i=nbi();return this.divRemTo(t,e,i),[e,i]},t.prototype.modPow=function(t,e){var i,r,n=t.bitLength(),s=nbv(1);if(n<=0)return s;i=n<18?1:n<48?3:n<144?4:n<768?5:6,r=n<8?new Classic(e):e.isEven()?new Barrett(e):new Montgomery(e);var o=[],h=3,a=i-1,u=(1<<i)-1;if(o[1]=r.convert(this),i>1){var c=nbi();for(r.sqrTo(o[1],c);h<=u;)o[h]=nbi(),r.mulTo(c,o[h-2],o[h]),h+=2}var f,p,l=t.t-1,g=!0,d=nbi();for(n=nbits(t[l])-1;l>=0;){for(n>=a?f=t[l]>>n-a&u:(f=(t[l]&(1<<n+1)-1)<<a-n,l>0&&(f|=t[l-1]>>this.DB+n-a)),h=i;0==(1&f);)f>>=1,--h;if((n-=h)<0&&(n+=this.DB,--l),g)o[f].copyTo(s),g=!1;else{for(;h>1;)r.sqrTo(s,d),r.sqrTo(d,s),h-=2;h>0?r.sqrTo(s,d):(p=s,s=d,d=p),r.mulTo(d,o[f],s)}for(;l>=0&&0==(t[l]&1<<n);)r.sqrTo(s,d),p=s,s=d,d=p,--n<0&&(n=this.DB-1,--l)}return r.revert(s)},t.prototype.modInverse=function(e){var i=e.isEven();if(this.isEven()&&i||0==e.signum())return t.ZERO;for(var r=e.clone(),n=this.clone(),s=nbv(1),o=nbv(0),h=nbv(0),a=nbv(1);0!=r.signum();){for(;r.isEven();)r.rShiftTo(1,r),i?(s.isEven()&&o.isEven()||(s.addTo(this,s),o.subTo(e,o)),s.rShiftTo(1,s)):o.isEven()||o.subTo(e,o),o.rShiftTo(1,o);for(;n.isEven();)n.rShiftTo(1,n),i?(h.isEven()&&a.isEven()||(h.addTo(this,h),a.subTo(e,a)),h.rShiftTo(1,h)):a.isEven()||a.subTo(e,a),a.rShiftTo(1,a);r.compareTo(n)>=0?(r.subTo(n,r),i&&s.subTo(h,s),o.subTo(a,o)):(n.subTo(r,n),i&&h.subTo(s,h),a.subTo(o,a))}return 0!=n.compareTo(t.ONE)?t.ZERO:a.compareTo(e)>=0?a.subtract(e):a.signum()<0?(a.addTo(e,a),a.signum()<0?a.add(e):a):a},t.prototype.pow=function(t){return this.exp(t,new NullExp)},t.prototype.gcd=function(t){var e=this.s<0?this.negate():this.clone(),i=t.s<0?t.negate():t.clone();if(e.compareTo(i)<0){var r=e;e=i,i=r}var n=e.getLowestSetBit(),s=i.getLowestSetBit();if(s<0)return e;for(n<s&&(s=n),s>0&&(e.rShiftTo(s,e),i.rShiftTo(s,i));e.signum()>0;)(n=e.getLowestSetBit())>0&&e.rShiftTo(n,e),(n=i.getLowestSetBit())>0&&i.rShiftTo(n,i),e.compareTo(i)>=0?(e.subTo(i,e),e.rShiftTo(1,e)):(i.subTo(e,i),i.rShiftTo(1,i));return s>0&&i.lShiftTo(s,i),i},t.prototype.isProbablePrime=function(t){var e,i=this.abs();if(1==i.t&&i[0]<=lowprimes[lowprimes.length-1]){for(e=0;e<lowprimes.length;++e)if(i[0]==lowprimes[e])return!0;return!1}if(i.isEven())return!1;for(e=1;e<lowprimes.length;){for(var r=lowprimes[e],n=e+1;n<lowprimes.length&&r<lplim;)r*=lowprimes[n++];for(r=i.modInt(r);e<n;)if(r%lowprimes[e++]==0)return!1}return i.millerRabin(t)},t.prototype.copyTo=function(t){for(var e=this.t-1;e>=0;--e)t[e]=this[e];t.t=this.t,t.s=this.s},t.prototype.fromInt=function(t){this.t=1,this.s=t<0?-1:0,t>0?this[0]=t:t<-1?this[0]=t+this.DV:this.t=0},t.prototype.fromString=function(e,i){var r;if(16==i)r=4;else if(8==i)r=3;else if(256==i)r=8;else if(2==i)r=1;else if(32==i)r=5;else{if(4!=i)return void this.fromRadix(e,i);r=2}this.t=0,this.s=0;for(var n=e.length,s=!1,o=0;--n>=0;){var h=8==r?255&+e[n]:intAt(e,n);h<0?\"-\"==e.charAt(n)&&(s=!0):(s=!1,0==o?this[this.t++]=h:o+r>this.DB?(this[this.t-1]|=(h&(1<<this.DB-o)-1)<<o,this[this.t++]=h>>this.DB-o):this[this.t-1]|=h<<o,(o+=r)>=this.DB&&(o-=this.DB))}8==r&&0!=(128&+e[0])&&(this.s=-1,o>0&&(this[this.t-1]|=(1<<this.DB-o)-1<<o)),this.clamp(),s&&t.ZERO.subTo(this,this)},t.prototype.clamp=function(){for(var t=this.s&this.DM;this.t>0&&this[this.t-1]==t;)--this.t},t.prototype.dlShiftTo=function(t,e){var i;for(i=this.t-1;i>=0;--i)e[i+t]=this[i];for(i=t-1;i>=0;--i)e[i]=0;e.t=this.t+t,e.s=this.s},t.prototype.drShiftTo=function(t,e){for(var i=t;i<this.t;++i)e[i-t]=this[i];e.t=Math.max(this.t-t,0),e.s=this.s},t.prototype.lShiftTo=function(t,e){for(var i=t%this.DB,r=this.DB-i,n=(1<<r)-1,s=Math.floor(t/this.DB),o=this.s<<i&this.DM,h=this.t-1;h>=0;--h)e[h+s+1]=this[h]>>r|o,o=(this[h]&n)<<i;for(h=s-1;h>=0;--h)e[h]=0;e[s]=o,e.t=this.t+s+1,e.s=this.s,e.clamp()},t.prototype.rShiftTo=function(t,e){e.s=this.s;var i=Math.floor(t/this.DB);if(i>=this.t)e.t=0;else{var r=t%this.DB,n=this.DB-r,s=(1<<r)-1;e[0]=this[i]>>r;for(var o=i+1;o<this.t;++o)e[o-i-1]|=(this[o]&s)<<n,e[o-i]=this[o]>>r;r>0&&(e[this.t-i-1]|=(this.s&s)<<n),e.t=this.t-i,e.clamp()}},t.prototype.subTo=function(t,e){for(var i=0,r=0,n=Math.min(t.t,this.t);i<n;)r+=this[i]-t[i],e[i++]=r&this.DM,r>>=this.DB;if(t.t<this.t){for(r-=t.s;i<this.t;)r+=this[i],e[i++]=r&this.DM,r>>=this.DB;r+=this.s}else{for(r+=this.s;i<t.t;)r-=t[i],e[i++]=r&this.DM,r>>=this.DB;r-=t.s}e.s=r<0?-1:0,r<-1?e[i++]=this.DV+r:r>0&&(e[i++]=r),e.t=i,e.clamp()},t.prototype.multiplyTo=function(e,i){var r=this.abs(),n=e.abs(),s=r.t;for(i.t=s+n.t;--s>=0;)i[s]=0;for(s=0;s<n.t;++s)i[s+r.t]=r.am(0,n[s],i,s,0,r.t);i.s=0,i.clamp(),this.s!=e.s&&t.ZERO.subTo(i,i)},t.prototype.squareTo=function(t){for(var e=this.abs(),i=t.t=2*e.t;--i>=0;)t[i]=0;for(i=0;i<e.t-1;++i){var r=e.am(i,e[i],t,2*i,0,1);(t[i+e.t]+=e.am(i+1,2*e[i],t,2*i+1,r,e.t-i-1))>=e.DV&&(t[i+e.t]-=e.DV,t[i+e.t+1]=1)}t.t>0&&(t[t.t-1]+=e.am(i,e[i],t,2*i,0,1)),t.s=0,t.clamp()},t.prototype.divRemTo=function(e,i,r){var n=e.abs();if(!(n.t<=0)){var s=this.abs();if(s.t<n.t)return null!=i&&i.fromInt(0),void(null!=r&&this.copyTo(r));null==r&&(r=nbi());var o=nbi(),h=this.s,a=e.s,u=this.DB-nbits(n[n.t-1]);u>0?(n.lShiftTo(u,o),s.lShiftTo(u,r)):(n.copyTo(o),s.copyTo(r));var c=o.t,f=o[c-1];if(0!=f){var p=f*(1<<this.F1)+(c>1?o[c-2]>>this.F2:0),l=this.FV/p,g=(1<<this.F1)/p,d=1<<this.F2,m=r.t,v=m-c,y=null==i?nbi():i;for(o.dlShiftTo(v,y),r.compareTo(y)>=0&&(r[r.t++]=1,r.subTo(y,r)),t.ONE.dlShiftTo(c,y),y.subTo(o,o);o.t<c;)o[o.t++]=0;for(;--v>=0;){var b=r[--m]==f?this.DM:Math.floor(r[m]*l+(r[m-1]+d)*g);if((r[m]+=o.am(0,b,r,v,0,c))<b)for(o.dlShiftTo(v,y),r.subTo(y,r);r[m]<--b;)r.subTo(y,r)}null!=i&&(r.drShiftTo(c,i),h!=a&&t.ZERO.subTo(i,i)),r.t=c,r.clamp(),u>0&&r.rShiftTo(u,r),h<0&&t.ZERO.subTo(r,r)}}},t.prototype.invDigit=function(){if(this.t<1)return 0;var t=this[0];if(0==(1&t))return 0;var e=3&t;return(e=(e=(e=(e=e*(2-(15&t)*e)&15)*(2-(255&t)*e)&255)*(2-((65535&t)*e&65535))&65535)*(2-t*e%this.DV)%this.DV)>0?this.DV-e:-e},t.prototype.isEven=function(){return 0==(this.t>0?1&this[0]:this.s)},t.prototype.exp=function(e,i){if(e>4294967295||e<1)return t.ONE;var r=nbi(),n=nbi(),s=i.convert(this),o=nbits(e)-1;for(s.copyTo(r);--o>=0;)if(i.sqrTo(r,n),(e&1<<o)>0)i.mulTo(n,s,r);else{var h=r;r=n,n=h}return i.revert(r)},t.prototype.chunkSize=function(t){return Math.floor(Math.LN2*this.DB/Math.log(t))},t.prototype.toRadix=function(t){if(null==t&&(t=10),0==this.signum()||t<2||t>36)return\"0\";var e=this.chunkSize(t),i=Math.pow(t,e),r=nbv(i),n=nbi(),s=nbi(),o=\"\";for(this.divRemTo(r,n,s);n.signum()>0;)o=(i+s.intValue()).toString(t).substr(1)+o,n.divRemTo(r,n,s);return s.intValue().toString(t)+o},t.prototype.fromRadix=function(e,i){this.fromInt(0),null==i&&(i=10);for(var r=this.chunkSize(i),n=Math.pow(i,r),s=!1,o=0,h=0,a=0;a<e.length;++a){var u=intAt(e,a);u<0?\"-\"==e.charAt(a)&&0==this.signum()&&(s=!0):(h=i*h+u,++o>=r&&(this.dMultiply(n),this.dAddOffset(h,0),o=0,h=0))}o>0&&(this.dMultiply(Math.pow(i,o)),this.dAddOffset(h,0)),s&&t.ZERO.subTo(this,this)},t.prototype.fromNumber=function(e,i,r){if(\"number\"==typeof i)if(e<2)this.fromInt(1);else for(this.fromNumber(e,r),this.testBit(e-1)||this.bitwiseTo(t.ONE.shiftLeft(e-1),op_or,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(i);)this.dAddOffset(2,0),this.bitLength()>e&&this.subTo(t.ONE.shiftLeft(e-1),this);else{var n=[],s=7&e;n.length=1+(e>>3),i.nextBytes(n),s>0?n[0]&=(1<<s)-1:n[0]=0,this.fromString(n,256)}},t.prototype.bitwiseTo=function(t,e,i){var r,n,s=Math.min(t.t,this.t);for(r=0;r<s;++r)i[r]=e(this[r],t[r]);if(t.t<this.t){for(n=t.s&this.DM,r=s;r<this.t;++r)i[r]=e(this[r],n);i.t=this.t}else{for(n=this.s&this.DM,r=s;r<t.t;++r)i[r]=e(n,t[r]);i.t=t.t}i.s=e(this.s,t.s),i.clamp()},t.prototype.changeBit=function(e,i){var r=t.ONE.shiftLeft(e);return this.bitwiseTo(r,i,r),r},t.prototype.addTo=function(t,e){for(var i=0,r=0,n=Math.min(t.t,this.t);i<n;)r+=this[i]+t[i],e[i++]=r&this.DM,r>>=this.DB;if(t.t<this.t){for(r+=t.s;i<this.t;)r+=this[i],e[i++]=r&this.DM,r>>=this.DB;r+=this.s}else{for(r+=this.s;i<t.t;)r+=t[i],e[i++]=r&this.DM,r>>=this.DB;r+=t.s}e.s=r<0?-1:0,r>0?e[i++]=r:r<-1&&(e[i++]=this.DV+r),e.t=i,e.clamp()},t.prototype.dMultiply=function(t){this[this.t]=this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp()},t.prototype.dAddOffset=function(t,e){if(0!=t){for(;this.t<=e;)this[this.t++]=0;for(this[e]+=t;this[e]>=this.DV;)this[e]-=this.DV,++e>=this.t&&(this[this.t++]=0),++this[e]}},t.prototype.multiplyLowerTo=function(t,e,i){var r=Math.min(this.t+t.t,e);for(i.s=0,i.t=r;r>0;)i[--r]=0;for(var n=i.t-this.t;r<n;++r)i[r+this.t]=this.am(0,t[r],i,r,0,this.t);for(n=Math.min(t.t,e);r<n;++r)this.am(0,t[r],i,r,0,e-r);i.clamp()},t.prototype.multiplyUpperTo=function(t,e,i){--e;var r=i.t=this.t+t.t-e;for(i.s=0;--r>=0;)i[r]=0;for(r=Math.max(e-this.t,0);r<t.t;++r)i[this.t+r-e]=this.am(e-r,t[r],i,0,0,this.t+r-e);i.clamp(),i.drShiftTo(1,i)},t.prototype.modInt=function(t){if(t<=0)return 0;var e=this.DV%t,i=this.s<0?t-1:0;if(this.t>0)if(0==e)i=this[0]%t;else for(var r=this.t-1;r>=0;--r)i=(e*i+this[r])%t;return i},t.prototype.millerRabin=function(e){var i=this.subtract(t.ONE),r=i.getLowestSetBit();if(r<=0)return!1;var n=i.shiftRight(r);(e=e+1>>1)>lowprimes.length&&(e=lowprimes.length);for(var s=nbi(),o=0;o<e;++o){s.fromInt(lowprimes[Math.floor(Math.random()*lowprimes.length)]);var h=s.modPow(n,this);if(0!=h.compareTo(t.ONE)&&0!=h.compareTo(i)){for(var a=1;a++<r&&0!=h.compareTo(i);)if(0==(h=h.modPowInt(2,this)).compareTo(t.ONE))return!1;if(0!=h.compareTo(i))return!1}}return!0},t.prototype.square=function(){var t=nbi();return this.squareTo(t),t},t.prototype.gcda=function(t,e){var i=this.s<0?this.negate():this.clone(),r=t.s<0?t.negate():t.clone();if(i.compareTo(r)<0){var n=i;i=r,r=n}var s=i.getLowestSetBit(),o=r.getLowestSetBit();if(o<0)e(i);else{s<o&&(o=s),o>0&&(i.rShiftTo(o,i),r.rShiftTo(o,r));var h=function(){(s=i.getLowestSetBit())>0&&i.rShiftTo(s,i),(s=r.getLowestSetBit())>0&&r.rShiftTo(s,r),i.compareTo(r)>=0?(i.subTo(r,i),i.rShiftTo(1,i)):(r.subTo(i,r),r.rShiftTo(1,r)),i.signum()>0?setTimeout(h,0):(o>0&&r.lShiftTo(o,r),setTimeout(function(){e(r)},0))};setTimeout(h,10)}},t.prototype.fromNumberAsync=function(e,i,r,n){if(\"number\"==typeof i)if(e<2)this.fromInt(1);else{this.fromNumber(e,r),this.testBit(e-1)||this.bitwiseTo(t.ONE.shiftLeft(e-1),op_or,this),this.isEven()&&this.dAddOffset(1,0);var s=this,o=function(){s.dAddOffset(2,0),s.bitLength()>e&&s.subTo(t.ONE.shiftLeft(e-1),s),s.isProbablePrime(i)?setTimeout(function(){n()},0):setTimeout(o,0)};setTimeout(o,0)}else{var h=[],a=7&e;h.length=1+(e>>3),i.nextBytes(h),a>0?h[0]&=(1<<a)-1:h[0]=0,this.fromString(h,256)}},t}(),NullExp=function(){function t(){}return t.prototype.convert=function(t){return t},t.prototype.revert=function(t){return t},t.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i)},t.prototype.sqrTo=function(t,e){t.squareTo(e)},t}(),Classic=function(){function t(t){this.m=t}return t.prototype.convert=function(t){return t.s<0||t.compareTo(this.m)>=0?t.mod(this.m):t},t.prototype.revert=function(t){return t},t.prototype.reduce=function(t){t.divRemTo(this.m,null,t)},t.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i),this.reduce(i)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}(),Montgomery=function(){function t(t){this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t}return t.prototype.convert=function(t){var e=nbi();return t.abs().dlShiftTo(this.m.t,e),e.divRemTo(this.m,null,e),t.s<0&&e.compareTo(BigInteger.ZERO)>0&&this.m.subTo(e,e),e},t.prototype.revert=function(t){var e=nbi();return t.copyTo(e),this.reduce(e),e},t.prototype.reduce=function(t){for(;t.t<=this.mt2;)t[t.t++]=0;for(var e=0;e<this.m.t;++e){var i=32767&t[e],r=i*this.mpl+((i*this.mph+(t[e]>>15)*this.mpl&this.um)<<15)&t.DM;for(t[i=e+this.m.t]+=this.m.am(0,r,t,e,0,this.m.t);t[i]>=t.DV;)t[i]-=t.DV,t[++i]++}t.clamp(),t.drShiftTo(this.m.t,t),t.compareTo(this.m)>=0&&t.subTo(this.m,t)},t.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i),this.reduce(i)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}(),Barrett=function(){function t(t){this.m=t,this.r2=nbi(),this.q3=nbi(),BigInteger.ONE.dlShiftTo(2*t.t,this.r2),this.mu=this.r2.divide(t)}return t.prototype.convert=function(t){if(t.s<0||t.t>2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)<0)return t;var e=nbi();return t.copyTo(e),this.reduce(e),e},t.prototype.revert=function(t){return t},t.prototype.reduce=function(t){for(t.drShiftTo(this.m.t-1,this.r2),t.t>this.m.t+1&&(t.t=this.m.t+1,t.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);t.compareTo(this.r2)<0;)t.dAddOffset(1,this.m.t+1);for(t.subTo(this.r2,t);t.compareTo(this.m)>=0;)t.subTo(this.m,t)},t.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i),this.reduce(i)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}();function nbi(){return new BigInteger(null)}function parseBigInt(t,e){return new BigInteger(t,e)}function am1(t,e,i,r,n,s){for(;--s>=0;){var o=e*this[t++]+i[r]+n;n=Math.floor(o/67108864),i[r++]=67108863&o}return n}function am2(t,e,i,r,n,s){for(var o=32767&e,h=e>>15;--s>=0;){var a=32767&this[t],u=this[t++]>>15,c=h*a+u*o;n=((a=o*a+((32767&c)<<15)+i[r]+(1073741823&n))>>>30)+(c>>>15)+h*u+(n>>>30),i[r++]=1073741823&a}return n}function am3(t,e,i,r,n,s){for(var o=16383&e,h=e>>14;--s>=0;){var a=16383&this[t],u=this[t++]>>14,c=h*a+u*o;n=((a=o*a+((16383&c)<<14)+i[r]+n)>>28)+(c>>14)+h*u,i[r++]=268435455&a}return n}BigInteger.prototype.am=am3,dbits=28,BigInteger.prototype.DB=dbits,BigInteger.prototype.DM=(1<<dbits)-1,BigInteger.prototype.DV=1<<dbits;var BI_FP=52;BigInteger.prototype.FV=Math.pow(2,BI_FP),BigInteger.prototype.F1=BI_FP-dbits,BigInteger.prototype.F2=2*dbits-BI_FP;var rr,vv,BI_RC=[];for(rr=\"0\".charCodeAt(0),vv=0;vv<=9;++vv)BI_RC[rr++]=vv;for(rr=\"a\".charCodeAt(0),vv=10;vv<36;++vv)BI_RC[rr++]=vv;for(rr=\"A\".charCodeAt(0),vv=10;vv<36;++vv)BI_RC[rr++]=vv;function intAt(t,e){var i=BI_RC[t.charCodeAt(e)];return null==i?-1:i}function nbv(t){var e=nbi();return e.fromInt(t),e}function nbits(t){var e,i=1;return 0!=(e=t>>>16)&&(t=e,i+=16),0!=(e=t>>8)&&(t=e,i+=8),0!=(e=t>>4)&&(t=e,i+=4),0!=(e=t>>2)&&(t=e,i+=2),0!=(e=t>>1)&&(t=e,i+=1),i}BigInteger.ZERO=nbv(0),BigInteger.ONE=nbv(1);var Arcfour=function(){function t(){this.i=0,this.j=0,this.S=[]}return t.prototype.init=function(t){var e,i,r;for(e=0;e<256;++e)this.S[e]=e;for(i=0,e=0;e<256;++e)i=i+this.S[e]+t[e%t.length]&255,r=this.S[e],this.S[e]=this.S[i],this.S[i]=r;this.i=0,this.j=0},t.prototype.next=function(){var t;return this.i=this.i+1&255,this.j=this.j+this.S[this.i]&255,t=this.S[this.i],this.S[this.i]=this.S[this.j],this.S[this.j]=t,this.S[t+this.S[this.i]&255]},t}();function prng_newstate(){return new Arcfour}var rng_state,rng_pptr,rng_psize=256,rng_pool=null;if(null==rng_pool){rng_pool=[],rng_pptr=0;var t=void 0}function rng_get_byte(){if(null==rng_state){for(rng_state=prng_newstate();rng_pptr<rng_psize;){var t=Math.floor(65536*Math.random());rng_pool[rng_pptr++]=255&t}for(rng_state.init(rng_pool),rng_pptr=0;rng_pptr<rng_pool.length;++rng_pptr)rng_pool[rng_pptr]=0;rng_pptr=0}return rng_state.next()}var SecureRandom=function(){function t(){}return t.prototype.nextBytes=function(t){for(var e=0;e<t.length;++e)t[e]=rng_get_byte()},t}();function pkcs1pad1(t,e){if(e<t.length+22)return console.error(\"Message too long for RSA\"),null;for(var i=e-t.length-6,r=\"\",n=0;n<i;n+=2)r+=\"ff\";return parseBigInt(\"0001\"+r+\"00\"+t,16)}function pkcs1pad2(t,e){if(e<t.length+11)return console.error(\"Message too long for RSA\"),null;for(var i=[],r=t.length-1;r>=0&&e>0;){var n=t.charCodeAt(r--);n<128?i[--e]=n:n>127&&n<2048?(i[--e]=63&n|128,i[--e]=n>>6|192):(i[--e]=63&n|128,i[--e]=n>>6&63|128,i[--e]=n>>12|224)}i[--e]=0;for(var s=new SecureRandom,o=[];e>2;){for(o[0]=0;0==o[0];)s.nextBytes(o);i[--e]=o[0]}return i[--e]=2,i[--e]=0,new BigInteger(i)}var RSAKey=function(){function t(){this.n=null,this.e=0,this.d=null,this.p=null,this.q=null,this.dmp1=null,this.dmq1=null,this.coeff=null}return t.prototype.doPublic=function(t){return t.modPowInt(this.e,this.n)},t.prototype.doPrivate=function(t){if(null==this.p||null==this.q)return t.modPow(this.d,this.n);for(var e=t.mod(this.p).modPow(this.dmp1,this.p),i=t.mod(this.q).modPow(this.dmq1,this.q);e.compareTo(i)<0;)e=e.add(this.p);return e.subtract(i).multiply(this.coeff).mod(this.p).multiply(this.q).add(i)},t.prototype.setPublic=function(t,e){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=parseBigInt(t,16),this.e=parseInt(e,16)):console.error(\"Invalid RSA public key\")},t.prototype.encrypt=function(t){var e=pkcs1pad2(t,this.n.bitLength()+7>>3);if(null==e)return null;var i=this.doPublic(e);if(null==i)return null;var r=i.toString(16);return 0==(1&r.length)?r:\"0\"+r},t.prototype.setPrivate=function(t,e,i){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=parseBigInt(t,16),this.e=parseInt(e,16),this.d=parseBigInt(i,16)):console.error(\"Invalid RSA private key\")},t.prototype.setPrivateEx=function(t,e,i,r,n,s,o,h){null!=t&&null!=e&&t.length>0&&e.length>0?(this.n=parseBigInt(t,16),this.e=parseInt(e,16),this.d=parseBigInt(i,16),this.p=parseBigInt(r,16),this.q=parseBigInt(n,16),this.dmp1=parseBigInt(s,16),this.dmq1=parseBigInt(o,16),this.coeff=parseBigInt(h,16)):console.error(\"Invalid RSA private key\")},t.prototype.generate=function(t,e){var i=new SecureRandom,r=t>>1;this.e=parseInt(e,16);for(var n=new BigInteger(e,16);;){for(;this.p=new BigInteger(t-r,1,i),0!=this.p.subtract(BigInteger.ONE).gcd(n).compareTo(BigInteger.ONE)||!this.p.isProbablePrime(10););for(;this.q=new BigInteger(r,1,i),0!=this.q.subtract(BigInteger.ONE).gcd(n).compareTo(BigInteger.ONE)||!this.q.isProbablePrime(10););if(this.p.compareTo(this.q)<=0){var s=this.p;this.p=this.q,this.q=s}var o=this.p.subtract(BigInteger.ONE),h=this.q.subtract(BigInteger.ONE),a=o.multiply(h);if(0==a.gcd(n).compareTo(BigInteger.ONE)){this.n=this.p.multiply(this.q),this.d=n.modInverse(a),this.dmp1=this.d.mod(o),this.dmq1=this.d.mod(h),this.coeff=this.q.modInverse(this.p);break}}},t.prototype.decrypt=function(t){var e=parseBigInt(t,16),i=this.doPrivate(e);return null==i?null:pkcs1unpad2(i,this.n.bitLength()+7>>3)},t.prototype.generateAsync=function(t,e,i){var r=new SecureRandom,n=t>>1;this.e=parseInt(e,16);var s=new BigInteger(e,16),o=this,h=function(){var e=function(){if(o.p.compareTo(o.q)<=0){var t=o.p;o.p=o.q,o.q=t}var e=o.p.subtract(BigInteger.ONE),r=o.q.subtract(BigInteger.ONE),n=e.multiply(r);0==n.gcd(s).compareTo(BigInteger.ONE)?(o.n=o.p.multiply(o.q),o.d=s.modInverse(n),o.dmp1=o.d.mod(e),o.dmq1=o.d.mod(r),o.coeff=o.q.modInverse(o.p),setTimeout(function(){i()},0)):setTimeout(h,0)},a=function(){o.q=nbi(),o.q.fromNumberAsync(n,1,r,function(){o.q.subtract(BigInteger.ONE).gcda(s,function(t){0==t.compareTo(BigInteger.ONE)&&o.q.isProbablePrime(10)?setTimeout(e,0):setTimeout(a,0)})})},u=function(){o.p=nbi(),o.p.fromNumberAsync(t-n,1,r,function(){o.p.subtract(BigInteger.ONE).gcda(s,function(t){0==t.compareTo(BigInteger.ONE)&&o.p.isProbablePrime(10)?setTimeout(a,0):setTimeout(u,0)})})};setTimeout(u,0)};setTimeout(h,0)},t.prototype.sign=function(t,e,i){var r=pkcs1pad1(getDigestHeader(i)+e(t).toString(),this.n.bitLength()/4);if(null==r)return null;var n=this.doPrivate(r);if(null==n)return null;var s=n.toString(16);return 0==(1&s.length)?s:\"0\"+s},t.prototype.verify=function(t,e,i){var r=parseBigInt(e,16),n=this.doPublic(r);return null==n?null:removeDigestHeader(n.toString(16).replace(/^1f+00/,\"\"))==i(t).toString()},t}();function pkcs1unpad2(t,e){for(var i=t.toByteArray(),r=0;r<i.length&&0==i[r];)++r;if(i.length-r!=e-1||2!=i[r])return null;for(++r;0!=i[r];)if(++r>=i.length)return null;for(var n=\"\";++r<i.length;){var s=255&i[r];s<128?n+=String.fromCharCode(s):s>191&&s<224?(n+=String.fromCharCode((31&s)<<6|63&i[r+1]),++r):(n+=String.fromCharCode((15&s)<<12|(63&i[r+1])<<6|63&i[r+2]),r+=2)}return n}var DIGEST_HEADERS={md2:\"3020300c06082a864886f70d020205000410\",md5:\"3020300c06082a864886f70d020505000410\",sha1:\"3021300906052b0e03021a05000414\",sha224:\"302d300d06096086480165030402040500041c\",sha256:\"3031300d060960864801650304020105000420\",sha384:\"3041300d060960864801650304020205000430\",sha512:\"3051300d060960864801650304020305000440\",ripemd160:\"3021300906052b2403020105000414\"};function getDigestHeader(t){return DIGEST_HEADERS[t]||\"\"}function removeDigestHeader(t){for(var e in DIGEST_HEADERS)if(DIGEST_HEADERS.hasOwnProperty(e)){var i=DIGEST_HEADERS[e],r=i.length;if(t.substr(0,r)==i)return t.substr(r)}return t}var YAHOO={};YAHOO.lang={extend:function(t,e,i){if(!e||!t)throw new Error(\"YAHOO.lang.extend failed, please check that all dependencies are included.\");var r,n=function(){};if(n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t,t.superclass=e.prototype,e.prototype.constructor==Object.prototype.constructor&&(e.prototype.constructor=e),i)for(r in i)t.prototype[r]=i[r]}};var KJUR={};void 0!==KJUR.asn1&&KJUR.asn1||(KJUR.asn1={}),KJUR.asn1.ASN1Util=new function(){this.integerToByteHex=function(t){var e=t.toString(16);return e.length%2==1&&(e=\"0\"+e),e},this.bigIntToMinTwosComplementsHex=function(t){var e=t.toString(16);if(\"-\"!=e.substr(0,1))e.length%2==1?e=\"0\"+e:e.match(/^[0-7]/)||(e=\"00\"+e);else{var i=e.substr(1).length;i%2==1?i+=1:e.match(/^[0-7]/)||(i+=2);for(var r=\"\",n=0;n<i;n++)r+=\"f\";e=new BigInteger(r,16).xor(t).add(BigInteger.ONE).toString(16).replace(/^-/,\"\")}return e},this.getPEMStringFromHex=function(t,e){return hextopem(t,e)},this.newObject=function(t){var e=KJUR.asn1,i=e.DERBoolean,r=e.DERInteger,n=e.DERBitString,s=e.DEROctetString,o=e.DERNull,h=e.DERObjectIdentifier,a=e.DEREnumerated,u=e.DERUTF8String,c=e.DERNumericString,f=e.DERPrintableString,p=e.DERTeletexString,l=e.DERIA5String,g=e.DERUTCTime,d=e.DERGeneralizedTime,m=e.DERSequence,v=e.DERSet,y=e.DERTaggedObject,b=e.ASN1Util.newObject,S=Object.keys(t);if(1!=S.length)throw\"key of param shall be only one.\";var T=S[0];if(-1==\":bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:seq:set:tag:\".indexOf(\":\"+T+\":\"))throw\"undefined key: \"+T;if(\"bool\"==T)return new i(t[T]);if(\"int\"==T)return new r(t[T]);if(\"bitstr\"==T)return new n(t[T]);if(\"octstr\"==T)return new s(t[T]);if(\"null\"==T)return new o(t[T]);if(\"oid\"==T)return new h(t[T]);if(\"enum\"==T)return new a(t[T]);if(\"utf8str\"==T)return new u(t[T]);if(\"numstr\"==T)return new c(t[T]);if(\"prnstr\"==T)return new f(t[T]);if(\"telstr\"==T)return new p(t[T]);if(\"ia5str\"==T)return new l(t[T]);if(\"utctime\"==T)return new g(t[T]);if(\"gentime\"==T)return new d(t[T]);if(\"seq\"==T){for(var R=t[T],E=[],D=0;D<R.length;D++){var B=b(R[D]);E.push(B)}return new m({array:E})}if(\"set\"==T){for(R=t[T],E=[],D=0;D<R.length;D++){B=b(R[D]);E.push(B)}return new v({array:E})}if(\"tag\"==T){var w=t[T];if(\"[object Array]\"===Object.prototype.toString.call(w)&&3==w.length){var I=b(w[2]);return new y({tag:w[0],explicit:w[1],obj:I})}var x={};if(void 0!==w.explicit&&(x.explicit=w.explicit),void 0!==w.tag&&(x.tag=w.tag),void 0===w.obj)throw\"obj shall be specified for 'tag'.\";return x.obj=b(w.obj),new y(x)}},this.jsonToASN1HEX=function(t){return this.newObject(t).getEncodedHex()}},KJUR.asn1.ASN1Util.oidHexToInt=function(t){for(var e=\"\",i=parseInt(t.substr(0,2),16),r=(e=Math.floor(i/40)+\".\"+i%40,\"\"),n=2;n<t.length;n+=2){var s=(\"00000000\"+parseInt(t.substr(n,2),16).toString(2)).slice(-8);if(r+=s.substr(1,7),\"0\"==s.substr(0,1))e=e+\".\"+new BigInteger(r,2).toString(10),r=\"\"}return e},KJUR.asn1.ASN1Util.oidIntToHex=function(t){var e=function(t){var e=t.toString(16);return 1==e.length&&(e=\"0\"+e),e},i=function(t){var i=\"\",r=new BigInteger(t,10).toString(2),n=7-r.length%7;7==n&&(n=0);for(var s=\"\",o=0;o<n;o++)s+=\"0\";r=s+r;for(o=0;o<r.length-1;o+=7){var h=r.substr(o,7);o!=r.length-7&&(h=\"1\"+h),i+=e(parseInt(h,2))}return i};if(!t.match(/^[0-9.]+$/))throw\"malformed oid string: \"+t;var r=\"\",n=t.split(\".\"),s=40*parseInt(n[0])+parseInt(n[1]);r+=e(s),n.splice(0,2);for(var o=0;o<n.length;o++)r+=i(n[o]);return r},KJUR.asn1.ASN1Object=function(){this.getLengthHexFromValue=function(){if(void 0===this.hV||null==this.hV)throw\"this.hV is null or undefined.\";if(this.hV.length%2==1)throw\"value hex must be even length: n=\"+\"\".length+\",v=\"+this.hV;var t=this.hV.length/2,e=t.toString(16);if(e.length%2==1&&(e=\"0\"+e),t<128)return e;var i=e.length/2;if(i>15)throw\"ASN.1 length too long to represent by 8x: n = \"+t.toString(16);return(128+i).toString(16)+e},this.getEncodedHex=function(){return(null==this.hTLV||this.isModified)&&(this.hV=this.getFreshValueHex(),this.hL=this.getLengthHexFromValue(),this.hTLV=this.hT+this.hL+this.hV,this.isModified=!1),this.hTLV},this.getValueHex=function(){return this.getEncodedHex(),this.hV},this.getFreshValueHex=function(){return\"\"}},KJUR.asn1.DERAbstractString=function(t){KJUR.asn1.DERAbstractString.superclass.constructor.call(this),this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=stohex(this.s)},this.setStringHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(\"string\"==typeof t?this.setString(t):void 0!==t.str?this.setString(t.str):void 0!==t.hex&&this.setStringHex(t.hex))},YAHOO.lang.extend(KJUR.asn1.DERAbstractString,KJUR.asn1.ASN1Object),KJUR.asn1.DERAbstractTime=function(t){KJUR.asn1.DERAbstractTime.superclass.constructor.call(this),this.localDateToUTC=function(t){return utc=t.getTime()+6e4*t.getTimezoneOffset(),new Date(utc)},this.formatDate=function(t,e,i){var r=this.zeroPadding,n=this.localDateToUTC(t),s=String(n.getFullYear());\"utc\"==e&&(s=s.substr(2,2));var o=s+r(String(n.getMonth()+1),2)+r(String(n.getDate()),2)+r(String(n.getHours()),2)+r(String(n.getMinutes()),2)+r(String(n.getSeconds()),2);if(!0===i){var h=n.getMilliseconds();if(0!=h){var a=r(String(h),3);o=o+\".\"+(a=a.replace(/[0]+$/,\"\"))}}return o+\"Z\"},this.zeroPadding=function(t,e){return t.length>=e?t:new Array(e-t.length+1).join(\"0\")+t},this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=stohex(t)},this.setByDateValue=function(t,e,i,r,n,s){var o=new Date(Date.UTC(t,e-1,i,r,n,s,0));this.setByDate(o)},this.getFreshValueHex=function(){return this.hV}},YAHOO.lang.extend(KJUR.asn1.DERAbstractTime,KJUR.asn1.ASN1Object),KJUR.asn1.DERAbstractStructured=function(t){KJUR.asn1.DERAbstractString.superclass.constructor.call(this),this.setByASN1ObjectArray=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array=t},this.appendASN1Object=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array.push(t)},this.asn1Array=new Array,void 0!==t&&void 0!==t.array&&(this.asn1Array=t.array)},YAHOO.lang.extend(KJUR.asn1.DERAbstractStructured,KJUR.asn1.ASN1Object),KJUR.asn1.DERBoolean=function(){KJUR.asn1.DERBoolean.superclass.constructor.call(this),this.hT=\"01\",this.hTLV=\"0101ff\"},YAHOO.lang.extend(KJUR.asn1.DERBoolean,KJUR.asn1.ASN1Object),KJUR.asn1.DERInteger=function(t){KJUR.asn1.DERInteger.superclass.constructor.call(this),this.hT=\"02\",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new BigInteger(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.bigint?this.setByBigInteger(t.bigint):void 0!==t.int?this.setByInteger(t.int):\"number\"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},YAHOO.lang.extend(KJUR.asn1.DERInteger,KJUR.asn1.ASN1Object),KJUR.asn1.DERBitString=function(t){if(void 0!==t&&void 0!==t.obj){var e=KJUR.asn1.ASN1Util.newObject(t.obj);t.hex=\"00\"+e.getEncodedHex()}KJUR.asn1.DERBitString.superclass.constructor.call(this),this.hT=\"03\",this.setHexValueIncludingUnusedBits=function(t){this.hTLV=null,this.isModified=!0,this.hV=t},this.setUnusedBitsAndHexValue=function(t,e){if(t<0||7<t)throw\"unused bits shall be from 0 to 7: u = \"+t;var i=\"0\"+t;this.hTLV=null,this.isModified=!0,this.hV=i+e},this.setByBinaryString=function(t){var e=8-(t=t.replace(/0+$/,\"\")).length%8;8==e&&(e=0);for(var i=0;i<=e;i++)t+=\"0\";var r=\"\";for(i=0;i<t.length-1;i+=8){var n=t.substr(i,8),s=parseInt(n,2).toString(16);1==s.length&&(s=\"0\"+s),r+=s}this.hTLV=null,this.isModified=!0,this.hV=\"0\"+e+r},this.setByBooleanArray=function(t){for(var e=\"\",i=0;i<t.length;i++)1==t[i]?e+=\"1\":e+=\"0\";this.setByBinaryString(e)},this.newFalseArray=function(t){for(var e=new Array(t),i=0;i<t;i++)e[i]=!1;return e},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(\"string\"==typeof t&&t.toLowerCase().match(/^[0-9a-f]+$/)?this.setHexValueIncludingUnusedBits(t):void 0!==t.hex?this.setHexValueIncludingUnusedBits(t.hex):void 0!==t.bin?this.setByBinaryString(t.bin):void 0!==t.array&&this.setByBooleanArray(t.array))},YAHOO.lang.extend(KJUR.asn1.DERBitString,KJUR.asn1.ASN1Object),KJUR.asn1.DEROctetString=function(t){if(void 0!==t&&void 0!==t.obj){var e=KJUR.asn1.ASN1Util.newObject(t.obj);t.hex=e.getEncodedHex()}KJUR.asn1.DEROctetString.superclass.constructor.call(this,t),this.hT=\"04\"},YAHOO.lang.extend(KJUR.asn1.DEROctetString,KJUR.asn1.DERAbstractString),KJUR.asn1.DERNull=function(){KJUR.asn1.DERNull.superclass.constructor.call(this),this.hT=\"05\",this.hTLV=\"0500\"},YAHOO.lang.extend(KJUR.asn1.DERNull,KJUR.asn1.ASN1Object),KJUR.asn1.DERObjectIdentifier=function(t){var e=function(t){var e=t.toString(16);return 1==e.length&&(e=\"0\"+e),e},i=function(t){var i=\"\",r=new BigInteger(t,10).toString(2),n=7-r.length%7;7==n&&(n=0);for(var s=\"\",o=0;o<n;o++)s+=\"0\";r=s+r;for(o=0;o<r.length-1;o+=7){var h=r.substr(o,7);o!=r.length-7&&(h=\"1\"+h),i+=e(parseInt(h,2))}return i};KJUR.asn1.DERObjectIdentifier.superclass.constructor.call(this),this.hT=\"06\",this.setValueHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.setValueOidString=function(t){if(!t.match(/^[0-9.]+$/))throw\"malformed oid string: \"+t;var r=\"\",n=t.split(\".\"),s=40*parseInt(n[0])+parseInt(n[1]);r+=e(s),n.splice(0,2);for(var o=0;o<n.length;o++)r+=i(n[o]);this.hTLV=null,this.isModified=!0,this.s=null,this.hV=r},this.setValueName=function(t){var e=KJUR.asn1.x509.OID.name2oid(t);if(\"\"===e)throw\"DERObjectIdentifier oidName undefined: \"+t;this.setValueOidString(e)},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(\"string\"==typeof t?t.match(/^[0-2].[0-9.]+$/)?this.setValueOidString(t):this.setValueName(t):void 0!==t.oid?this.setValueOidString(t.oid):void 0!==t.hex?this.setValueHex(t.hex):void 0!==t.name&&this.setValueName(t.name))},YAHOO.lang.extend(KJUR.asn1.DERObjectIdentifier,KJUR.asn1.ASN1Object),KJUR.asn1.DEREnumerated=function(t){KJUR.asn1.DEREnumerated.superclass.constructor.call(this),this.hT=\"0a\",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new BigInteger(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.int?this.setByInteger(t.int):\"number\"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},YAHOO.lang.extend(KJUR.asn1.DEREnumerated,KJUR.asn1.ASN1Object),KJUR.asn1.DERUTF8String=function(t){KJUR.asn1.DERUTF8String.superclass.constructor.call(this,t),this.hT=\"0c\"},YAHOO.lang.extend(KJUR.asn1.DERUTF8String,KJUR.asn1.DERAbstractString),KJUR.asn1.DERNumericString=function(t){KJUR.asn1.DERNumericString.superclass.constructor.call(this,t),this.hT=\"12\"},YAHOO.lang.extend(KJUR.asn1.DERNumericString,KJUR.asn1.DERAbstractString),KJUR.asn1.DERPrintableString=function(t){KJUR.asn1.DERPrintableString.superclass.constructor.call(this,t),this.hT=\"13\"},YAHOO.lang.extend(KJUR.asn1.DERPrintableString,KJUR.asn1.DERAbstractString),KJUR.asn1.DERTeletexString=function(t){KJUR.asn1.DERTeletexString.superclass.constructor.call(this,t),this.hT=\"14\"},YAHOO.lang.extend(KJUR.asn1.DERTeletexString,KJUR.asn1.DERAbstractString),KJUR.asn1.DERIA5String=function(t){KJUR.asn1.DERIA5String.superclass.constructor.call(this,t),this.hT=\"16\"},YAHOO.lang.extend(KJUR.asn1.DERIA5String,KJUR.asn1.DERAbstractString),KJUR.asn1.DERUTCTime=function(t){KJUR.asn1.DERUTCTime.superclass.constructor.call(this,t),this.hT=\"17\",this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,\"utc\"),this.hV=stohex(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,\"utc\"),this.hV=stohex(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):\"string\"==typeof t&&t.match(/^[0-9]{12}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date))},YAHOO.lang.extend(KJUR.asn1.DERUTCTime,KJUR.asn1.DERAbstractTime),KJUR.asn1.DERGeneralizedTime=function(t){KJUR.asn1.DERGeneralizedTime.superclass.constructor.call(this,t),this.hT=\"18\",this.withMillis=!1,this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,\"gen\",this.withMillis),this.hV=stohex(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,\"gen\",this.withMillis),this.hV=stohex(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):\"string\"==typeof t&&t.match(/^[0-9]{14}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date),!0===t.millis&&(this.withMillis=!0))},YAHOO.lang.extend(KJUR.asn1.DERGeneralizedTime,KJUR.asn1.DERAbstractTime),KJUR.asn1.DERSequence=function(t){KJUR.asn1.DERSequence.superclass.constructor.call(this,t),this.hT=\"30\",this.getFreshValueHex=function(){for(var t=\"\",e=0;e<this.asn1Array.length;e++){t+=this.asn1Array[e].getEncodedHex()}return this.hV=t,this.hV}},YAHOO.lang.extend(KJUR.asn1.DERSequence,KJUR.asn1.DERAbstractStructured),KJUR.asn1.DERSet=function(t){KJUR.asn1.DERSet.superclass.constructor.call(this,t),this.hT=\"31\",this.sortFlag=!0,this.getFreshValueHex=function(){for(var t=new Array,e=0;e<this.asn1Array.length;e++){var i=this.asn1Array[e];t.push(i.getEncodedHex())}return 1==this.sortFlag&&t.sort(),this.hV=t.join(\"\"),this.hV},void 0!==t&&void 0!==t.sortflag&&0==t.sortflag&&(this.sortFlag=!1)},YAHOO.lang.extend(KJUR.asn1.DERSet,KJUR.asn1.DERAbstractStructured),KJUR.asn1.DERTaggedObject=function(t){KJUR.asn1.DERTaggedObject.superclass.constructor.call(this),this.hT=\"a0\",this.hV=\"\",this.isExplicit=!0,this.asn1Object=null,this.setASN1Object=function(t,e,i){this.hT=e,this.isExplicit=t,this.asn1Object=i,this.isExplicit?(this.hV=this.asn1Object.getEncodedHex(),this.hTLV=null,this.isModified=!0):(this.hV=null,this.hTLV=i.getEncodedHex(),this.hTLV=this.hTLV.replace(/^../,e),this.isModified=!1)},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.tag&&(this.hT=t.tag),void 0!==t.explicit&&(this.isExplicit=t.explicit),void 0!==t.obj&&(this.asn1Object=t.obj,this.setASN1Object(this.isExplicit,this.hT,this.asn1Object)))},YAHOO.lang.extend(KJUR.asn1.DERTaggedObject,KJUR.asn1.ASN1Object);var JSEncryptRSAKey=function(t){function e(i){var r=t.call(this)||this;return i&&(\"string\"==typeof i?r.parseKey(i):(e.hasPrivateKeyProperty(i)||e.hasPublicKeyProperty(i))&&r.parsePropertiesFrom(i)),r}return __extends(e,t),e.prototype.parseKey=function(t){try{var e=0,i=0,r=/^\\s*(?:[0-9A-Fa-f][0-9A-Fa-f]\\s*)+$/.test(t)?Hex.decode(t):Base64.unarmor(t),n=ASN1.decode(r);if(3===n.sub.length&&(n=n.sub[2].sub[0]),9===n.sub.length){e=n.sub[1].getHexStringValue(),this.n=parseBigInt(e,16),i=n.sub[2].getHexStringValue(),this.e=parseInt(i,16);var s=n.sub[3].getHexStringValue();this.d=parseBigInt(s,16);var o=n.sub[4].getHexStringValue();this.p=parseBigInt(o,16);var h=n.sub[5].getHexStringValue();this.q=parseBigInt(h,16);var a=n.sub[6].getHexStringValue();this.dmp1=parseBigInt(a,16);var u=n.sub[7].getHexStringValue();this.dmq1=parseBigInt(u,16);var c=n.sub[8].getHexStringValue();this.coeff=parseBigInt(c,16)}else{if(2!==n.sub.length)return!1;var f=n.sub[1].sub[0];e=f.sub[0].getHexStringValue(),this.n=parseBigInt(e,16),i=f.sub[1].getHexStringValue(),this.e=parseInt(i,16)}return!0}catch(t){return!1}},e.prototype.getPrivateBaseKey=function(){var t={array:[new KJUR.asn1.DERInteger({int:0}),new KJUR.asn1.DERInteger({bigint:this.n}),new KJUR.asn1.DERInteger({int:this.e}),new KJUR.asn1.DERInteger({bigint:this.d}),new KJUR.asn1.DERInteger({bigint:this.p}),new KJUR.asn1.DERInteger({bigint:this.q}),new KJUR.asn1.DERInteger({bigint:this.dmp1}),new KJUR.asn1.DERInteger({bigint:this.dmq1}),new KJUR.asn1.DERInteger({bigint:this.coeff})]};return new KJUR.asn1.DERSequence(t).getEncodedHex()},e.prototype.getPrivateBaseKeyB64=function(){return hex2b64(this.getPrivateBaseKey())},e.prototype.getPublicBaseKey=function(){var t=new KJUR.asn1.DERSequence({array:[new KJUR.asn1.DERObjectIdentifier({oid:\"1.2.840.113549.1.1.1\"}),new KJUR.asn1.DERNull]}),e=new KJUR.asn1.DERSequence({array:[new KJUR.asn1.DERInteger({bigint:this.n}),new KJUR.asn1.DERInteger({int:this.e})]}),i=new KJUR.asn1.DERBitString({hex:\"00\"+e.getEncodedHex()});return new KJUR.asn1.DERSequence({array:[t,i]}).getEncodedHex()},e.prototype.getPublicBaseKeyB64=function(){return hex2b64(this.getPublicBaseKey())},e.wordwrap=function(t,e){if(!t)return t;var i=\"(.{1,\"+(e=e||64)+\"})( +|$\\n?)|(.{1,\"+e+\"})\";return t.match(RegExp(i,\"g\")).join(\"\\n\")},e.prototype.getPrivateKey=function(){var t=\"-----BEGIN\"+\" RSA \"+\"PRIVATE KEY-----\\n\";return t+=e.wordwrap(this.getPrivateBaseKeyB64())+\"\\n\",t+=\"-----END \"+\"RSA PRIVATE KEY-----\"},e.prototype.getPublicKey=function(){var t=\"-----BEGIN PUBLIC KEY-----\\n\";return t+=e.wordwrap(this.getPublicBaseKeyB64())+\"\\n\",t+=\"-----END PUBLIC KEY-----\"},e.hasPublicKeyProperty=function(t){return(t=t||{}).hasOwnProperty(\"n\")&&t.hasOwnProperty(\"e\")},e.hasPrivateKeyProperty=function(t){return(t=t||{}).hasOwnProperty(\"n\")&&t.hasOwnProperty(\"e\")&&t.hasOwnProperty(\"d\")&&t.hasOwnProperty(\"p\")&&t.hasOwnProperty(\"q\")&&t.hasOwnProperty(\"dmp1\")&&t.hasOwnProperty(\"dmq1\")&&t.hasOwnProperty(\"coeff\")},e.prototype.parsePropertiesFrom=function(t){this.n=t.n,this.e=t.e,t.hasOwnProperty(\"d\")&&(this.d=t.d,this.p=t.p,this.q=t.q,this.dmp1=t.dmp1,this.dmq1=t.dmq1,this.coeff=t.coeff)},e}(RSAKey);function JSEncrypt(){return this}JSEncrypt.prototype.setKey=function(t){this.log&&this.key&&console.warn(\"A key was already set, overriding existing.\"),this.key=new JSEncryptRSAKey(t)},JSEncrypt.prototype.setPrivateKey=function(t){this.setKey(t)},JSEncrypt.prototype.setPublicKey=function(t){this.setKey(t)},JSEncrypt.prototype.decrypt=function(t){try{return this.getKey().decrypt(b64tohex(t))}catch(t){return!1}},JSEncrypt.prototype.encrypt=function(t){try{return hex2b64(this.getKey().encrypt(t))}catch(t){return!1}},JSEncrypt.prototype.sign=function(t,e,i){try{return hex2b64(this.getKey().sign(t,e,i))}catch(t){return!1}},JSEncrypt.prototype.verify=function(t,e,i){try{return this.getKey().verify(t,b64tohex(e),i)}catch(t){return!1}},JSEncrypt.prototype.getKey=function(t){if(!this.key){if(this.key=new JSEncryptRSAKey,t&&\"[object Function]\"==={}.toString.call(t))return void this.key.generateAsync(this.default_key_size,this.default_public_exponent,t);this.key.generate(this.default_key_size,this.default_public_exponent)}return this.key},JSEncrypt.prototype.getPrivateKey=function(){return this.getKey().getPrivateKey()},JSEncrypt.prototype.getPrivateKeyB64=function(){return this.getKey().getPrivateBaseKeyB64()},JSEncrypt.prototype.getPublicKey=function(){return this.getKey().getPublicKey()},JSEncrypt.prototype.getPublicKeyB64=function(){return this.getKey().getPublicBaseKeyB64()},JSEncrypt.version=\"3.0.0-rc.1\";",
									"",
									"/*",
									"* JWT generation code extracted from",
									"* https://developers.symphony.com/restapi/docs/rsa-bot-authentication-workflow#section-generate-a-signed-jwt",
									"* Modified to use JSEncrypt and CryptoJS to be compatible with Postman",
									"*/",
									"let jse = new JSEncrypt();",
									"let crypto = require('crypto-js');",
									"",
									"function base64urlEncode(str) {",
									"    return new Buffer(str).toString('base64').replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');",
									"}",
									"function Jwt(username, signingKey) {",
									"    this.header = { typ: 'JWT', alg: 'RS512' };",
									"    this.body = {",
									"        sub: username,",
									"        exp: (Math.floor(new Date().getTime() / 1000) + (5 * 60))",
									"    };",
									"    this.signingKey = signingKey;",
									"    return this;",
									"}",
									"Jwt.prototype.sign = function sign(payload, cryptoInput) {",
									"    jse.setPrivateKey(cryptoInput);",
									"    let buffer = jse.sign(payload, crypto.SHA512, \"sha512\");",
									"    return buffer;",
									"};",
									"Jwt.prototype.compact = function compact() {",
									"    let segments = [];",
									"    segments.push(base64urlEncode(JSON.stringify(this.header)));",
									"    segments.push(base64urlEncode(JSON.stringify(this.body)));",
									"    this.signature = this.sign(segments.join('.'), this.signingKey);",
									"    segments.push(this.signature);",
									"    return segments.join('.');",
									"};",
									"const jwt = new Jwt(pm.environment.get(\"appName\"), pm.environment.get(\"appKey\"));",
									"const jws = jwt.compact();",
									"pm.environment.set(\"appToken\", jws);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"token\":\"{{appToken}}\"}"
						},
						"url": {
							"raw": "https://{{sessionAuthUrl}}/login/pubkey/app/authenticate",
							"protocol": "https",
							"host": [
								"{{sessionAuthUrl}}"
							],
							"path": [
								"login",
								"pubkey",
								"app",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "RSA App User Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"sessionToken\", pm.response.json().token);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "sessiontoken",
								"value": "{{appToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{sessionAuthUrl}}/login/pubkey/app/username/:username/authenticate",
							"protocol": "https",
							"host": [
								"{{sessionAuthUrl}}"
							],
							"path": [
								"login",
								"pubkey",
								"app",
								"username",
								":username",
								"authenticate"
							],
							"variable": [
								{
									"key": "username",
									"value": "yong.tan"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Cert Session Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"sessionToken\", pm.response.json().token);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"token\":\"{{jwt}}\"}"
						},
						"url": {
							"raw": "https://{{certSessionAuthUrl}}/sessionauth/v1/authenticate",
							"protocol": "https",
							"host": [
								"{{certSessionAuthUrl}}"
							],
							"path": [
								"sessionauth",
								"v1",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cert KeyMan Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"keyManToken\", pm.response.json().token);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"token\":\"{{jwt}}\"}"
						},
						"url": {
							"raw": "https://{{certKeyManAuthUrl}}/keyauth/v1/authenticate",
							"protocol": "https",
							"host": [
								"{{certKeyManAuthUrl}}"
							],
							"path": [
								"keyauth",
								"v1",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Common Access JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var json = pm.response.json();",
									"",
									"pm.environment.set(\"commonJwt\",json.access_token );"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/login/idm/tokens?scope=",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"login",
								"idm",
								"tokens"
							],
							"query": [
								{
									"key": "scope",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Basics",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{agentUrl}}/agent/v3/health",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v3",
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "Health Check Extended",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{agentUrl}}/agent/v3/health/extended",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v3",
								"health",
								"extended"
							]
						},
						"description": "For troubleshooting purpose"
					},
					"response": []
				},
				{
					"name": "Session Info",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v2/sessioninfo",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v2",
								"sessioninfo"
							]
						}
					},
					"response": []
				},
				{
					"name": "Agent Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{agentUrl}}/agent/v1/info",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v1",
								"info"
							]
						}
					},
					"response": []
				},
				{
					"name": "Echo",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "sessionToken",
								"type": "text",
								"value": "{{sessionToken}}"
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"message\": \"Hello World\"\n}"
						},
						"url": {
							"raw": "https://{{agentUrl}}/agent/v1/util/echo",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v1",
								"util",
								"echo"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Messages",
			"item": [
				{
					"name": "Import messages from other systems into Symphony.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"message\": \"message74\",\r\n    \"data\": \"data74\",\r\n    \"intendedMessageTimestamp\": 192,\r\n    \"intendedMessageFromUserId\": 192,\r\n    \"originatingSystemId\": \"originatingSystemId74\",\r\n    \"originalMessageId\": \"originalMessageId74\",\r\n    \"streamId\": \"streamId74\"\r\n  }\r\n]"
						},
						"url": {
							"raw": "https://{{agentUrl}}/agent/v4/message/import",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v4",
								"message",
								"import"
							]
						},
						"description": "Sends a message to be imported into the system.\nAllows you to override the timestamp and author of the message with your desired values.\nThe requesting user must have the Content Management role.\nThe user that the message is intended to have come from must also be present in the conversation.\nThe intended message timestamp must be a valid time from the past. It cannot be a future timestamp.\nOptionally the original message ID can be specified to identify the imported message for the purpose of repeat imports.\n"
					},
					"response": [
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"message\": \"message74\",\r\n    \"data\": \"data74\",\r\n    \"intendedMessageTimestamp\": 192,\r\n    \"intendedMessageFromUserId\": 192,\r\n    \"originatingSystemId\": \"originatingSystemId74\",\r\n    \"originalMessageId\": \"originalMessageId74\",\r\n    \"streamId\": \"streamId74\"\r\n  }\r\n]"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v4/message/import",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v4",
										"message",
										"import"
									]
								},
								"description": "Sends a message to be imported into the system.\nAllows you to override the timestamp and author of the message with your desired values.\nThe requesting user must have the Content Management role.\nThe user that the message is intended to have come from must also be present in the conversation.\nThe intended message timestamp must be a valid time from the past. It cannot be a future timestamp.\nOptionally the original message ID can be specified to identify the imported message for the purpose of repeat imports.\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"message\": \"message74\",\r\n    \"data\": \"data74\",\r\n    \"intendedMessageTimestamp\": 192,\r\n    \"intendedMessageFromUserId\": 192,\r\n    \"originatingSystemId\": \"originatingSystemId74\",\r\n    \"originalMessageId\": \"originalMessageId74\",\r\n    \"streamId\": \"streamId74\"\r\n  }\r\n]"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v4/message/import",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v4",
										"message",
										"import"
									]
								},
								"description": "Sends a message to be imported into the system.\nAllows you to override the timestamp and author of the message with your desired values.\nThe requesting user must have the Content Management role.\nThe user that the message is intended to have come from must also be present in the conversation.\nThe intended message timestamp must be a valid time from the past. It cannot be a future timestamp.\nOptionally the original message ID can be specified to identify the imported message for the purpose of repeat imports.\n"
							},
							"status": "Message sent.",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  {\r\n    \"messageId\": \"messageId74\",\r\n    \"originatingSystemId\": \"originatingSystemId74\",\r\n    \"originalMessageId\": \"originalMessageId74\",\r\n    \"diagnostic\": \"diagnostic74\"\r\n  }\r\n]"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"message\": \"message74\",\r\n    \"data\": \"data74\",\r\n    \"intendedMessageTimestamp\": 192,\r\n    \"intendedMessageFromUserId\": 192,\r\n    \"originatingSystemId\": \"originatingSystemId74\",\r\n    \"originalMessageId\": \"originalMessageId74\",\r\n    \"streamId\": \"streamId74\"\r\n  }\r\n]"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v4/message/import",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v4",
										"message",
										"import"
									]
								},
								"description": "Sends a message to be imported into the system.\nAllows you to override the timestamp and author of the message with your desired values.\nThe requesting user must have the Content Management role.\nThe user that the message is intended to have come from must also be present in the conversation.\nThe intended message timestamp must be a valid time from the past. It cannot be a future timestamp.\nOptionally the original message ID can be specified to identify the imported message for the purpose of repeat imports.\n"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"message\": \"message74\",\r\n    \"data\": \"data74\",\r\n    \"intendedMessageTimestamp\": 192,\r\n    \"intendedMessageFromUserId\": 192,\r\n    \"originatingSystemId\": \"originatingSystemId74\",\r\n    \"originalMessageId\": \"originalMessageId74\",\r\n    \"streamId\": \"streamId74\"\r\n  }\r\n]"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v4/message/import",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v4",
										"message",
										"import"
									]
								},
								"description": "Sends a message to be imported into the system.\nAllows you to override the timestamp and author of the message with your desired values.\nThe requesting user must have the Content Management role.\nThe user that the message is intended to have come from must also be present in the conversation.\nThe intended message timestamp must be a valid time from the past. It cannot be a future timestamp.\nOptionally the original message ID can be specified to identify the imported message for the purpose of repeat imports.\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"message\": \"message74\",\r\n    \"data\": \"data74\",\r\n    \"intendedMessageTimestamp\": 192,\r\n    \"intendedMessageFromUserId\": 192,\r\n    \"originatingSystemId\": \"originatingSystemId74\",\r\n    \"originalMessageId\": \"originalMessageId74\",\r\n    \"streamId\": \"streamId74\"\r\n  }\r\n]"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v4/message/import",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v4",
										"message",
										"import"
									]
								},
								"description": "Sends a message to be imported into the system.\nAllows you to override the timestamp and author of the message with your desired values.\nThe requesting user must have the Content Management role.\nThe user that the message is intended to have come from must also be present in the conversation.\nThe intended message timestamp must be a valid time from the past. It cannot be a future timestamp.\nOptionally the original message ID can be specified to identify the imported message for the purpose of repeat imports.\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						}
					]
				},
				{
					"name": "Get a message by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{agentUrl}}/agent/v1/message/:id",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v1",
								"message",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "id"
								}
							]
						},
						"description": "Get a message by ID"
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/message/:id",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"message",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "id90"
										}
									]
								},
								"description": "Get a message by ID"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/message/:id",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"message",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "id90"
										}
									]
								},
								"description": "Get a message by ID"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/message/:id",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"message",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "id90"
										}
									]
								},
								"description": "Get a message by ID"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"messageId\": \"messageId74\",\r\n  \"timestamp\": 192,\r\n  \"message\": \"message74\",\r\n  \"data\": \"data74\",\r\n  \"attachments\": [\r\n    {\r\n      \"id\": \"id74\",\r\n      \"name\": \"name74\",\r\n      \"size\": 192,\r\n      \"images\": [\r\n        {\r\n          \"id\": \"id74\",\r\n          \"dimension\": \"dimension74\"\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"user\": {\r\n    \"userId\": 192,\r\n    \"firstName\": \"firstName74\",\r\n    \"lastName\": \"lastName74\",\r\n    \"displayName\": \"displayName74\",\r\n    \"email\": \"email74\",\r\n    \"username\": \"username74\"\r\n  },\r\n  \"stream\": {\r\n    \"streamId\": \"streamId74\",\r\n    \"streamType\": \"streamType74\",\r\n    \"roomName\": \"roomName74\",\r\n    \"members\": [\r\n      {\r\n        \"userId\": 192,\r\n        \"firstName\": \"firstName74\",\r\n        \"lastName\": \"lastName74\",\r\n        \"displayName\": \"displayName74\",\r\n        \"email\": \"email74\",\r\n        \"username\": \"username74\"\r\n      }\r\n    ],\r\n    \"external\": false,\r\n    \"crossPod\": false\r\n  },\r\n  \"externalRecipients\": false,\r\n  \"diagnostic\": \"diagnostic74\",\r\n  \"userAgent\": \"userAgent74\",\r\n  \"originalFormat\": \"originalFormat74\",\r\n  \"disclaimer\": \"disclaimer74\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/message/:id",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"message",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "id90"
										}
									]
								},
								"description": "Get a message by ID"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/message/:id",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"message",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "id90"
										}
									]
								},
								"description": "Get a message by ID"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						}
					]
				},
				{
					"name": "Search messages",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{agentUrl}}/agent/v1/message/search?query=query&skip=0&limit=32&scope=scope&sortDir=sortDir",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v1",
								"message",
								"search"
							],
							"query": [
								{
									"key": "query",
									"value": "query"
								},
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "32"
								},
								{
									"key": "scope",
									"value": "scope"
								},
								{
									"key": "sortDir",
									"value": "sortDir"
								}
							]
						},
						"description": "Search messages according to the specified criteria. The \"query\" parameter takes a search query defined as\n\"field:value\" pairs combined by the operator \"AND\" (e.g. \"text:foo AND autor:bar\"). Supported fields are\n (case-insensitive): \"text\", \"author\", \"hashtag\", \"cashtag\", \"mention\", \"signal\", \"fromDate\", \"toDate\",\n \"streamId\", \"streamType\".\n \"text\" search requires a \"streamId\" to be specified.\n \"streamType\" accepts one of the following values: \"chat\" (IMs and MIMs), \"im\", \"mim\", \"chatroom\", \"post\".\n \"signal\" queries can only be combined with \"fromDate\", \"toDate\", \"skip\" and \"limit\" parameters.\n"
					},
					"response": [
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/message/search?query=query90&skip=233&limit=233&scope=scope90&sortDir=sortDir90",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"message",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "query90"
										},
										{
											"key": "skip",
											"value": "233"
										},
										{
											"key": "limit",
											"value": "233"
										},
										{
											"key": "scope",
											"value": "scope90"
										},
										{
											"key": "sortDir",
											"value": "sortDir90"
										}
									]
								},
								"description": "Search messages according to the specified criteria. The \"query\" parameter takes a search query defined as\n\"field:value\" pairs combined by the operator \"AND\" (e.g. \"text:foo AND autor:bar\"). Supported fields are\n (case-insensitive): \"text\", \"author\", \"hashtag\", \"cashtag\", \"mention\", \"signal\", \"fromDate\", \"toDate\",\n \"streamId\", \"streamType\".\n \"text\" search requires a \"streamId\" to be specified.\n \"streamType\" accepts one of the following values: \"chat\" (IMs and MIMs), \"im\", \"mim\", \"chatroom\", \"post\".\n \"signal\" queries can only be combined with \"fromDate\", \"toDate\", \"skip\" and \"limit\" parameters.\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/message/search?query=query90&skip=233&limit=233&scope=scope90&sortDir=sortDir90",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"message",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "query90"
										},
										{
											"key": "skip",
											"value": "233"
										},
										{
											"key": "limit",
											"value": "233"
										},
										{
											"key": "scope",
											"value": "scope90"
										},
										{
											"key": "sortDir",
											"value": "sortDir90"
										}
									]
								},
								"description": "Search messages according to the specified criteria. The \"query\" parameter takes a search query defined as\n\"field:value\" pairs combined by the operator \"AND\" (e.g. \"text:foo AND autor:bar\"). Supported fields are\n (case-insensitive): \"text\", \"author\", \"hashtag\", \"cashtag\", \"mention\", \"signal\", \"fromDate\", \"toDate\",\n \"streamId\", \"streamType\".\n \"text\" search requires a \"streamId\" to be specified.\n \"streamType\" accepts one of the following values: \"chat\" (IMs and MIMs), \"im\", \"mim\", \"chatroom\", \"post\".\n \"signal\" queries can only be combined with \"fromDate\", \"toDate\", \"skip\" and \"limit\" parameters.\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/message/search?query=query90&skip=233&limit=233&scope=scope90&sortDir=sortDir90",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"message",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "query90"
										},
										{
											"key": "skip",
											"value": "233"
										},
										{
											"key": "limit",
											"value": "233"
										},
										{
											"key": "scope",
											"value": "scope90"
										},
										{
											"key": "sortDir",
											"value": "sortDir90"
										}
									]
								},
								"description": "Search messages according to the specified criteria. The \"query\" parameter takes a search query defined as\n\"field:value\" pairs combined by the operator \"AND\" (e.g. \"text:foo AND autor:bar\"). Supported fields are\n (case-insensitive): \"text\", \"author\", \"hashtag\", \"cashtag\", \"mention\", \"signal\", \"fromDate\", \"toDate\",\n \"streamId\", \"streamType\".\n \"text\" search requires a \"streamId\" to be specified.\n \"streamType\" accepts one of the following values: \"chat\" (IMs and MIMs), \"im\", \"mim\", \"chatroom\", \"post\".\n \"signal\" queries can only be combined with \"fromDate\", \"toDate\", \"skip\" and \"limit\" parameters.\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/message/search?query=query90&skip=233&limit=233&scope=scope90&sortDir=sortDir90",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"message",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "query90"
										},
										{
											"key": "skip",
											"value": "233"
										},
										{
											"key": "limit",
											"value": "233"
										},
										{
											"key": "scope",
											"value": "scope90"
										},
										{
											"key": "sortDir",
											"value": "sortDir90"
										}
									]
								},
								"description": "Search messages according to the specified criteria. The \"query\" parameter takes a search query defined as\n\"field:value\" pairs combined by the operator \"AND\" (e.g. \"text:foo AND autor:bar\"). Supported fields are\n (case-insensitive): \"text\", \"author\", \"hashtag\", \"cashtag\", \"mention\", \"signal\", \"fromDate\", \"toDate\",\n \"streamId\", \"streamType\".\n \"text\" search requires a \"streamId\" to be specified.\n \"streamType\" accepts one of the following values: \"chat\" (IMs and MIMs), \"im\", \"mim\", \"chatroom\", \"post\".\n \"signal\" queries can only be combined with \"fromDate\", \"toDate\", \"skip\" and \"limit\" parameters.\n"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  {\r\n    \"messageId\": \"messageId74\",\r\n    \"timestamp\": 192,\r\n    \"message\": \"message74\",\r\n    \"data\": \"data74\",\r\n    \"attachments\": [\r\n      {\r\n        \"id\": \"id74\",\r\n        \"name\": \"name74\",\r\n        \"size\": 192,\r\n        \"images\": [\r\n          {\r\n            \"id\": \"id74\",\r\n            \"dimension\": \"dimension74\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"user\": {\r\n      \"userId\": 192,\r\n      \"firstName\": \"firstName74\",\r\n      \"lastName\": \"lastName74\",\r\n      \"displayName\": \"displayName74\",\r\n      \"email\": \"email74\",\r\n      \"username\": \"username74\"\r\n    },\r\n    \"stream\": {\r\n      \"streamId\": \"streamId74\",\r\n      \"streamType\": \"streamType74\",\r\n      \"roomName\": \"roomName74\",\r\n      \"members\": [\r\n        {\r\n          \"userId\": 192,\r\n          \"firstName\": \"firstName74\",\r\n          \"lastName\": \"lastName74\",\r\n          \"displayName\": \"displayName74\",\r\n          \"email\": \"email74\",\r\n          \"username\": \"username74\"\r\n        }\r\n      ],\r\n      \"external\": false,\r\n      \"crossPod\": false\r\n    },\r\n    \"externalRecipients\": false,\r\n    \"diagnostic\": \"diagnostic74\",\r\n    \"userAgent\": \"userAgent74\",\r\n    \"originalFormat\": \"originalFormat74\",\r\n    \"disclaimer\": \"disclaimer74\"\r\n  }\r\n]"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/message/search?query=query90&skip=233&limit=233&scope=scope90&sortDir=sortDir90",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"message",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "query90"
										},
										{
											"key": "skip",
											"value": "233"
										},
										{
											"key": "limit",
											"value": "233"
										},
										{
											"key": "scope",
											"value": "scope90"
										},
										{
											"key": "sortDir",
											"value": "sortDir90"
										}
									]
								},
								"description": "Search messages according to the specified criteria. The \"query\" parameter takes a search query defined as\n\"field:value\" pairs combined by the operator \"AND\" (e.g. \"text:foo AND autor:bar\"). Supported fields are\n (case-insensitive): \"text\", \"author\", \"hashtag\", \"cashtag\", \"mention\", \"signal\", \"fromDate\", \"toDate\",\n \"streamId\", \"streamType\".\n \"text\" search requires a \"streamId\" to be specified.\n \"streamType\" accepts one of the following values: \"chat\" (IMs and MIMs), \"im\", \"mim\", \"chatroom\", \"post\".\n \"signal\" queries can only be combined with \"fromDate\", \"toDate\", \"skip\" and \"limit\" parameters.\n"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						}
					]
				},
				{
					"name": "Search messages",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"text74\",\r\n  \"streamId\": \"streamId74\",\r\n  \"streamType\": \"streamType74\",\r\n  \"author\": 192,\r\n  \"hashtag\": \"hashtag74\",\r\n  \"cashtag\": \"cashtag74\",\r\n  \"mention\": 192,\r\n  \"signal\": \"signal74\",\r\n  \"fromDate\": 192,\r\n  \"toDate\": 192\r\n}"
						},
						"url": {
							"raw": "https://{{agentUrl}}/agent/v1/message/search?skip=0&limit=32&scope=scope&sortDir=sortDir",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v1",
								"message",
								"search"
							],
							"query": [
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "32"
								},
								{
									"key": "scope",
									"value": "scope"
								},
								{
									"key": "sortDir",
									"value": "sortDir"
								}
							]
						},
						"description": "Search messages according to the specified criteria.\n"
					},
					"response": [
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"text\": \"text74\",\r\n  \"streamId\": \"streamId74\",\r\n  \"streamType\": \"streamType74\",\r\n  \"author\": 192,\r\n  \"hashtag\": \"hashtag74\",\r\n  \"cashtag\": \"cashtag74\",\r\n  \"mention\": 192,\r\n  \"signal\": \"signal74\",\r\n  \"fromDate\": 192,\r\n  \"toDate\": 192\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/message/search?skip=233&limit=233&scope=scope90&sortDir=sortDir90",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"message",
										"search"
									],
									"query": [
										{
											"key": "skip",
											"value": "233"
										},
										{
											"key": "limit",
											"value": "233"
										},
										{
											"key": "scope",
											"value": "scope90"
										},
										{
											"key": "sortDir",
											"value": "sortDir90"
										}
									]
								},
								"description": "Search messages according to the specified criteria.\n"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"text\": \"text74\",\r\n  \"streamId\": \"streamId74\",\r\n  \"streamType\": \"streamType74\",\r\n  \"author\": 192,\r\n  \"hashtag\": \"hashtag74\",\r\n  \"cashtag\": \"cashtag74\",\r\n  \"mention\": 192,\r\n  \"signal\": \"signal74\",\r\n  \"fromDate\": 192,\r\n  \"toDate\": 192\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/message/search?skip=233&limit=233&scope=scope90&sortDir=sortDir90",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"message",
										"search"
									],
									"query": [
										{
											"key": "skip",
											"value": "233"
										},
										{
											"key": "limit",
											"value": "233"
										},
										{
											"key": "scope",
											"value": "scope90"
										},
										{
											"key": "sortDir",
											"value": "sortDir90"
										}
									]
								},
								"description": "Search messages according to the specified criteria.\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"text\": \"text74\",\r\n  \"streamId\": \"streamId74\",\r\n  \"streamType\": \"streamType74\",\r\n  \"author\": 192,\r\n  \"hashtag\": \"hashtag74\",\r\n  \"cashtag\": \"cashtag74\",\r\n  \"mention\": 192,\r\n  \"signal\": \"signal74\",\r\n  \"fromDate\": 192,\r\n  \"toDate\": 192\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/message/search?skip=233&limit=233&scope=scope90&sortDir=sortDir90",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"message",
										"search"
									],
									"query": [
										{
											"key": "skip",
											"value": "233"
										},
										{
											"key": "limit",
											"value": "233"
										},
										{
											"key": "scope",
											"value": "scope90"
										},
										{
											"key": "sortDir",
											"value": "sortDir90"
										}
									]
								},
								"description": "Search messages according to the specified criteria.\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"text\": \"text74\",\r\n  \"streamId\": \"streamId74\",\r\n  \"streamType\": \"streamType74\",\r\n  \"author\": 192,\r\n  \"hashtag\": \"hashtag74\",\r\n  \"cashtag\": \"cashtag74\",\r\n  \"mention\": 192,\r\n  \"signal\": \"signal74\",\r\n  \"fromDate\": 192,\r\n  \"toDate\": 192\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/message/search?skip=233&limit=233&scope=scope90&sortDir=sortDir90",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"message",
										"search"
									],
									"query": [
										{
											"key": "skip",
											"value": "233"
										},
										{
											"key": "limit",
											"value": "233"
										},
										{
											"key": "scope",
											"value": "scope90"
										},
										{
											"key": "sortDir",
											"value": "sortDir90"
										}
									]
								},
								"description": "Search messages according to the specified criteria.\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"text\": \"text74\",\r\n  \"streamId\": \"streamId74\",\r\n  \"streamType\": \"streamType74\",\r\n  \"author\": 192,\r\n  \"hashtag\": \"hashtag74\",\r\n  \"cashtag\": \"cashtag74\",\r\n  \"mention\": 192,\r\n  \"signal\": \"signal74\",\r\n  \"fromDate\": 192,\r\n  \"toDate\": 192\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/message/search?skip=233&limit=233&scope=scope90&sortDir=sortDir90",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"message",
										"search"
									],
									"query": [
										{
											"key": "skip",
											"value": "233"
										},
										{
											"key": "limit",
											"value": "233"
										},
										{
											"key": "scope",
											"value": "scope90"
										},
										{
											"key": "sortDir",
											"value": "sortDir90"
										}
									]
								},
								"description": "Search messages according to the specified criteria.\n"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  {\r\n    \"messageId\": \"messageId74\",\r\n    \"timestamp\": 192,\r\n    \"message\": \"message74\",\r\n    \"data\": \"data74\",\r\n    \"attachments\": [\r\n      {\r\n        \"id\": \"id74\",\r\n        \"name\": \"name74\",\r\n        \"size\": 192,\r\n        \"images\": [\r\n          {\r\n            \"id\": \"id74\",\r\n            \"dimension\": \"dimension74\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"user\": {\r\n      \"userId\": 192,\r\n      \"firstName\": \"firstName74\",\r\n      \"lastName\": \"lastName74\",\r\n      \"displayName\": \"displayName74\",\r\n      \"email\": \"email74\",\r\n      \"username\": \"username74\"\r\n    },\r\n    \"stream\": {\r\n      \"streamId\": \"streamId74\",\r\n      \"streamType\": \"streamType74\",\r\n      \"roomName\": \"roomName74\",\r\n      \"members\": [\r\n        {\r\n          \"userId\": 192,\r\n          \"firstName\": \"firstName74\",\r\n          \"lastName\": \"lastName74\",\r\n          \"displayName\": \"displayName74\",\r\n          \"email\": \"email74\",\r\n          \"username\": \"username74\"\r\n        }\r\n      ],\r\n      \"external\": false,\r\n      \"crossPod\": false\r\n    },\r\n    \"externalRecipients\": false,\r\n    \"diagnostic\": \"diagnostic74\",\r\n    \"userAgent\": \"userAgent74\",\r\n    \"originalFormat\": \"originalFormat74\",\r\n    \"disclaimer\": \"disclaimer74\"\r\n  }\r\n]"
						}
					]
				},
				{
					"name": "Get messages from an existing stream.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{agentUrl}}/agent/v4/stream/:sid/message?since=0&skip=0&limit=32",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v4",
								"stream",
								":sid",
								"message"
							],
							"query": [
								{
									"key": "since",
									"value": "0"
								},
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "32"
								}
							],
							"variable": [
								{
									"key": "sid",
									"value": "sid"
								}
							]
						},
						"description": "A caller can fetch all unseen messages by passing the timestamp of\nthe last message seen as the since parameter and the number of messages\nwith the same timestamp value already seen as the skip parameter. This\nmeans that every message will be seen exactly once even in the case that\nan additional message is processed with the same timestamp as the last\nmessage returned by the previous call, and the case where there are\nmore than maxMessages with the same timestamp value.\n\nThis method is intended for historic queries and is generally reliable\nbut if guaranteed delivery of every message in real time is required\nthen the equivilent firehose method should be called.\n"
					},
					"response": [
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v4/stream/:sid/message?since=233&skip=233&limit=233",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v4",
										"stream",
										":sid",
										"message"
									],
									"query": [
										{
											"key": "since",
											"value": "233"
										},
										{
											"key": "skip",
											"value": "233"
										},
										{
											"key": "limit",
											"value": "233"
										}
									],
									"variable": [
										{
											"key": "sid",
											"value": "sid90"
										}
									]
								},
								"description": "A caller can fetch all unseen messages by passing the timestamp of\nthe last message seen as the since parameter and the number of messages\nwith the same timestamp value already seen as the skip parameter. This\nmeans that every message will be seen exactly once even in the case that\nan additional message is processed with the same timestamp as the last\nmessage returned by the previous call, and the case where there are\nmore than maxMessages with the same timestamp value.\n\nThis method is intended for historic queries and is generally reliable\nbut if guaranteed delivery of every message in real time is required\nthen the equivilent firehose method should be called.\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v4/stream/:sid/message?since=233&skip=233&limit=233",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v4",
										"stream",
										":sid",
										"message"
									],
									"query": [
										{
											"key": "since",
											"value": "233"
										},
										{
											"key": "skip",
											"value": "233"
										},
										{
											"key": "limit",
											"value": "233"
										}
									],
									"variable": [
										{
											"key": "sid",
											"value": "sid90"
										}
									]
								},
								"description": "A caller can fetch all unseen messages by passing the timestamp of\nthe last message seen as the since parameter and the number of messages\nwith the same timestamp value already seen as the skip parameter. This\nmeans that every message will be seen exactly once even in the case that\nan additional message is processed with the same timestamp as the last\nmessage returned by the previous call, and the case where there are\nmore than maxMessages with the same timestamp value.\n\nThis method is intended for historic queries and is generally reliable\nbut if guaranteed delivery of every message in real time is required\nthen the equivilent firehose method should be called.\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v4/stream/:sid/message?since=233&skip=233&limit=233",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v4",
										"stream",
										":sid",
										"message"
									],
									"query": [
										{
											"key": "since",
											"value": "233"
										},
										{
											"key": "skip",
											"value": "233"
										},
										{
											"key": "limit",
											"value": "233"
										}
									],
									"variable": [
										{
											"key": "sid",
											"value": "sid90"
										}
									]
								},
								"description": "A caller can fetch all unseen messages by passing the timestamp of\nthe last message seen as the since parameter and the number of messages\nwith the same timestamp value already seen as the skip parameter. This\nmeans that every message will be seen exactly once even in the case that\nan additional message is processed with the same timestamp as the last\nmessage returned by the previous call, and the case where there are\nmore than maxMessages with the same timestamp value.\n\nThis method is intended for historic queries and is generally reliable\nbut if guaranteed delivery of every message in real time is required\nthen the equivilent firehose method should be called.\n"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  {\r\n    \"messageId\": \"messageId74\",\r\n    \"timestamp\": 192,\r\n    \"message\": \"message74\",\r\n    \"data\": \"data74\",\r\n    \"attachments\": [\r\n      {\r\n        \"id\": \"id74\",\r\n        \"name\": \"name74\",\r\n        \"size\": 192,\r\n        \"images\": [\r\n          {\r\n            \"id\": \"id74\",\r\n            \"dimension\": \"dimension74\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"user\": {\r\n      \"userId\": 192,\r\n      \"firstName\": \"firstName74\",\r\n      \"lastName\": \"lastName74\",\r\n      \"displayName\": \"displayName74\",\r\n      \"email\": \"email74\",\r\n      \"username\": \"username74\"\r\n    },\r\n    \"stream\": {\r\n      \"streamId\": \"streamId74\",\r\n      \"streamType\": \"streamType74\",\r\n      \"roomName\": \"roomName74\",\r\n      \"members\": [\r\n        {\r\n          \"userId\": 192,\r\n          \"firstName\": \"firstName74\",\r\n          \"lastName\": \"lastName74\",\r\n          \"displayName\": \"displayName74\",\r\n          \"email\": \"email74\",\r\n          \"username\": \"username74\"\r\n        }\r\n      ],\r\n      \"external\": false,\r\n      \"crossPod\": false\r\n    },\r\n    \"externalRecipients\": false,\r\n    \"diagnostic\": \"diagnostic74\",\r\n    \"userAgent\": \"userAgent74\",\r\n    \"originalFormat\": \"originalFormat74\",\r\n    \"disclaimer\": \"disclaimer74\"\r\n  }\r\n]"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v4/stream/:sid/message?since=233&skip=233&limit=233",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v4",
										"stream",
										":sid",
										"message"
									],
									"query": [
										{
											"key": "since",
											"value": "233"
										},
										{
											"key": "skip",
											"value": "233"
										},
										{
											"key": "limit",
											"value": "233"
										}
									],
									"variable": [
										{
											"key": "sid",
											"value": "sid90"
										}
									]
								},
								"description": "A caller can fetch all unseen messages by passing the timestamp of\nthe last message seen as the since parameter and the number of messages\nwith the same timestamp value already seen as the skip parameter. This\nmeans that every message will be seen exactly once even in the case that\nan additional message is processed with the same timestamp as the last\nmessage returned by the previous call, and the case where there are\nmore than maxMessages with the same timestamp value.\n\nThis method is intended for historic queries and is generally reliable\nbut if guaranteed delivery of every message in real time is required\nthen the equivilent firehose method should be called.\n"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v4/stream/:sid/message?since=233&skip=233&limit=233",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v4",
										"stream",
										":sid",
										"message"
									],
									"query": [
										{
											"key": "since",
											"value": "233"
										},
										{
											"key": "skip",
											"value": "233"
										},
										{
											"key": "limit",
											"value": "233"
										}
									],
									"variable": [
										{
											"key": "sid",
											"value": "sid90"
										}
									]
								},
								"description": "A caller can fetch all unseen messages by passing the timestamp of\nthe last message seen as the since parameter and the number of messages\nwith the same timestamp value already seen as the skip parameter. This\nmeans that every message will be seen exactly once even in the case that\nan additional message is processed with the same timestamp as the last\nmessage returned by the previous call, and the case where there are\nmore than maxMessages with the same timestamp value.\n\nThis method is intended for historic queries and is generally reliable\nbut if guaranteed delivery of every message in real time is required\nthen the equivilent firehose method should be called.\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						}
					]
				},
				{
					"name": "Post a message to one existing stream.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Authorization token used to make delegated calls."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "message",
									"value": "message31",
									"description": "The message payload in MessageML.",
									"type": "text"
								},
								{
									"key": "data",
									"value": "data31",
									"description": "Optional message data in EntityJSON.",
									"type": "text"
								},
								{
									"key": "version",
									"value": "version31",
									"description": "Optional message version in the format \"major.minor\". If empty, defaults to the latest supported version.",
									"type": "text"
								},
								{
									"key": "attachment",
									"description": "Optional file attachment.",
									"type": "file",
									"src": []
								},
								{
									"key": "preview",
									"description": "Optional attachment preview.",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "https://{{agentUrl}}/agent/v4/stream/:sid/message/create",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v4",
								"stream",
								":sid",
								"message",
								"create"
							],
							"variable": [
								{
									"key": "sid",
									"value": "sid"
								}
							]
						},
						"description": "Post a new message to the given stream. The stream can be a chatroom,\nan IM or a multiparty IM.\n\nYou may include an attachment on the message.\n\nThe message can be provided as MessageMLV2 or PresentationML. Both formats support Freemarker templates.\n\nThe optional parameter \"data\" can be used to provide a JSON payload containing entity data.\nIf the message contains explicit references to entity data (in \"data-entity-id\" element attributes),\nthis parameter is required.\n\nIf the message is in MessageML and fails schema validation\na client error results\n\nIf the message is sent then 200 is returned.\n\nRegarding authentication, you must either use the sessionToken which was created for delegated app access\nor both the sessionToken and keyManagerToken together.\n"
					},
					"response": [
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Authorization token used to make delegated calls."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "message",
											"value": "message31",
											"description": "The message payload in MessageML.",
											"type": "text"
										},
										{
											"key": "data",
											"value": "data31",
											"description": "Optional message data in EntityJSON.",
											"type": "text"
										},
										{
											"key": "version",
											"value": "version31",
											"description": "Optional message version in the format \"major.minor\". If empty, defaults to the latest supported version.",
											"type": "text"
										},
										{
											"key": "attachment",
											"description": "Optional file attachment.",
											"type": "file",
											"src": []
										},
										{
											"key": "preview",
											"description": "Optional attachment preview.",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v4/stream/:sid/message/create",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v4",
										"stream",
										":sid",
										"message",
										"create"
									],
									"variable": [
										{
											"key": "sid",
											"value": "sid90"
										}
									]
								},
								"description": "Post a new message to the given stream. The stream can be a chatroom,\nan IM or a multiparty IM.\n\nYou may include an attachment on the message.\n\nThe message can be provided as MessageMLV2 or PresentationML. Both formats support Freemarker templates.\n\nThe optional parameter \"data\" can be used to provide a JSON payload containing entity data.\nIf the message contains explicit references to entity data (in \"data-entity-id\" element attributes),\nthis parameter is required.\n\nIf the message is in MessageML and fails schema validation\na client error results\n\nIf the message is sent then 200 is returned.\n\nRegarding authentication, you must either use the sessionToken which was created for delegated app access\nor both the sessionToken and keyManagerToken together.\n"
							},
							"status": "Message sent.",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"messageId\": \"messageId74\",\r\n  \"timestamp\": 192,\r\n  \"message\": \"message74\",\r\n  \"data\": \"data74\",\r\n  \"attachments\": [\r\n    {\r\n      \"id\": \"id74\",\r\n      \"name\": \"name74\",\r\n      \"size\": 192,\r\n      \"images\": [\r\n        {\r\n          \"id\": \"id74\",\r\n          \"dimension\": \"dimension74\"\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"user\": {\r\n    \"userId\": 192,\r\n    \"firstName\": \"firstName74\",\r\n    \"lastName\": \"lastName74\",\r\n    \"displayName\": \"displayName74\",\r\n    \"email\": \"email74\",\r\n    \"username\": \"username74\"\r\n  },\r\n  \"stream\": {\r\n    \"streamId\": \"streamId74\",\r\n    \"streamType\": \"streamType74\",\r\n    \"roomName\": \"roomName74\",\r\n    \"members\": [\r\n      {\r\n        \"userId\": 192,\r\n        \"firstName\": \"firstName74\",\r\n        \"lastName\": \"lastName74\",\r\n        \"displayName\": \"displayName74\",\r\n        \"email\": \"email74\",\r\n        \"username\": \"username74\"\r\n      }\r\n    ],\r\n    \"external\": false,\r\n    \"crossPod\": false\r\n  },\r\n  \"externalRecipients\": false,\r\n  \"diagnostic\": \"diagnostic74\",\r\n  \"userAgent\": \"userAgent74\",\r\n  \"originalFormat\": \"originalFormat74\",\r\n  \"disclaimer\": \"disclaimer74\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Authorization token used to make delegated calls."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "message",
											"value": "message31",
											"description": "The message payload in MessageML.",
											"type": "text"
										},
										{
											"key": "data",
											"value": "data31",
											"description": "Optional message data in EntityJSON.",
											"type": "text"
										},
										{
											"key": "version",
											"value": "version31",
											"description": "Optional message version in the format \"major.minor\". If empty, defaults to the latest supported version.",
											"type": "text"
										},
										{
											"key": "attachment",
											"description": "Optional file attachment.",
											"type": "file",
											"src": []
										},
										{
											"key": "preview",
											"description": "Optional attachment preview.",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v4/stream/:sid/message/create",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v4",
										"stream",
										":sid",
										"message",
										"create"
									],
									"variable": [
										{
											"key": "sid",
											"value": "sid90"
										}
									]
								},
								"description": "Post a new message to the given stream. The stream can be a chatroom,\nan IM or a multiparty IM.\n\nYou may include an attachment on the message.\n\nThe message can be provided as MessageMLV2 or PresentationML. Both formats support Freemarker templates.\n\nThe optional parameter \"data\" can be used to provide a JSON payload containing entity data.\nIf the message contains explicit references to entity data (in \"data-entity-id\" element attributes),\nthis parameter is required.\n\nIf the message is in MessageML and fails schema validation\na client error results\n\nIf the message is sent then 200 is returned.\n\nRegarding authentication, you must either use the sessionToken which was created for delegated app access\nor both the sessionToken and keyManagerToken together.\n"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Authorization token used to make delegated calls."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "message",
											"value": "message31",
											"description": "The message payload in MessageML.",
											"type": "text"
										},
										{
											"key": "data",
											"value": "data31",
											"description": "Optional message data in EntityJSON.",
											"type": "text"
										},
										{
											"key": "version",
											"value": "version31",
											"description": "Optional message version in the format \"major.minor\". If empty, defaults to the latest supported version.",
											"type": "text"
										},
										{
											"key": "attachment",
											"description": "Optional file attachment.",
											"type": "file",
											"src": []
										},
										{
											"key": "preview",
											"description": "Optional attachment preview.",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v4/stream/:sid/message/create",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v4",
										"stream",
										":sid",
										"message",
										"create"
									],
									"variable": [
										{
											"key": "sid",
											"value": "sid90"
										}
									]
								},
								"description": "Post a new message to the given stream. The stream can be a chatroom,\nan IM or a multiparty IM.\n\nYou may include an attachment on the message.\n\nThe message can be provided as MessageMLV2 or PresentationML. Both formats support Freemarker templates.\n\nThe optional parameter \"data\" can be used to provide a JSON payload containing entity data.\nIf the message contains explicit references to entity data (in \"data-entity-id\" element attributes),\nthis parameter is required.\n\nIf the message is in MessageML and fails schema validation\na client error results\n\nIf the message is sent then 200 is returned.\n\nRegarding authentication, you must either use the sessionToken which was created for delegated app access\nor both the sessionToken and keyManagerToken together.\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Authorization token used to make delegated calls."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "message",
											"value": "message31",
											"description": "The message payload in MessageML.",
											"type": "text"
										},
										{
											"key": "data",
											"value": "data31",
											"description": "Optional message data in EntityJSON.",
											"type": "text"
										},
										{
											"key": "version",
											"value": "version31",
											"description": "Optional message version in the format \"major.minor\". If empty, defaults to the latest supported version.",
											"type": "text"
										},
										{
											"key": "attachment",
											"description": "Optional file attachment.",
											"type": "file",
											"src": []
										},
										{
											"key": "preview",
											"description": "Optional attachment preview.",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v4/stream/:sid/message/create",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v4",
										"stream",
										":sid",
										"message",
										"create"
									],
									"variable": [
										{
											"key": "sid",
											"value": "sid90"
										}
									]
								},
								"description": "Post a new message to the given stream. The stream can be a chatroom,\nan IM or a multiparty IM.\n\nYou may include an attachment on the message.\n\nThe message can be provided as MessageMLV2 or PresentationML. Both formats support Freemarker templates.\n\nThe optional parameter \"data\" can be used to provide a JSON payload containing entity data.\nIf the message contains explicit references to entity data (in \"data-entity-id\" element attributes),\nthis parameter is required.\n\nIf the message is in MessageML and fails schema validation\na client error results\n\nIf the message is sent then 200 is returned.\n\nRegarding authentication, you must either use the sessionToken which was created for delegated app access\nor both the sessionToken and keyManagerToken together.\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Authorization token used to make delegated calls."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "message",
											"value": "message31",
											"description": "The message payload in MessageML.",
											"type": "text"
										},
										{
											"key": "data",
											"value": "data31",
											"description": "Optional message data in EntityJSON.",
											"type": "text"
										},
										{
											"key": "version",
											"value": "version31",
											"description": "Optional message version in the format \"major.minor\". If empty, defaults to the latest supported version.",
											"type": "text"
										},
										{
											"key": "attachment",
											"description": "Optional file attachment.",
											"type": "file",
											"src": []
										},
										{
											"key": "preview",
											"description": "Optional attachment preview.",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v4/stream/:sid/message/create",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v4",
										"stream",
										":sid",
										"message",
										"create"
									],
									"variable": [
										{
											"key": "sid",
											"value": "sid90"
										}
									]
								},
								"description": "Post a new message to the given stream. The stream can be a chatroom,\nan IM or a multiparty IM.\n\nYou may include an attachment on the message.\n\nThe message can be provided as MessageMLV2 or PresentationML. Both formats support Freemarker templates.\n\nThe optional parameter \"data\" can be used to provide a JSON payload containing entity data.\nIf the message contains explicit references to entity data (in \"data-entity-id\" element attributes),\nthis parameter is required.\n\nIf the message is in MessageML and fails schema validation\na client error results\n\nIf the message is sent then 200 is returned.\n\nRegarding authentication, you must either use the sessionToken which was created for delegated app access\nor both the sessionToken and keyManagerToken together.\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_451",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Authorization token used to make delegated calls."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "message",
											"value": "message31",
											"description": "The message payload in MessageML.",
											"type": "text"
										},
										{
											"key": "data",
											"value": "data31",
											"description": "Optional message data in EntityJSON.",
											"type": "text"
										},
										{
											"key": "version",
											"value": "version31",
											"description": "Optional message version in the format \"major.minor\". If empty, defaults to the latest supported version.",
											"type": "text"
										},
										{
											"key": "attachment",
											"description": "Optional file attachment.",
											"type": "file",
											"src": []
										},
										{
											"key": "preview",
											"description": "Optional attachment preview.",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v4/stream/:sid/message/create",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v4",
										"stream",
										":sid",
										"message",
										"create"
									],
									"variable": [
										{
											"key": "sid",
											"value": "sid90"
										}
									]
								},
								"description": "Post a new message to the given stream. The stream can be a chatroom,\nan IM or a multiparty IM.\n\nYou may include an attachment on the message.\n\nThe message can be provided as MessageMLV2 or PresentationML. Both formats support Freemarker templates.\n\nThe optional parameter \"data\" can be used to provide a JSON payload containing entity data.\nIf the message contains explicit references to entity data (in \"data-entity-id\" element attributes),\nthis parameter is required.\n\nIf the message is in MessageML and fails schema validation\na client error results\n\nIf the message is sent then 200 is returned.\n\nRegarding authentication, you must either use the sessionToken which was created for delegated app access\nor both the sessionToken and keyManagerToken together.\n"
							},
							"status": "Compliance Issues found in message or file",
							"code": 451,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						}
					]
				},
				{
					"name": "Get the read status of a particular message.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/message/:mid/status",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"message",
								":mid",
								"status"
							],
							"variable": [
								{
									"key": "mid",
									"value": "mid46"
								}
							]
						},
						"description": "Get the read status of a particular message."
					},
					"response": [
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/message/:mid/status",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"message",
										":mid",
										"status"
									],
									"variable": [
										{
											"key": "mid",
											"value": "mid46"
										}
									]
								},
								"description": "Get the read status of a particular message."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/message/:mid/status",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"message",
										":mid",
										"status"
									],
									"variable": [
										{
											"key": "mid",
											"value": "mid46"
										}
									]
								},
								"description": "Get the read status of a particular message."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_404",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/message/:mid/status",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"message",
										":mid",
										"status"
									],
									"variable": [
										{
											"key": "mid",
											"value": "mid46"
										}
									]
								},
								"description": "Get the read status of a particular message."
							},
							"status": "Not found: The informed Message ID does not exist",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/message/:mid/status",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"message",
										":mid",
										"status"
									],
									"variable": [
										{
											"key": "mid",
											"value": "mid46"
										}
									]
								},
								"description": "Get the read status of a particular message."
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/message/:mid/status",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"message",
										":mid",
										"status"
									],
									"variable": [
										{
											"key": "mid",
											"value": "mid46"
										}
									]
								},
								"description": "Get the read status of a particular message."
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"author\": {\r\n    \"userId\": \"userId6\",\r\n    \"firstName\": \"firstName6\",\r\n    \"lastName\": \"lastName6\",\r\n    \"displayName\": \"displayName6\",\r\n    \"email\": \"email6\",\r\n    \"userName\": \"userName6\",\r\n    \"timestamp\": \"timestamp6\"\r\n  },\r\n  \"read\": [\r\n    {\r\n      \"userId\": \"userId6\",\r\n      \"firstName\": \"firstName6\",\r\n      \"lastName\": \"lastName6\",\r\n      \"displayName\": \"displayName6\",\r\n      \"email\": \"email6\",\r\n      \"userName\": \"userName6\",\r\n      \"timestamp\": \"timestamp6\"\r\n    }\r\n  ],\r\n  \"delivered\": [\r\n    {\r\n      \"userId\": \"userId6\",\r\n      \"firstName\": \"firstName6\",\r\n      \"lastName\": \"lastName6\",\r\n      \"displayName\": \"displayName6\",\r\n      \"email\": \"email6\",\r\n      \"userName\": \"userName6\",\r\n      \"timestamp\": \"timestamp6\"\r\n    }\r\n  ],\r\n  \"sent\": [\r\n    {\r\n      \"userId\": \"userId6\",\r\n      \"firstName\": \"firstName6\",\r\n      \"lastName\": \"lastName6\",\r\n      \"displayName\": \"displayName6\",\r\n      \"email\": \"email6\",\r\n      \"userName\": \"userName6\",\r\n      \"timestamp\": \"timestamp6\"\r\n    }\r\n  ]\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/message/:mid/status",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"message",
										":mid",
										"status"
									],
									"variable": [
										{
											"key": "mid",
											"value": "mid46"
										}
									]
								},
								"description": "Get the read status of a particular message."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "Download an attachment.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "text/plain,application/json"
							}
						],
						"url": {
							"raw": "https://{{agentUrl}}/agent/v1/stream/:sid/attachment?fileId=fileId31&messageId=messageId31",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v1",
								"stream",
								":sid",
								"attachment"
							],
							"query": [
								{
									"key": "fileId",
									"value": "fileId31"
								},
								{
									"key": "messageId",
									"value": "messageId31"
								}
							],
							"variable": [
								{
									"key": "sid",
									"value": "sid31"
								}
							]
						},
						"description": "Downloads the attachment body by the attachment ID, stream ID, and message ID.\n"
					},
					"response": [
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "text/plain,application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/stream/:sid/attachment?fileId=fileId31&messageId=messageId31",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"stream",
										":sid",
										"attachment"
									],
									"query": [
										{
											"key": "fileId",
											"value": "fileId31"
										},
										{
											"key": "messageId",
											"value": "messageId31"
										}
									],
									"variable": [
										{
											"key": "sid",
											"value": "sid31"
										}
									]
								},
								"description": "Downloads the attachment body by the attachment ID, stream ID, and message ID.\n"
							},
							"status": "Attachment body as Base64 encoded string.",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/octet-stream"
								}
							],
							"cookie": [],
							"body": "response31"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "text/plain,application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/stream/:sid/attachment?fileId=fileId31&messageId=messageId31",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"stream",
										":sid",
										"attachment"
									],
									"query": [
										{
											"key": "fileId",
											"value": "fileId31"
										},
										{
											"key": "messageId",
											"value": "messageId31"
										}
									],
									"variable": [
										{
											"key": "sid",
											"value": "sid31"
										}
									]
								},
								"description": "Downloads the attachment body by the attachment ID, stream ID, and message ID.\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "text/plain,application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/stream/:sid/attachment?fileId=fileId31&messageId=messageId31",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"stream",
										":sid",
										"attachment"
									],
									"query": [
										{
											"key": "fileId",
											"value": "fileId31"
										},
										{
											"key": "messageId",
											"value": "messageId31"
										}
									],
									"variable": [
										{
											"key": "sid",
											"value": "sid31"
										}
									]
								},
								"description": "Downloads the attachment body by the attachment ID, stream ID, and message ID.\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "text/plain,application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/stream/:sid/attachment?fileId=fileId31&messageId=messageId31",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"stream",
										":sid",
										"attachment"
									],
									"query": [
										{
											"key": "fileId",
											"value": "fileId31"
										},
										{
											"key": "messageId",
											"value": "messageId31"
										}
									],
									"variable": [
										{
											"key": "sid",
											"value": "sid31"
										}
									]
								},
								"description": "Downloads the attachment body by the attachment ID, stream ID, and message ID.\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "text/plain,application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/stream/:sid/attachment?fileId=fileId31&messageId=messageId31",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"stream",
										":sid",
										"attachment"
									],
									"query": [
										{
											"key": "fileId",
											"value": "fileId31"
										},
										{
											"key": "messageId",
											"value": "messageId31"
										}
									],
									"variable": [
										{
											"key": "sid",
											"value": "sid31"
										}
									]
								},
								"description": "Downloads the attachment body by the attachment ID, stream ID, and message ID.\n"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						}
					]
				},
				{
					"name": "Share a piece of content into Symphony",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"type\": \"type74\",\r\n  \"content\": {\r\n    \"articleId\": \"articleId74\",\r\n    \"title\": \"title74\",\r\n    \"subTitle\": \"subTitle74\",\r\n    \"message\": \"message74\",\r\n    \"publisher\": \"publisher74\",\r\n    \"publishDate\": 192,\r\n    \"thumbnailUrl\": \"thumbnailUrl74\",\r\n    \"author\": \"author74\",\r\n    \"articleUrl\": \"articleUrl74\",\r\n    \"summary\": \"summary74\",\r\n    \"appId\": \"appId74\",\r\n    \"appName\": \"appName74\",\r\n    \"appIconUrl\": \"appIconUrl74\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{agentUrl}}/agent/v3/stream/:sid/share",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v3",
								"stream",
								":sid",
								"share"
							],
							"variable": [
								{
									"key": "sid",
									"value": "sid31"
								}
							]
						},
						"description": "Given a 3rd party content (eg. news article), it can share to the given stream.\nThe stream can be a chatroom, an IM or a multiparty IM.\n"
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"type\": \"type74\",\r\n  \"content\": {\r\n    \"articleId\": \"articleId74\",\r\n    \"title\": \"title74\",\r\n    \"subTitle\": \"subTitle74\",\r\n    \"message\": \"message74\",\r\n    \"publisher\": \"publisher74\",\r\n    \"publishDate\": 192,\r\n    \"thumbnailUrl\": \"thumbnailUrl74\",\r\n    \"author\": \"author74\",\r\n    \"articleUrl\": \"articleUrl74\",\r\n    \"summary\": \"summary74\",\r\n    \"appId\": \"appId74\",\r\n    \"appName\": \"appName74\",\r\n    \"appIconUrl\": \"appIconUrl74\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/stream/:sid/share",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"stream",
										":sid",
										"share"
									],
									"variable": [
										{
											"key": "sid",
											"value": "sid31"
										}
									]
								},
								"description": "Given a 3rd party content (eg. news article), it can share to the given stream.\nThe stream can be a chatroom, an IM or a multiparty IM.\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"type\": \"type74\",\r\n  \"content\": {\r\n    \"articleId\": \"articleId74\",\r\n    \"title\": \"title74\",\r\n    \"subTitle\": \"subTitle74\",\r\n    \"message\": \"message74\",\r\n    \"publisher\": \"publisher74\",\r\n    \"publishDate\": 192,\r\n    \"thumbnailUrl\": \"thumbnailUrl74\",\r\n    \"author\": \"author74\",\r\n    \"articleUrl\": \"articleUrl74\",\r\n    \"summary\": \"summary74\",\r\n    \"appId\": \"appId74\",\r\n    \"appName\": \"appName74\",\r\n    \"appIconUrl\": \"appIconUrl74\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/stream/:sid/share",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"stream",
										":sid",
										"share"
									],
									"variable": [
										{
											"key": "sid",
											"value": "sid31"
										}
									]
								},
								"description": "Given a 3rd party content (eg. news article), it can share to the given stream.\nThe stream can be a chatroom, an IM or a multiparty IM.\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"type\": \"type74\",\r\n  \"content\": {\r\n    \"articleId\": \"articleId74\",\r\n    \"title\": \"title74\",\r\n    \"subTitle\": \"subTitle74\",\r\n    \"message\": \"message74\",\r\n    \"publisher\": \"publisher74\",\r\n    \"publishDate\": 192,\r\n    \"thumbnailUrl\": \"thumbnailUrl74\",\r\n    \"author\": \"author74\",\r\n    \"articleUrl\": \"articleUrl74\",\r\n    \"summary\": \"summary74\",\r\n    \"appId\": \"appId74\",\r\n    \"appName\": \"appName74\",\r\n    \"appIconUrl\": \"appIconUrl74\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/stream/:sid/share",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"stream",
										":sid",
										"share"
									],
									"variable": [
										{
											"key": "sid",
											"value": "sid31"
										}
									]
								},
								"description": "Given a 3rd party content (eg. news article), it can share to the given stream.\nThe stream can be a chatroom, an IM or a multiparty IM.\n"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"message\": \"message5\",\r\n  \"fromUserId\": 15,\r\n  \"attachments\": [\r\n    {\r\n      \"id\": \"id74\",\r\n      \"name\": \"name74\",\r\n      \"size\": 192\r\n    }\r\n  ],\r\n  \"id\": \"id74\",\r\n  \"timestamp\": \"timestamp74\",\r\n  \"v2messageType\": \"v2messageType74\",\r\n  \"streamId\": \"streamId74\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"type\": \"type74\",\r\n  \"content\": {\r\n    \"articleId\": \"articleId74\",\r\n    \"title\": \"title74\",\r\n    \"subTitle\": \"subTitle74\",\r\n    \"message\": \"message74\",\r\n    \"publisher\": \"publisher74\",\r\n    \"publishDate\": 192,\r\n    \"thumbnailUrl\": \"thumbnailUrl74\",\r\n    \"author\": \"author74\",\r\n    \"articleUrl\": \"articleUrl74\",\r\n    \"summary\": \"summary74\",\r\n    \"appId\": \"appId74\",\r\n    \"appName\": \"appName74\",\r\n    \"appIconUrl\": \"appIconUrl74\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/stream/:sid/share",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"stream",
										":sid",
										"share"
									],
									"variable": [
										{
											"key": "sid",
											"value": "sid31"
										}
									]
								},
								"description": "Given a 3rd party content (eg. news article), it can share to the given stream.\nThe stream can be a chatroom, an IM or a multiparty IM.\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"type\": \"type74\",\r\n  \"content\": {\r\n    \"articleId\": \"articleId74\",\r\n    \"title\": \"title74\",\r\n    \"subTitle\": \"subTitle74\",\r\n    \"message\": \"message74\",\r\n    \"publisher\": \"publisher74\",\r\n    \"publishDate\": 192,\r\n    \"thumbnailUrl\": \"thumbnailUrl74\",\r\n    \"author\": \"author74\",\r\n    \"articleUrl\": \"articleUrl74\",\r\n    \"summary\": \"summary74\",\r\n    \"appId\": \"appId74\",\r\n    \"appName\": \"appName74\",\r\n    \"appIconUrl\": \"appIconUrl74\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/stream/:sid/share",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"stream",
										":sid",
										"share"
									],
									"variable": [
										{
											"key": "sid",
											"value": "sid31"
										}
									]
								},
								"description": "Given a 3rd party content (eg. news article), it can share to the given stream.\nThe stream can be a chatroom, an IM or a multiparty IM.\n"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Fetch message details",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"messageIds\": [\r\n    \"messageIds6\"\r\n  ]\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/messages",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"messages"
							]
						},
						"description": "Fetch message details"
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"messageIds\": [\r\n    \"messageIds6\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/messages",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"messages"
									]
								},
								"description": "Fetch message details"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"messageIds\": [\r\n    \"messageIds6\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/messages",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"messages"
									]
								},
								"description": "Fetch message details"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_404",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"messageIds\": [\r\n    \"messageIds6\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/messages",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"messages"
									]
								},
								"description": "Fetch message details"
							},
							"status": "Not found: Message ID could not be found.",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"messageIds\": [\r\n    \"messageIds6\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/messages",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"messages"
									]
								},
								"description": "Fetch message details"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"messageIds\": [\r\n    \"messageIds6\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/messages",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"messages"
									]
								},
								"description": "Fetch message details"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  {\r\n    \"messageId\": \"messageId6\",\r\n    \"creator\": {\r\n      \"id\": 16,\r\n      \"name\": \"name6\"\r\n    },\r\n    \"onBehalfOfUser\": {\r\n      \"id\": 16,\r\n      \"name\": \"name6\"\r\n    },\r\n    \"stream\": {\r\n      \"id\": \"id6\",\r\n      \"name\": \"name6\",\r\n      \"streamType\": \"streamType6\"\r\n    },\r\n    \"creationDate\": 16,\r\n    \"deliveryReceiptCount\": 16,\r\n    \"readReceiptCount\": 16,\r\n    \"emailNotificationCount\": 16,\r\n    \"downloadReceiptCounts\": [\r\n      {\r\n        \"fileName\": \"fileName6\",\r\n        \"count\": 16\r\n      }\r\n    ]\r\n  }\r\n]"
						},
						{
							"name": "Response_422",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"messageIds\": [\r\n    \"messageIds6\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/messages",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"messages"
									]
								},
								"description": "Fetch message details"
							},
							"status": "Unprocessable entity: Invalid message type.",
							"code": 422,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"messageIds\": [\r\n    \"messageIds6\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/messages",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"messages"
									]
								},
								"description": "Fetch message details"
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Fetch receipts details from a specific message.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/messages/:messageId/receipts?before=before46&after=after46",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"messages",
								":messageId",
								"receipts"
							],
							"query": [
								{
									"key": "before",
									"value": "before46"
								},
								{
									"key": "after",
									"value": "after46"
								}
							],
							"variable": [
								{
									"key": "messageId",
									"value": "messageId46"
								}
							]
						},
						"description": "Fetch receipts details from a specific message."
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/messages/:messageId/receipts?before=before46&after=after46",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"messages",
										":messageId",
										"receipts"
									],
									"query": [
										{
											"key": "before",
											"value": "before46"
										},
										{
											"key": "after",
											"value": "after46"
										}
									],
									"variable": [
										{
											"key": "messageId",
											"value": "messageId46"
										}
									]
								},
								"description": "Fetch receipts details from a specific message."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/messages/:messageId/receipts?before=before46&after=after46",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"messages",
										":messageId",
										"receipts"
									],
									"query": [
										{
											"key": "before",
											"value": "before46"
										},
										{
											"key": "after",
											"value": "after46"
										}
									],
									"variable": [
										{
											"key": "messageId",
											"value": "messageId46"
										}
									]
								},
								"description": "Fetch receipts details from a specific message."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/messages/:messageId/receipts?before=before46&after=after46",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"messages",
										":messageId",
										"receipts"
									],
									"query": [
										{
											"key": "before",
											"value": "before46"
										},
										{
											"key": "after",
											"value": "after46"
										}
									],
									"variable": [
										{
											"key": "messageId",
											"value": "messageId46"
										}
									]
								},
								"description": "Fetch receipts details from a specific message."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_404",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/messages/:messageId/receipts?before=before46&after=after46",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"messages",
										":messageId",
										"receipts"
									],
									"query": [
										{
											"key": "before",
											"value": "before46"
										},
										{
											"key": "after",
											"value": "after46"
										}
									],
									"variable": [
										{
											"key": "messageId",
											"value": "messageId46"
										}
									]
								},
								"description": "Fetch receipts details from a specific message."
							},
							"status": "Not Found: Message receipt details cannot be found.",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/messages/:messageId/receipts?before=before46&after=after46",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"messages",
										":messageId",
										"receipts"
									],
									"query": [
										{
											"key": "before",
											"value": "before46"
										},
										{
											"key": "after",
											"value": "after46"
										}
									],
									"variable": [
										{
											"key": "messageId",
											"value": "messageId46"
										}
									]
								},
								"description": "Fetch receipts details from a specific message."
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/messages/:messageId/receipts?before=before46&after=after46",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"messages",
										":messageId",
										"receipts"
									],
									"query": [
										{
											"key": "before",
											"value": "before46"
										},
										{
											"key": "after",
											"value": "after46"
										}
									],
									"variable": [
										{
											"key": "messageId",
											"value": "messageId46"
										}
									]
								},
								"description": "Fetch receipts details from a specific message."
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"creator\": {\r\n    \"id\": 16,\r\n    \"name\": \"name6\"\r\n  },\r\n  \"onBehalfOfUser\": {\r\n    \"id\": 16,\r\n    \"name\": \"name6\"\r\n  },\r\n  \"stream\": {\r\n    \"id\": \"id6\",\r\n    \"name\": \"name6\",\r\n    \"streamType\": \"streamType6\"\r\n  },\r\n  \"creationDate\": 16,\r\n  \"deliveryReceiptCount\": 16,\r\n  \"readReceiptCount\": 16,\r\n  \"emailNotificationCount\": 16,\r\n  \"downloadReceiptCounts\": [\r\n    {\r\n      \"fileName\": \"fileName6\",\r\n      \"count\": 16\r\n    }\r\n  ],\r\n  \"MessageReceiptDetail\": [\r\n    {\r\n      \"user\": {\r\n        \"id\": 16,\r\n        \"username\": \"username6\",\r\n        \"firstName\": \"firstName6\",\r\n        \"lastName\": \"lastName6\",\r\n        \"emailAddress\": \"emailAddress6\"\r\n      },\r\n      \"deliveryReceiptTimestamp\": 16,\r\n      \"readReceiptTimestamp\": 16,\r\n      \"emailNotificationTimestamp\": 16,\r\n      \"downloadReceiptCounts\": [\r\n        {\r\n          \"fileName\": \"fileName6\",\r\n          \"timestamp\": 16\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"pagination\": {\r\n    \"cursors\": {\r\n      \"before\": \"MTAxNTExOTQ1MjAwNzI5NDE=\",\r\n      \"after\": \"NDMyNzQyODI3OTQw\"\r\n    },\r\n    \"previous\": \"https://tenantapi.d.isym.io/v1/tenantinfo?limit=25&before=MTAxNTExOTQ1MjAwNzI5NDE=\",\r\n    \"next\": \"https://tenantapi.d.isym.io/v1/tenantinfo?limit=25&after=NDMyNzQyODI3OTQw\"\r\n  }\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Fetch message ids using timestamp.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v2/admin/streams/:streamId/messageIds?since=119&to=119&limit=119&offset=119",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v2",
								"admin",
								"streams",
								":streamId",
								"messageIds"
							],
							"query": [
								{
									"key": "since",
									"value": "119"
								},
								{
									"key": "to",
									"value": "119"
								},
								{
									"key": "limit",
									"value": "119"
								},
								{
									"key": "offset",
									"value": "119"
								}
							],
							"variable": [
								{
									"key": "streamId",
									"value": "streamId46"
								}
							]
						},
						"description": "Gets all message Ids that matches a given stream defined by\na streamId in a specified time frame\n"
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/admin/streams/:streamId/messageIds?since=119&to=119&limit=119&offset=119",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"admin",
										"streams",
										":streamId",
										"messageIds"
									],
									"query": [
										{
											"key": "since",
											"value": "119"
										},
										{
											"key": "to",
											"value": "119"
										},
										{
											"key": "limit",
											"value": "119"
										},
										{
											"key": "offset",
											"value": "119"
										}
									],
									"variable": [
										{
											"key": "streamId",
											"value": "streamId46"
										}
									]
								},
								"description": "Gets all message Ids that matches a given stream defined by\na streamId in a specified time frame\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/admin/streams/:streamId/messageIds?since=119&to=119&limit=119&offset=119",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"admin",
										"streams",
										":streamId",
										"messageIds"
									],
									"query": [
										{
											"key": "since",
											"value": "119"
										},
										{
											"key": "to",
											"value": "119"
										},
										{
											"key": "limit",
											"value": "119"
										},
										{
											"key": "offset",
											"value": "119"
										}
									],
									"variable": [
										{
											"key": "streamId",
											"value": "streamId46"
										}
									]
								},
								"description": "Gets all message Ids that matches a given stream defined by\na streamId in a specified time frame\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/admin/streams/:streamId/messageIds?since=119&to=119&limit=119&offset=119",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"admin",
										"streams",
										":streamId",
										"messageIds"
									],
									"query": [
										{
											"key": "since",
											"value": "119"
										},
										{
											"key": "to",
											"value": "119"
										},
										{
											"key": "limit",
											"value": "119"
										},
										{
											"key": "offset",
											"value": "119"
										}
									],
									"variable": [
										{
											"key": "streamId",
											"value": "streamId46"
										}
									]
								},
								"description": "Gets all message Ids that matches a given stream defined by\na streamId in a specified time frame\n"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"Data\": [\r\n    \"Data6\"\r\n  ],\r\n  \"TotalNumberFound\": 16,\r\n  \"numberReturned\": 16,\r\n  \"nextStartNumber\": 16\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/admin/streams/:streamId/messageIds?since=119&to=119&limit=119&offset=119",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"admin",
										"streams",
										":streamId",
										"messageIds"
									],
									"query": [
										{
											"key": "since",
											"value": "119"
										},
										{
											"key": "to",
											"value": "119"
										},
										{
											"key": "limit",
											"value": "119"
										},
										{
											"key": "offset",
											"value": "119"
										}
									],
									"variable": [
										{
											"key": "streamId",
											"value": "streamId46"
										}
									]
								},
								"description": "Gets all message Ids that matches a given stream defined by\na streamId in a specified time frame\n"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/admin/streams/:streamId/messageIds?since=119&to=119&limit=119&offset=119",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"admin",
										"streams",
										":streamId",
										"messageIds"
									],
									"query": [
										{
											"key": "since",
											"value": "119"
										},
										{
											"key": "to",
											"value": "119"
										},
										{
											"key": "limit",
											"value": "119"
										},
										{
											"key": "offset",
											"value": "119"
										}
									],
									"variable": [
										{
											"key": "streamId",
											"value": "streamId46"
										}
									]
								},
								"description": "Gets all message Ids that matches a given stream defined by\na streamId in a specified time frame\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_422",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/admin/streams/:streamId/messageIds?since=119&to=119&limit=119&offset=119",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"admin",
										"streams",
										":streamId",
										"messageIds"
									],
									"query": [
										{
											"key": "since",
											"value": "119"
										},
										{
											"key": "to",
											"value": "119"
										},
										{
											"key": "limit",
											"value": "119"
										},
										{
											"key": "offset",
											"value": "119"
										}
									],
									"variable": [
										{
											"key": "streamId",
											"value": "streamId46"
										}
									]
								},
								"description": "Gets all message Ids that matches a given stream defined by\na streamId in a specified time frame\n"
							},
							"status": "Unprocessable Entity: Timestamp range is bigger than twenty-four hours.",
							"code": 422,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_404",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/admin/streams/:streamId/messageIds?since=119&to=119&limit=119&offset=119",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"admin",
										"streams",
										":streamId",
										"messageIds"
									],
									"query": [
										{
											"key": "since",
											"value": "119"
										},
										{
											"key": "to",
											"value": "119"
										},
										{
											"key": "limit",
											"value": "119"
										},
										{
											"key": "offset",
											"value": "119"
										}
									],
									"variable": [
										{
											"key": "streamId",
											"value": "streamId46"
										}
									]
								},
								"description": "Gets all message Ids that matches a given stream defined by\na streamId in a specified time frame\n"
							},
							"status": "Not Found: Stream cannot be found.",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Suppress a message",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/messagesuppression/:id/suppress",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"messagesuppression",
								":id",
								"suppress"
							],
							"variable": [
								{
									"key": "id",
									"value": "id6"
								}
							]
						},
						"description": "Suppress a message"
					},
					"response": [
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/messagesuppression/:id/suppress",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"messagesuppression",
										":id",
										"suppress"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Suppress a message"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/messagesuppression/:id/suppress",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"messagesuppression",
										":id",
										"suppress"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Suppress a message"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/messagesuppression/:id/suppress",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"messagesuppression",
										":id",
										"suppress"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Suppress a message"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/messagesuppression/:id/suppress",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"messagesuppression",
										":id",
										"suppress"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Suppress a message"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"messageId\": \"messageId6\",\r\n  \"suppressed\": false,\r\n  \"suppressionDate\": 16\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/messagesuppression/:id/suppress",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"messagesuppression",
										":id",
										"suppress"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Suppress a message"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				}
			]
		},
		{
			"name": "Streams",
			"item": [
				{
					"name": "Create a new single or multi party instant message conversation between the caller and specified users.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  16\r\n]"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/im/create",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"im",
								"create"
							]
						},
						"description": "At least one user ID must be provided or\nan error response will be sent.\n\nThe caller is implicitly included in the members of the\ncreated chat.\n\nDuplicate users will be included in the membership of the chat but\nthe duplication will be silently ignored.\n\nIf there is an existing IM conversation with the same set of participants then\nthe id of that existing stream will be returned.\n\nThis method was incorrectly specified to take a query parameter in\nversion 1.0 of this specification but now expects a JSON array of\nuser IDs in the body of the request.\n"
					},
					"response": [
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  16\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/im/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"im",
										"create"
									]
								},
								"description": "At least one user ID must be provided or\nan error response will be sent.\n\nThe caller is implicitly included in the members of the\ncreated chat.\n\nDuplicate users will be included in the membership of the chat but\nthe duplication will be silently ignored.\n\nIf there is an existing IM conversation with the same set of participants then\nthe id of that existing stream will be returned.\n\nThis method was incorrectly specified to take a query parameter in\nversion 1.0 of this specification but now expects a JSON array of\nuser IDs in the body of the request.\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  16\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/im/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"im",
										"create"
									]
								},
								"description": "At least one user ID must be provided or\nan error response will be sent.\n\nThe caller is implicitly included in the members of the\ncreated chat.\n\nDuplicate users will be included in the membership of the chat but\nthe duplication will be silently ignored.\n\nIf there is an existing IM conversation with the same set of participants then\nthe id of that existing stream will be returned.\n\nThis method was incorrectly specified to take a query parameter in\nversion 1.0 of this specification but now expects a JSON array of\nuser IDs in the body of the request.\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  16\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/im/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"im",
										"create"
									]
								},
								"description": "At least one user ID must be provided or\nan error response will be sent.\n\nThe caller is implicitly included in the members of the\ncreated chat.\n\nDuplicate users will be included in the membership of the chat but\nthe duplication will be silently ignored.\n\nIf there is an existing IM conversation with the same set of participants then\nthe id of that existing stream will be returned.\n\nThis method was incorrectly specified to take a query parameter in\nversion 1.0 of this specification but now expects a JSON array of\nuser IDs in the body of the request.\n"
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  16\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/im/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"im",
										"create"
									]
								},
								"description": "At least one user ID must be provided or\nan error response will be sent.\n\nThe caller is implicitly included in the members of the\ncreated chat.\n\nDuplicate users will be included in the membership of the chat but\nthe duplication will be silently ignored.\n\nIf there is an existing IM conversation with the same set of participants then\nthe id of that existing stream will be returned.\n\nThis method was incorrectly specified to take a query parameter in\nversion 1.0 of this specification but now expects a JSON array of\nuser IDs in the body of the request.\n"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"id\": \"id36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  16\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/im/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"im",
										"create"
									]
								},
								"description": "At least one user ID must be provided or\nan error response will be sent.\n\nThe caller is implicitly included in the members of the\ncreated chat.\n\nDuplicate users will be included in the membership of the chat but\nthe duplication will be silently ignored.\n\nIf there is an existing IM conversation with the same set of participants then\nthe id of that existing stream will be returned.\n\nThis method was incorrectly specified to take a query parameter in\nversion 1.0 of this specification but now expects a JSON array of\nuser IDs in the body of the request.\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "Create a new chatroom.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"name36\",\r\n  \"keywords\": [\r\n    {\r\n      \"key\": \"key36\",\r\n      \"value\": \"value36\"\r\n    }\r\n  ],\r\n  \"description\": \"description36\",\r\n  \"membersCanInvite\": false,\r\n  \"discoverable\": false,\r\n  \"public\": false,\r\n  \"readOnly\": false,\r\n  \"copyProtected\": false,\r\n  \"crossPod\": false,\r\n  \"viewHistory\": false,\r\n  \"multiLateralRoom\": false,\r\n  \"subType\": \"subType36\"\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v3/room/create",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v3",
								"room",
								"create"
							]
						},
						"description": "Create a new chatroom.\n\nIf no  attributes are specified, the room is created as a private chatroom.\n"
					},
					"response": [
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name36\",\r\n  \"keywords\": [\r\n    {\r\n      \"key\": \"key36\",\r\n      \"value\": \"value36\"\r\n    }\r\n  ],\r\n  \"description\": \"description36\",\r\n  \"membersCanInvite\": false,\r\n  \"discoverable\": false,\r\n  \"public\": false,\r\n  \"readOnly\": false,\r\n  \"copyProtected\": false,\r\n  \"crossPod\": false,\r\n  \"viewHistory\": false,\r\n  \"multiLateralRoom\": false,\r\n  \"subType\": \"subType36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/room/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"room",
										"create"
									]
								},
								"description": "Create a new chatroom.\n\nIf no  attributes are specified, the room is created as a private chatroom.\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name36\",\r\n  \"keywords\": [\r\n    {\r\n      \"key\": \"key36\",\r\n      \"value\": \"value36\"\r\n    }\r\n  ],\r\n  \"description\": \"description36\",\r\n  \"membersCanInvite\": false,\r\n  \"discoverable\": false,\r\n  \"public\": false,\r\n  \"readOnly\": false,\r\n  \"copyProtected\": false,\r\n  \"crossPod\": false,\r\n  \"viewHistory\": false,\r\n  \"multiLateralRoom\": false,\r\n  \"subType\": \"subType36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/room/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"room",
										"create"
									]
								},
								"description": "Create a new chatroom.\n\nIf no  attributes are specified, the room is created as a private chatroom.\n"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"roomAttributes\": {\r\n    \"name\": \"name36\",\r\n    \"keywords\": [\r\n      {\r\n        \"key\": \"key36\",\r\n        \"value\": \"value36\"\r\n      }\r\n    ],\r\n    \"description\": \"description36\",\r\n    \"membersCanInvite\": false,\r\n    \"discoverable\": false,\r\n    \"public\": false,\r\n    \"readOnly\": false,\r\n    \"copyProtected\": false,\r\n    \"crossPod\": false,\r\n    \"viewHistory\": false,\r\n    \"multiLateralRoom\": false,\r\n    \"subType\": \"subType36\"\r\n  },\r\n  \"roomSystemInfo\": {\r\n    \"id\": \"id36\",\r\n    \"creationDate\": 94,\r\n    \"createdByUserId\": 94,\r\n    \"active\": false\r\n  }\r\n}"
						},
						{
							"name": "Response_451",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name36\",\r\n  \"keywords\": [\r\n    {\r\n      \"key\": \"key36\",\r\n      \"value\": \"value36\"\r\n    }\r\n  ],\r\n  \"description\": \"description36\",\r\n  \"membersCanInvite\": false,\r\n  \"discoverable\": false,\r\n  \"public\": false,\r\n  \"readOnly\": false,\r\n  \"copyProtected\": false,\r\n  \"crossPod\": false,\r\n  \"viewHistory\": false,\r\n  \"multiLateralRoom\": false,\r\n  \"subType\": \"subType36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/room/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"room",
										"create"
									]
								},
								"description": "Create a new chatroom.\n\nIf no  attributes are specified, the room is created as a private chatroom.\n"
							},
							"status": "Unavailable for Legal Reasons: Compliance Issues found in room creation request.",
							"code": 451,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name36\",\r\n  \"keywords\": [\r\n    {\r\n      \"key\": \"key36\",\r\n      \"value\": \"value36\"\r\n    }\r\n  ],\r\n  \"description\": \"description36\",\r\n  \"membersCanInvite\": false,\r\n  \"discoverable\": false,\r\n  \"public\": false,\r\n  \"readOnly\": false,\r\n  \"copyProtected\": false,\r\n  \"crossPod\": false,\r\n  \"viewHistory\": false,\r\n  \"multiLateralRoom\": false,\r\n  \"subType\": \"subType36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/room/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"room",
										"create"
									]
								},
								"description": "Create a new chatroom.\n\nIf no  attributes are specified, the room is created as a private chatroom.\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name36\",\r\n  \"keywords\": [\r\n    {\r\n      \"key\": \"key36\",\r\n      \"value\": \"value36\"\r\n    }\r\n  ],\r\n  \"description\": \"description36\",\r\n  \"membersCanInvite\": false,\r\n  \"discoverable\": false,\r\n  \"public\": false,\r\n  \"readOnly\": false,\r\n  \"copyProtected\": false,\r\n  \"crossPod\": false,\r\n  \"viewHistory\": false,\r\n  \"multiLateralRoom\": false,\r\n  \"subType\": \"subType36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/room/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"room",
										"create"
									]
								},
								"description": "Create a new chatroom.\n\nIf no  attributes are specified, the room is created as a private chatroom.\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name36\",\r\n  \"keywords\": [\r\n    {\r\n      \"key\": \"key36\",\r\n      \"value\": \"value36\"\r\n    }\r\n  ],\r\n  \"description\": \"description36\",\r\n  \"membersCanInvite\": false,\r\n  \"discoverable\": false,\r\n  \"public\": false,\r\n  \"readOnly\": false,\r\n  \"copyProtected\": false,\r\n  \"crossPod\": false,\r\n  \"viewHistory\": false,\r\n  \"multiLateralRoom\": false,\r\n  \"subType\": \"subType36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/room/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"room",
										"create"
									]
								},
								"description": "Create a new chatroom.\n\nIf no  attributes are specified, the room is created as a private chatroom.\n"
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "Search rooms according to the specified criteria.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"query\": \"query36\",\r\n  \"labels\": [\r\n    \"labels36\"\r\n  ],\r\n  \"active\": false,\r\n  \"private\": false,\r\n  \"owner\": {\r\n    \"id\": 94\r\n  },\r\n  \"creator\": {\r\n    \"id\": 94\r\n  },\r\n  \"member\": {\r\n    \"id\": 94\r\n  },\r\n  \"sortOrder\": \"BASIC\",\r\n  \"subType\": \"subType36\"\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v3/room/search?skip=0&limit=32",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v3",
								"room",
								"search"
							],
							"query": [
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "32"
								}
							]
						},
						"description": "Search rooms according to the specified criteria."
					},
					"response": [
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"query\": \"query36\",\r\n  \"labels\": [\r\n    \"labels36\"\r\n  ],\r\n  \"active\": false,\r\n  \"private\": false,\r\n  \"owner\": {\r\n    \"id\": 94\r\n  },\r\n  \"creator\": {\r\n    \"id\": 94\r\n  },\r\n  \"member\": {\r\n    \"id\": 94\r\n  },\r\n  \"sortOrder\": \"BASIC\",\r\n  \"subType\": \"subType36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/room/search?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"room",
										"search"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "Search rooms according to the specified criteria."
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"query\": \"query36\",\r\n  \"labels\": [\r\n    \"labels36\"\r\n  ],\r\n  \"active\": false,\r\n  \"private\": false,\r\n  \"owner\": {\r\n    \"id\": 94\r\n  },\r\n  \"creator\": {\r\n    \"id\": 94\r\n  },\r\n  \"member\": {\r\n    \"id\": 94\r\n  },\r\n  \"sortOrder\": \"BASIC\",\r\n  \"subType\": \"subType36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/room/search?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"room",
										"search"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "Search rooms according to the specified criteria."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"query\": \"query36\",\r\n  \"labels\": [\r\n    \"labels36\"\r\n  ],\r\n  \"active\": false,\r\n  \"private\": false,\r\n  \"owner\": {\r\n    \"id\": 94\r\n  },\r\n  \"creator\": {\r\n    \"id\": 94\r\n  },\r\n  \"member\": {\r\n    \"id\": 94\r\n  },\r\n  \"sortOrder\": \"BASIC\",\r\n  \"subType\": \"subType36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/room/search?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"room",
										"search"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "Search rooms according to the specified criteria."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"query\": \"query36\",\r\n  \"labels\": [\r\n    \"labels36\"\r\n  ],\r\n  \"active\": false,\r\n  \"private\": false,\r\n  \"owner\": {\r\n    \"id\": 94\r\n  },\r\n  \"creator\": {\r\n    \"id\": 94\r\n  },\r\n  \"member\": {\r\n    \"id\": 94\r\n  },\r\n  \"sortOrder\": \"BASIC\",\r\n  \"subType\": \"subType36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/room/search?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"room",
										"search"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "Search rooms according to the specified criteria."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"query\": \"query36\",\r\n  \"labels\": [\r\n    \"labels36\"\r\n  ],\r\n  \"active\": false,\r\n  \"private\": false,\r\n  \"owner\": {\r\n    \"id\": 94\r\n  },\r\n  \"creator\": {\r\n    \"id\": 94\r\n  },\r\n  \"member\": {\r\n    \"id\": 94\r\n  },\r\n  \"sortOrder\": \"BASIC\",\r\n  \"subType\": \"subType36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/room/search?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"room",
										"search"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "Search rooms according to the specified criteria."
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"count\": 94,\r\n  \"skip\": 94,\r\n  \"limit\": 94,\r\n  \"query\": {\r\n    \"query\": \"query36\",\r\n    \"labels\": [\r\n      \"labels36\"\r\n    ],\r\n    \"active\": false,\r\n    \"private\": false,\r\n    \"owner\": {\r\n      \"id\": 94\r\n    },\r\n    \"creator\": {\r\n      \"id\": 94\r\n    },\r\n    \"member\": {\r\n      \"id\": 94\r\n    },\r\n    \"sortOrder\": \"BASIC\",\r\n    \"subType\": \"subType36\"\r\n  },\r\n  \"rooms\": [\r\n    {\r\n      \"roomAttributes\": {\r\n        \"name\": \"name36\",\r\n        \"keywords\": [\r\n          {\r\n            \"key\": \"key36\",\r\n            \"value\": \"value36\"\r\n          }\r\n        ],\r\n        \"description\": \"description36\",\r\n        \"membersCanInvite\": false,\r\n        \"discoverable\": false,\r\n        \"public\": false,\r\n        \"readOnly\": false,\r\n        \"copyProtected\": false,\r\n        \"crossPod\": false,\r\n        \"viewHistory\": false,\r\n        \"multiLateralRoom\": false,\r\n        \"subType\": \"subType36\"\r\n      },\r\n      \"roomSystemInfo\": {\r\n        \"id\": \"id36\",\r\n        \"creationDate\": 94,\r\n        \"createdByUserId\": 94,\r\n        \"active\": false\r\n      }\r\n    }\r\n  ],\r\n  \"facetedMatchCount\": [\r\n    {\r\n      \"facet\": \"facet36\",\r\n      \"count\": 94\r\n    }\r\n  ]\r\n}"
						}
					]
				},
				{
					"name": "Get information about a partcular chatroom.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v3/room/:id/info",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v3",
								"room",
								":id",
								"info"
							],
							"variable": [
								{
									"key": "id",
									"value": "id6"
								}
							]
						},
						"description": "Get information about a partcular chatroom."
					},
					"response": [
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/room/:id/info",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"room",
										":id",
										"info"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Get information about a partcular chatroom."
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/room/:id/info",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"room",
										":id",
										"info"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Get information about a partcular chatroom."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/room/:id/info",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"room",
										":id",
										"info"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Get information about a partcular chatroom."
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"roomAttributes\": {\r\n    \"name\": \"name36\",\r\n    \"keywords\": [\r\n      {\r\n        \"key\": \"key36\",\r\n        \"value\": \"value36\"\r\n      }\r\n    ],\r\n    \"description\": \"description36\",\r\n    \"membersCanInvite\": false,\r\n    \"discoverable\": false,\r\n    \"public\": false,\r\n    \"readOnly\": false,\r\n    \"copyProtected\": false,\r\n    \"crossPod\": false,\r\n    \"viewHistory\": false,\r\n    \"multiLateralRoom\": false,\r\n    \"subType\": \"subType36\"\r\n  },\r\n  \"roomSystemInfo\": {\r\n    \"id\": \"id36\",\r\n    \"creationDate\": 94,\r\n    \"createdByUserId\": 94,\r\n    \"active\": false\r\n  }\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/room/:id/info",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"room",
										":id",
										"info"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Get information about a partcular chatroom."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/room/:id/info",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"room",
										":id",
										"info"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Get information about a partcular chatroom."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "Deactivate or reactivate a chatroom. At creation, a new chatroom is active.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/room/:id/setActive?active=false",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"room",
								":id",
								"setActive"
							],
							"query": [
								{
									"key": "active",
									"value": "false"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "id6"
								}
							]
						},
						"description": "Deactivate or reactivate a chatroom. At creation, a new chatroom is active."
					},
					"response": [
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/room/:id/setActive?active=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"room",
										":id",
										"setActive"
									],
									"query": [
										{
											"key": "active",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Deactivate or reactivate a chatroom. At creation, a new chatroom is active."
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/room/:id/setActive?active=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"room",
										":id",
										"setActive"
									],
									"query": [
										{
											"key": "active",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Deactivate or reactivate a chatroom. At creation, a new chatroom is active."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/room/:id/setActive?active=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"room",
										":id",
										"setActive"
									],
									"query": [
										{
											"key": "active",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Deactivate or reactivate a chatroom. At creation, a new chatroom is active."
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"roomAttributes\": {\r\n    \"name\": \"name36\",\r\n    \"description\": \"description36\",\r\n    \"membersCanInvite\": false,\r\n    \"discoverable\": false\r\n  },\r\n  \"roomSystemInfo\": {\r\n    \"id\": \"id36\",\r\n    \"creationDate\": 94,\r\n    \"createdByUserId\": 94,\r\n    \"active\": false\r\n  },\r\n  \"immutableRoomAttributes\": {\r\n    \"public\": false,\r\n    \"readOnly\": false,\r\n    \"copyProtected\": false\r\n  }\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/room/:id/setActive?active=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"room",
										":id",
										"setActive"
									],
									"query": [
										{
											"key": "active",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Deactivate or reactivate a chatroom. At creation, a new chatroom is active."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/room/:id/setActive?active=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"room",
										":id",
										"setActive"
									],
									"query": [
										{
											"key": "active",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Deactivate or reactivate a chatroom. At creation, a new chatroom is active."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "Update the attributes of an existing chatroom.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"name36\",\r\n  \"keywords\": [\r\n    {\r\n      \"key\": \"key36\",\r\n      \"value\": \"value36\"\r\n    }\r\n  ],\r\n  \"description\": \"description36\",\r\n  \"membersCanInvite\": false,\r\n  \"discoverable\": false,\r\n  \"public\": false,\r\n  \"readOnly\": false,\r\n  \"copyProtected\": false,\r\n  \"crossPod\": false,\r\n  \"viewHistory\": false,\r\n  \"multiLateralRoom\": false,\r\n  \"subType\": \"subType36\"\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v3/room/:id/update",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v3",
								"room",
								":id",
								"update"
							],
							"variable": [
								{
									"key": "id",
									"value": "id6"
								}
							]
						},
						"description": "Update the attributes of an existing chatroom."
					},
					"response": [
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name36\",\r\n  \"keywords\": [\r\n    {\r\n      \"key\": \"key36\",\r\n      \"value\": \"value36\"\r\n    }\r\n  ],\r\n  \"description\": \"description36\",\r\n  \"membersCanInvite\": false,\r\n  \"discoverable\": false,\r\n  \"public\": false,\r\n  \"readOnly\": false,\r\n  \"copyProtected\": false,\r\n  \"crossPod\": false,\r\n  \"viewHistory\": false,\r\n  \"multiLateralRoom\": false,\r\n  \"subType\": \"subType36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/room/:id/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"room",
										":id",
										"update"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Update the attributes of an existing chatroom."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name36\",\r\n  \"keywords\": [\r\n    {\r\n      \"key\": \"key36\",\r\n      \"value\": \"value36\"\r\n    }\r\n  ],\r\n  \"description\": \"description36\",\r\n  \"membersCanInvite\": false,\r\n  \"discoverable\": false,\r\n  \"public\": false,\r\n  \"readOnly\": false,\r\n  \"copyProtected\": false,\r\n  \"crossPod\": false,\r\n  \"viewHistory\": false,\r\n  \"multiLateralRoom\": false,\r\n  \"subType\": \"subType36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/room/:id/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"room",
										":id",
										"update"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Update the attributes of an existing chatroom."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name36\",\r\n  \"keywords\": [\r\n    {\r\n      \"key\": \"key36\",\r\n      \"value\": \"value36\"\r\n    }\r\n  ],\r\n  \"description\": \"description36\",\r\n  \"membersCanInvite\": false,\r\n  \"discoverable\": false,\r\n  \"public\": false,\r\n  \"readOnly\": false,\r\n  \"copyProtected\": false,\r\n  \"crossPod\": false,\r\n  \"viewHistory\": false,\r\n  \"multiLateralRoom\": false,\r\n  \"subType\": \"subType36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/room/:id/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"room",
										":id",
										"update"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Update the attributes of an existing chatroom."
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"roomAttributes\": {\r\n    \"name\": \"name36\",\r\n    \"keywords\": [\r\n      {\r\n        \"key\": \"key36\",\r\n        \"value\": \"value36\"\r\n      }\r\n    ],\r\n    \"description\": \"description36\",\r\n    \"membersCanInvite\": false,\r\n    \"discoverable\": false,\r\n    \"public\": false,\r\n    \"readOnly\": false,\r\n    \"copyProtected\": false,\r\n    \"crossPod\": false,\r\n    \"viewHistory\": false,\r\n    \"multiLateralRoom\": false,\r\n    \"subType\": \"subType36\"\r\n  },\r\n  \"roomSystemInfo\": {\r\n    \"id\": \"id36\",\r\n    \"creationDate\": 94,\r\n    \"createdByUserId\": 94,\r\n    \"active\": false\r\n  }\r\n}"
						},
						{
							"name": "Response_451",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name36\",\r\n  \"keywords\": [\r\n    {\r\n      \"key\": \"key36\",\r\n      \"value\": \"value36\"\r\n    }\r\n  ],\r\n  \"description\": \"description36\",\r\n  \"membersCanInvite\": false,\r\n  \"discoverable\": false,\r\n  \"public\": false,\r\n  \"readOnly\": false,\r\n  \"copyProtected\": false,\r\n  \"crossPod\": false,\r\n  \"viewHistory\": false,\r\n  \"multiLateralRoom\": false,\r\n  \"subType\": \"subType36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/room/:id/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"room",
										":id",
										"update"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Update the attributes of an existing chatroom."
							},
							"status": "Unavailable for Legal Reasons: Compliance Issues found in room update request.",
							"code": 451,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name36\",\r\n  \"keywords\": [\r\n    {\r\n      \"key\": \"key36\",\r\n      \"value\": \"value36\"\r\n    }\r\n  ],\r\n  \"description\": \"description36\",\r\n  \"membersCanInvite\": false,\r\n  \"discoverable\": false,\r\n  \"public\": false,\r\n  \"readOnly\": false,\r\n  \"copyProtected\": false,\r\n  \"crossPod\": false,\r\n  \"viewHistory\": false,\r\n  \"multiLateralRoom\": false,\r\n  \"subType\": \"subType36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/room/:id/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"room",
										":id",
										"update"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Update the attributes of an existing chatroom."
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name36\",\r\n  \"keywords\": [\r\n    {\r\n      \"key\": \"key36\",\r\n      \"value\": \"value36\"\r\n    }\r\n  ],\r\n  \"description\": \"description36\",\r\n  \"membersCanInvite\": false,\r\n  \"discoverable\": false,\r\n  \"public\": false,\r\n  \"readOnly\": false,\r\n  \"copyProtected\": false,\r\n  \"crossPod\": false,\r\n  \"viewHistory\": false,\r\n  \"multiLateralRoom\": false,\r\n  \"subType\": \"subType36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/room/:id/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"room",
										":id",
										"update"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Update the attributes of an existing chatroom."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "Retrieve a list of all streams of which the requesting user is a member,\nsorted by creation date (ascending).\n",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"streamTypes\": [\r\n    {\r\n      \"type\": \"MIM\"\r\n    }\r\n  ],\r\n  \"includeInactiveStreams\": false\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/streams/list?skip=16&limit=16",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"streams",
								"list"
							],
							"query": [
								{
									"key": "skip",
									"value": "16"
								},
								{
									"key": "limit",
									"value": "16"
								}
							]
						},
						"description": "Retrieve a list of all streams of which the requesting user is a member,\nsorted by creation date (ascending).\n"
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"streamTypes\": [\r\n    {\r\n      \"type\": \"MIM\"\r\n    }\r\n  ],\r\n  \"includeInactiveStreams\": false\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/streams/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"streams",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "Retrieve a list of all streams of which the requesting user is a member,\nsorted by creation date (ascending).\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"streamTypes\": [\r\n    {\r\n      \"type\": \"MIM\"\r\n    }\r\n  ],\r\n  \"includeInactiveStreams\": false\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/streams/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"streams",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "Retrieve a list of all streams of which the requesting user is a member,\nsorted by creation date (ascending).\n"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  {\r\n    \"id\": \"id6\",\r\n    \"crossPod\": false,\r\n    \"active\": false,\r\n    \"streamType\": {\r\n      \"type\": \"MIM\"\r\n    },\r\n    \"streamAttributes\": {\r\n      \"members\": [\r\n        16\r\n      ]\r\n    },\r\n    \"roomAttributes\": {\r\n      \"name\": \"name6\"\r\n    }\r\n  }\r\n]"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"streamTypes\": [\r\n    {\r\n      \"type\": \"MIM\"\r\n    }\r\n  ],\r\n  \"includeInactiveStreams\": false\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/streams/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"streams",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "Retrieve a list of all streams of which the requesting user is a member,\nsorted by creation date (ascending).\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"streamTypes\": [\r\n    {\r\n      \"type\": \"MIM\"\r\n    }\r\n  ],\r\n  \"includeInactiveStreams\": false\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/streams/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"streams",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "Retrieve a list of all streams of which the requesting user is a member,\nsorted by creation date (ascending).\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"streamTypes\": [\r\n    {\r\n      \"type\": \"MIM\"\r\n    }\r\n  ],\r\n  \"includeInactiveStreams\": false\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/streams/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"streams",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "Retrieve a list of all streams of which the requesting user is a member,\nsorted by creation date (ascending).\n"
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "Get information about a partcular stream.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v2/streams/:sid/info",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v2",
								"streams",
								":sid",
								"info"
							],
							"variable": [
								{
									"key": "sid",
									"value": "sid6"
								}
							]
						},
						"description": "Get information about a partcular stream."
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/streams/:sid/info",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"streams",
										":sid",
										"info"
									],
									"variable": [
										{
											"key": "sid",
											"value": "sid6"
										}
									]
								},
								"description": "Get information about a partcular stream."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/streams/:sid/info",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"streams",
										":sid",
										"info"
									],
									"variable": [
										{
											"key": "sid",
											"value": "sid6"
										}
									]
								},
								"description": "Get information about a partcular stream."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/streams/:sid/info",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"streams",
										":sid",
										"info"
									],
									"variable": [
										{
											"key": "sid",
											"value": "sid6"
										}
									]
								},
								"description": "Get information about a partcular stream."
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"id\": \"id6\",\r\n  \"crossPod\": false,\r\n  \"origin\": \"origin6\",\r\n  \"active\": false,\r\n  \"lastMessageDate\": 16,\r\n  \"streamType\": {\r\n    \"type\": \"type6\"\r\n  },\r\n  \"streamAttributes\": {\r\n    \"members\": [\r\n      16\r\n    ]\r\n  },\r\n  \"roomAttributes\": {\r\n    \"name\": \"name6\"\r\n  }\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/streams/:sid/info",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"streams",
										":sid",
										"info"
									],
									"variable": [
										{
											"key": "sid",
											"value": "sid6"
										}
									]
								},
								"description": "Get information about a partcular stream."
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/streams/:sid/info",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"streams",
										":sid",
										"info"
									],
									"variable": [
										{
											"key": "sid",
											"value": "sid6"
										}
									]
								},
								"description": "Get information about a partcular stream."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "Get attachments in a particular stream.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/streams/:sid/attachments?since=0&to=88888888&limit=32&sortDir=sortDir",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"streams",
								":sid",
								"attachments"
							],
							"query": [
								{
									"key": "since",
									"value": "0"
								},
								{
									"key": "to",
									"value": "88888888"
								},
								{
									"key": "limit",
									"value": "32"
								},
								{
									"key": "sortDir",
									"value": "sortDir"
								}
							],
							"variable": [
								{
									"key": "sid",
									"value": "sid6"
								}
							]
						},
						"description": "Get attachments in a particular stream."
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/streams/:sid/attachments?since=16&to=16&limit=16&sortDir=sortDir6",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"streams",
										":sid",
										"attachments"
									],
									"query": [
										{
											"key": "since",
											"value": "16"
										},
										{
											"key": "to",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										},
										{
											"key": "sortDir",
											"value": "sortDir6"
										}
									],
									"variable": [
										{
											"key": "sid",
											"value": "sid6"
										}
									]
								},
								"description": "Get attachments in a particular stream."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/streams/:sid/attachments?since=16&to=16&limit=16&sortDir=sortDir6",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"streams",
										":sid",
										"attachments"
									],
									"query": [
										{
											"key": "since",
											"value": "16"
										},
										{
											"key": "to",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										},
										{
											"key": "sortDir",
											"value": "sortDir6"
										}
									],
									"variable": [
										{
											"key": "sid",
											"value": "sid6"
										}
									]
								},
								"description": "Get attachments in a particular stream."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/streams/:sid/attachments?since=16&to=16&limit=16&sortDir=sortDir6",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"streams",
										":sid",
										"attachments"
									],
									"query": [
										{
											"key": "since",
											"value": "16"
										},
										{
											"key": "to",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										},
										{
											"key": "sortDir",
											"value": "sortDir6"
										}
									],
									"variable": [
										{
											"key": "sid",
											"value": "sid6"
										}
									]
								},
								"description": "Get attachments in a particular stream."
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/streams/:sid/attachments?since=16&to=16&limit=16&sortDir=sortDir6",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"streams",
										":sid",
										"attachments"
									],
									"query": [
										{
											"key": "since",
											"value": "16"
										},
										{
											"key": "to",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										},
										{
											"key": "sortDir",
											"value": "sortDir6"
										}
									],
									"variable": [
										{
											"key": "sid",
											"value": "sid6"
										}
									]
								},
								"description": "Get attachments in a particular stream."
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  {\r\n    \"messageId\": \"messageId6\",\r\n    \"ingestionDate\": 16,\r\n    \"userId\": 16,\r\n    \"fileId\": \"fileId6\",\r\n    \"name\": \"name6\",\r\n    \"size\": 16,\r\n    \"content-type\": \"content-type6\",\r\n    \"previews\": [\r\n      {\r\n        \"fileId\": \"fileId6\",\r\n        \"width\": 16\r\n      }\r\n    ]\r\n  }\r\n]"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/streams/:sid/attachments?since=16&to=16&limit=16&sortDir=sortDir6",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"streams",
										":sid",
										"attachments"
									],
									"query": [
										{
											"key": "since",
											"value": "16"
										},
										{
											"key": "to",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										},
										{
											"key": "sortDir",
											"value": "sortDir6"
										}
									],
									"variable": [
										{
											"key": "sid",
											"value": "sid6"
										}
									]
								},
								"description": "Get attachments in a particular stream."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Create a new single or multi party instant message conversation",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  16\r\n]"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/im/create",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"im",
								"create"
							]
						},
						"description": "At least two user IDs must be provided or\nan error response will be sent.\n\nThe caller is not included in the members of the\ncreated chat.\n\nDuplicate users will be included in the membership of the chat but\nthe duplication will be silently ignored.\n\nIf there is an existing IM conversation with the same set of participants then\nthe id of that existing stream will be returned.\n"
					},
					"response": [
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  16\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/im/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"im",
										"create"
									]
								},
								"description": "At least two user IDs must be provided or\nan error response will be sent.\n\nThe caller is not included in the members of the\ncreated chat.\n\nDuplicate users will be included in the membership of the chat but\nthe duplication will be silently ignored.\n\nIf there is an existing IM conversation with the same set of participants then\nthe id of that existing stream will be returned.\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  16\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/im/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"im",
										"create"
									]
								},
								"description": "At least two user IDs must be provided or\nan error response will be sent.\n\nThe caller is not included in the members of the\ncreated chat.\n\nDuplicate users will be included in the membership of the chat but\nthe duplication will be silently ignored.\n\nIf there is an existing IM conversation with the same set of participants then\nthe id of that existing stream will be returned.\n"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"id\": \"id36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  16\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/im/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"im",
										"create"
									]
								},
								"description": "At least two user IDs must be provided or\nan error response will be sent.\n\nThe caller is not included in the members of the\ncreated chat.\n\nDuplicate users will be included in the membership of the chat but\nthe duplication will be silently ignored.\n\nIf there is an existing IM conversation with the same set of participants then\nthe id of that existing stream will be returned.\n"
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  16\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/im/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"im",
										"create"
									]
								},
								"description": "At least two user IDs must be provided or\nan error response will be sent.\n\nThe caller is not included in the members of the\ncreated chat.\n\nDuplicate users will be included in the membership of the chat but\nthe duplication will be silently ignored.\n\nIf there is an existing IM conversation with the same set of participants then\nthe id of that existing stream will be returned.\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  16\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/im/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"im",
										"create"
									]
								},
								"description": "At least two user IDs must be provided or\nan error response will be sent.\n\nThe caller is not included in the members of the\ncreated chat.\n\nDuplicate users will be included in the membership of the chat but\nthe duplication will be silently ignored.\n\nIf there is an existing IM conversation with the same set of participants then\nthe id of that existing stream will be returned.\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Deactivate or reactivate a chatroom via AC Portal.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/room/:id/setActive?active=false",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"room",
								":id",
								"setActive"
							],
							"query": [
								{
									"key": "active",
									"value": "false"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "id6"
								}
							]
						},
						"description": "Deactivate or reactivate a chatroom via AC Portal."
					},
					"response": [
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/room/:id/setActive?active=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"room",
										":id",
										"setActive"
									],
									"query": [
										{
											"key": "active",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Deactivate or reactivate a chatroom via AC Portal."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/room/:id/setActive?active=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"room",
										":id",
										"setActive"
									],
									"query": [
										{
											"key": "active",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Deactivate or reactivate a chatroom via AC Portal."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/room/:id/setActive?active=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"room",
										":id",
										"setActive"
									],
									"query": [
										{
											"key": "active",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Deactivate or reactivate a chatroom via AC Portal."
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"roomAttributes\": {\r\n    \"name\": \"name36\",\r\n    \"description\": \"description36\",\r\n    \"membersCanInvite\": false,\r\n    \"discoverable\": false\r\n  },\r\n  \"roomSystemInfo\": {\r\n    \"id\": \"id36\",\r\n    \"creationDate\": 94,\r\n    \"createdByUserId\": 94,\r\n    \"active\": false\r\n  },\r\n  \"immutableRoomAttributes\": {\r\n    \"public\": false,\r\n    \"readOnly\": false,\r\n    \"copyProtected\": false\r\n  }\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/room/:id/setActive?active=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"room",
										":id",
										"setActive"
									],
									"query": [
										{
											"key": "active",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Deactivate or reactivate a chatroom via AC Portal."
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/room/:id/setActive?active=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"room",
										":id",
										"setActive"
									],
									"query": [
										{
											"key": "active",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Deactivate or reactivate a chatroom via AC Portal."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Retrieve all the streams across the enterprise where the membership of the stream has been modified between a given time range",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Session authentication token.",
								"key": "sessionToken",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"streamTypes\": [\r\n    {\r\n      \"type\": \"type6\"\r\n    }\r\n  ],\r\n  \"scope\": \"scope6\",\r\n  \"origin\": \"origin6\",\r\n  \"status\": \"status6\",\r\n  \"privacy\": \"privacy6\",\r\n  \"startDate\": 16,\r\n  \"endDate\": 16\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v2/admin/streams/list?skip=16&limit=16",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v2",
								"admin",
								"streams",
								"list"
							],
							"query": [
								{
									"key": "skip",
									"value": "16"
								},
								{
									"key": "limit",
									"value": "16"
								}
							]
						},
						"description": "Retrieve all the streams across the enterprise where the membership of the stream has been modified between a given time range\n"
					},
					"response": [
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Session authentication token.",
										"key": "sessionToken",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"streamTypes\": [\r\n    {\r\n      \"type\": \"type6\"\r\n    }\r\n  ],\r\n  \"scope\": \"scope6\",\r\n  \"origin\": \"origin6\",\r\n  \"status\": \"status6\",\r\n  \"privacy\": \"privacy6\",\r\n  \"startDate\": 16,\r\n  \"endDate\": 16\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/admin/streams/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"admin",
										"streams",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "Retrieve all the streams across the enterprise where the membership of the stream has been modified between a given time range\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Session authentication token.",
										"key": "sessionToken",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"streamTypes\": [\r\n    {\r\n      \"type\": \"type6\"\r\n    }\r\n  ],\r\n  \"scope\": \"scope6\",\r\n  \"origin\": \"origin6\",\r\n  \"status\": \"status6\",\r\n  \"privacy\": \"privacy6\",\r\n  \"startDate\": 16,\r\n  \"endDate\": 16\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/admin/streams/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"admin",
										"streams",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "Retrieve all the streams across the enterprise where the membership of the stream has been modified between a given time range\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Session authentication token.",
										"key": "sessionToken",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"streamTypes\": [\r\n    {\r\n      \"type\": \"type6\"\r\n    }\r\n  ],\r\n  \"scope\": \"scope6\",\r\n  \"origin\": \"origin6\",\r\n  \"status\": \"status6\",\r\n  \"privacy\": \"privacy6\",\r\n  \"startDate\": 16,\r\n  \"endDate\": 16\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/admin/streams/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"admin",
										"streams",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "Retrieve all the streams across the enterprise where the membership of the stream has been modified between a given time range\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Session authentication token.",
										"key": "sessionToken",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"streamTypes\": [\r\n    {\r\n      \"type\": \"type6\"\r\n    }\r\n  ],\r\n  \"scope\": \"scope6\",\r\n  \"origin\": \"origin6\",\r\n  \"status\": \"status6\",\r\n  \"privacy\": \"privacy6\",\r\n  \"startDate\": 16,\r\n  \"endDate\": 16\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/admin/streams/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"admin",
										"streams",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "Retrieve all the streams across the enterprise where the membership of the stream has been modified between a given time range\n"
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Session authentication token.",
										"key": "sessionToken",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"streamTypes\": [\r\n    {\r\n      \"type\": \"type6\"\r\n    }\r\n  ],\r\n  \"scope\": \"scope6\",\r\n  \"origin\": \"origin6\",\r\n  \"status\": \"status6\",\r\n  \"privacy\": \"privacy6\",\r\n  \"startDate\": 16,\r\n  \"endDate\": 16\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/admin/streams/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"admin",
										"streams",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "Retrieve all the streams across the enterprise where the membership of the stream has been modified between a given time range\n"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"count\": 16,\r\n  \"skip\": 16,\r\n  \"limit\": 16,\r\n  \"filter\": {\r\n    \"streamTypes\": [\r\n      {\r\n        \"type\": \"type6\"\r\n      }\r\n    ],\r\n    \"scope\": \"scope6\",\r\n    \"origin\": \"origin6\",\r\n    \"status\": \"status6\",\r\n    \"privacy\": \"privacy6\",\r\n    \"startDate\": 16,\r\n    \"endDate\": 16\r\n  },\r\n  \"streams\": [\r\n    {\r\n      \"id\": \"id6\",\r\n      \"isExternal\": false,\r\n      \"isActive\": false,\r\n      \"isPublic\": false,\r\n      \"type\": \"type6\",\r\n      \"crossPod\": false,\r\n      \"origin\": \"origin6\",\r\n      \"attributes\": {\r\n        \"roomName\": \"roomName6\",\r\n        \"roomDescription\": \"roomDescription6\",\r\n        \"members\": [\r\n          16\r\n        ],\r\n        \"createdByUserId\": 16,\r\n        \"createdDate\": 16,\r\n        \"lastModifiedDate\": 16,\r\n        \"originCompany\": \"originCompany6\",\r\n        \"originCompanyId\": 16,\r\n        \"membersCount\": 16,\r\n        \"lastMessageDate\": 16\r\n      }\r\n    }\r\n  ]\r\n}"
						}
					]
				},
				{
					"name": "[Admin] List the current members of an existing stream.  The stream can be of type IM, MIM, or ROOM",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "Session authentication token.",
								"key": "sessionToken",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/stream/:id/membership/list?skip=0&limit=32",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"stream",
								":id",
								"membership",
								"list"
							],
							"query": [
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "32"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "id6"
								}
							]
						},
						"description": "List the current members of an existing stream.  The stream can be of type IM, MIM, or ROOM"
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Session authentication token.",
										"key": "sessionToken",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/stream/:id/membership/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"stream",
										":id",
										"membership",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "List the current members of an existing stream.  The stream can be of type IM, MIM, or ROOM"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Session authentication token.",
										"key": "sessionToken",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/stream/:id/membership/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"stream",
										":id",
										"membership",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "List the current members of an existing stream.  The stream can be of type IM, MIM, or ROOM"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Session authentication token.",
										"key": "sessionToken",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/stream/:id/membership/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"stream",
										":id",
										"membership",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "List the current members of an existing stream.  The stream can be of type IM, MIM, or ROOM"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Session authentication token.",
										"key": "sessionToken",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/stream/:id/membership/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"stream",
										":id",
										"membership",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "List the current members of an existing stream.  The stream can be of type IM, MIM, or ROOM"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"count\": 94,\r\n  \"skip\": 94,\r\n  \"limit\": 94,\r\n  \"members\": [\r\n    {\r\n      \"user\": {\r\n        \"userId\": 94,\r\n        \"email\": \"email36\",\r\n        \"firstName\": \"firstName36\",\r\n        \"lastName\": \"lastName36\",\r\n        \"displayName\": \"displayName36\",\r\n        \"company\": \"company36\",\r\n        \"companyId\": 94,\r\n        \"isExternal\": false\r\n      },\r\n      \"isOwner\": false,\r\n      \"isCreator\": false,\r\n      \"joinDate\": 16\r\n    }\r\n  ]\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Session authentication token.",
										"key": "sessionToken",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/stream/:id/membership/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"stream",
										":id",
										"membership",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "List the current members of an existing stream.  The stream can be of type IM, MIM, or ROOM"
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				}
			]
		},
		{
			"name": "Room Membership",
			"item": [
				{
					"name": "Adds new member to an existing room.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 94\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/room/:id/membership/add",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"room",
								":id",
								"membership",
								"add"
							],
							"variable": [
								{
									"key": "id",
									"value": "id6"
								}
							]
						},
						"description": "Adds new member to an existing room."
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 94\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/room/:id/membership/add",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"room",
										":id",
										"membership",
										"add"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Adds new member to an existing room."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 94\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/room/:id/membership/add",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"room",
										":id",
										"membership",
										"add"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Adds new member to an existing room."
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 94\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/room/:id/membership/add",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"room",
										":id",
										"membership",
										"add"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Adds new member to an existing room."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 94\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/room/:id/membership/add",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"room",
										":id",
										"membership",
										"add"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Adds new member to an existing room."
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"format\": \"TEXT\",\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 94\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/room/:id/membership/add",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"room",
										":id",
										"membership",
										"add"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Adds new member to an existing room."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "Removes member from an existing room.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 94\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/room/:id/membership/remove",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"room",
								":id",
								"membership",
								"remove"
							],
							"variable": [
								{
									"key": "id",
									"value": "id6"
								}
							]
						},
						"description": "Removes member from an existing room."
					},
					"response": [
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 94\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/room/:id/membership/remove",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"room",
										":id",
										"membership",
										"remove"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Removes member from an existing room."
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"format\": \"TEXT\",\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 94\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/room/:id/membership/remove",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"room",
										":id",
										"membership",
										"remove"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Removes member from an existing room."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 94\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/room/:id/membership/remove",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"room",
										":id",
										"membership",
										"remove"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Removes member from an existing room."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 94\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/room/:id/membership/remove",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"room",
										":id",
										"membership",
										"remove"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Removes member from an existing room."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 94\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/room/:id/membership/remove",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"room",
										":id",
										"membership",
										"remove"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Removes member from an existing room."
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "Promotes user to owner.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 94\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/room/:id/membership/promoteOwner",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"room",
								":id",
								"membership",
								"promoteOwner"
							],
							"variable": [
								{
									"key": "id",
									"value": "id6"
								}
							]
						},
						"description": "Promotes user to owner."
					},
					"response": [
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 94\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/room/:id/membership/promoteOwner",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"room",
										":id",
										"membership",
										"promoteOwner"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Promotes user to owner."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 94\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/room/:id/membership/promoteOwner",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"room",
										":id",
										"membership",
										"promoteOwner"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Promotes user to owner."
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"format\": \"TEXT\",\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 94\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/room/:id/membership/promoteOwner",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"room",
										":id",
										"membership",
										"promoteOwner"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Promotes user to owner."
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 94\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/room/:id/membership/promoteOwner",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"room",
										":id",
										"membership",
										"promoteOwner"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Promotes user to owner."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 94\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/room/:id/membership/promoteOwner",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"room",
										":id",
										"membership",
										"promoteOwner"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Promotes user to owner."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "Demotes room owner.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 94\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/room/:id/membership/demoteOwner",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"room",
								":id",
								"membership",
								"demoteOwner"
							],
							"variable": [
								{
									"key": "id",
									"value": "id6"
								}
							]
						},
						"description": "Demotes room owner."
					},
					"response": [
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 94\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/room/:id/membership/demoteOwner",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"room",
										":id",
										"membership",
										"demoteOwner"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Demotes room owner."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 94\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/room/:id/membership/demoteOwner",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"room",
										":id",
										"membership",
										"demoteOwner"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Demotes room owner."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 94\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/room/:id/membership/demoteOwner",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"room",
										":id",
										"membership",
										"demoteOwner"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Demotes room owner."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 94\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/room/:id/membership/demoteOwner",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"room",
										":id",
										"membership",
										"demoteOwner"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Demotes room owner."
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 94\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/room/:id/membership/demoteOwner",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"room",
										":id",
										"membership",
										"demoteOwner"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Demotes room owner."
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"format\": \"TEXT\",\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "Lists current members of an existing room.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v2/room/:id/membership/list",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v2",
								"room",
								":id",
								"membership",
								"list"
							],
							"variable": [
								{
									"key": "id",
									"value": "id6"
								}
							]
						},
						"description": "Lists current members of an existing room."
					},
					"response": [
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/room/:id/membership/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"room",
										":id",
										"membership",
										"list"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Lists current members of an existing room."
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/room/:id/membership/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"room",
										":id",
										"membership",
										"list"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Lists current members of an existing room."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/room/:id/membership/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"room",
										":id",
										"membership",
										"list"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Lists current members of an existing room."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/room/:id/membership/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"room",
										":id",
										"membership",
										"list"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Lists current members of an existing room."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/room/:id/membership/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"room",
										":id",
										"membership",
										"list"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Lists current members of an existing room."
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  {\r\n    \"id\": 94,\r\n    \"owner\": false,\r\n    \"joinDate\": 94\r\n  }\r\n]"
						}
					]
				},
				{
					"name": "[Admin] Lists current and previous members of an existing room.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/room/:id/membership/list?includePastMembers=false",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"room",
								":id",
								"membership",
								"list"
							],
							"query": [
								{
									"key": "includePastMembers",
									"value": "false"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "id6"
								}
							]
						},
						"description": "Lists current and previous members of an existing room."
					},
					"response": [
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/room/:id/membership/list?includePastMembers=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"room",
										":id",
										"membership",
										"list"
									],
									"query": [
										{
											"key": "includePastMembers",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Lists current and previous members of an existing room."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/room/:id/membership/list?includePastMembers=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"room",
										":id",
										"membership",
										"list"
									],
									"query": [
										{
											"key": "includePastMembers",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Lists current and previous members of an existing room."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/room/:id/membership/list?includePastMembers=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"room",
										":id",
										"membership",
										"list"
									],
									"query": [
										{
											"key": "includePastMembers",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Lists current and previous members of an existing room."
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/room/:id/membership/list?includePastMembers=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"room",
										":id",
										"membership",
										"list"
									],
									"query": [
										{
											"key": "includePastMembers",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Lists current and previous members of an existing room."
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  {\r\n    \"id\": 94,\r\n    \"owner\": false,\r\n    \"joinDate\": 94\r\n  }\r\n]"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/room/:id/membership/list?includePastMembers=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"room",
										":id",
										"membership",
										"list"
									],
									"query": [
										{
											"key": "includePastMembers",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Lists current and previous members of an existing room."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Add a member to an existing room.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 94\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/room/:id/membership/add",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"room",
								":id",
								"membership",
								"add"
							],
							"variable": [
								{
									"key": "id",
									"value": "id6"
								}
							]
						},
						"description": "Add a member to an existing room."
					},
					"response": [
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 94\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/room/:id/membership/add",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"room",
										":id",
										"membership",
										"add"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Add a member to an existing room."
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 94\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/room/:id/membership/add",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"room",
										":id",
										"membership",
										"add"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Add a member to an existing room."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 94\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/room/:id/membership/add",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"room",
										":id",
										"membership",
										"add"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Add a member to an existing room."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 94\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/room/:id/membership/add",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"room",
										":id",
										"membership",
										"add"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Add a member to an existing room."
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"format\": \"TEXT\",\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 94\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/room/:id/membership/add",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"room",
										":id",
										"membership",
										"add"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Add a member to an existing room."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Remove a member from a room.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 94\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/room/:id/membership/remove",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"room",
								":id",
								"membership",
								"remove"
							],
							"variable": [
								{
									"key": "id",
									"value": "id6"
								}
							]
						},
						"description": "Remove a member from a room."
					},
					"response": [
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 94\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/room/:id/membership/remove",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"room",
										":id",
										"membership",
										"remove"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Remove a member from a room."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 94\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/room/:id/membership/remove",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"room",
										":id",
										"membership",
										"remove"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Remove a member from a room."
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 94\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/room/:id/membership/remove",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"room",
										":id",
										"membership",
										"remove"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Remove a member from a room."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 94\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/room/:id/membership/remove",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"room",
										":id",
										"membership",
										"remove"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Remove a member from a room."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 94\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/room/:id/membership/remove",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"room",
										":id",
										"membership",
										"remove"
									],
									"variable": [
										{
											"key": "id",
											"value": "id6"
										}
									]
								},
								"description": "Remove a member from a room."
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"format\": \"TEXT\",\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				}
			]
		},
		{
			"name": "Datafeed",
			"item": [
				{
					"name": "v1",
					"item": [
						{
							"name": "Create a new real time message event stream. Copy",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v4/datafeed/create",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v4",
										"datafeed",
										"create"
									]
								},
								"description": "A datafeed provides the messages in all conversations that a user is in.\nThis also includes system messages like new users joining a chatroom.\n\nA datafeed will expire if it isn't read before its capacity is reached.\n"
							},
							"response": [
								{
									"name": "Response_200",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "sessionToken",
												"value": "{{sessionToken}}",
												"description": "Session authentication token."
											},
											{
												"key": "keyManagerToken",
												"value": "{{keyManToken}}",
												"description": "Key Manager authentication token."
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{agentUrl}}/agent/v4/datafeed/create",
											"protocol": "https",
											"host": [
												"{{agentUrl}}"
											],
											"path": [
												"agent",
												"v4",
												"datafeed",
												"create"
											]
										},
										"description": "A datafeed provides the messages in all conversations that a user is in.\nThis also includes system messages like new users joining a chatroom.\n\nA datafeed will expire if it isn't read before its capacity is reached.\n"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\r\n  \"id\": \"id74\"\r\n}"
								},
								{
									"name": "Response_400",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "sessionToken",
												"value": "{{sessionToken}}",
												"description": "Session authentication token."
											},
											{
												"key": "keyManagerToken",
												"value": "{{keyManToken}}",
												"description": "Key Manager authentication token."
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{agentUrl}}/agent/v4/datafeed/create",
											"protocol": "https",
											"host": [
												"{{agentUrl}}"
											],
											"path": [
												"agent",
												"v4",
												"datafeed",
												"create"
											]
										},
										"description": "A datafeed provides the messages in all conversations that a user is in.\nThis also includes system messages like new users joining a chatroom.\n\nA datafeed will expire if it isn't read before its capacity is reached.\n"
									},
									"status": "Client error.",
									"code": 400,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
								},
								{
									"name": "Response_401",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "sessionToken",
												"value": "{{sessionToken}}",
												"description": "Session authentication token."
											},
											{
												"key": "keyManagerToken",
												"value": "{{keyManToken}}",
												"description": "Key Manager authentication token."
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{agentUrl}}/agent/v4/datafeed/create",
											"protocol": "https",
											"host": [
												"{{agentUrl}}"
											],
											"path": [
												"agent",
												"v4",
												"datafeed",
												"create"
											]
										},
										"description": "A datafeed provides the messages in all conversations that a user is in.\nThis also includes system messages like new users joining a chatroom.\n\nA datafeed will expire if it isn't read before its capacity is reached.\n"
									},
									"status": "Unauthorized: Session tokens invalid.",
									"code": 401,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
								},
								{
									"name": "Response_503",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "sessionToken",
												"value": "{{sessionToken}}",
												"description": "Session authentication token."
											},
											{
												"key": "keyManagerToken",
												"value": "{{keyManToken}}",
												"description": "Key Manager authentication token."
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{agentUrl}}/agent/v4/datafeed/create",
											"protocol": "https",
											"host": [
												"{{agentUrl}}"
											],
											"path": [
												"agent",
												"v4",
												"datafeed",
												"create"
											]
										},
										"description": "A datafeed provides the messages in all conversations that a user is in.\nThis also includes system messages like new users joining a chatroom.\n\nA datafeed will expire if it isn't read before its capacity is reached.\n"
									},
									"status": "Max number of data feeds reached.",
									"code": 503,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
								},
								{
									"name": "Response_403",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "sessionToken",
												"value": "{{sessionToken}}",
												"description": "Session authentication token."
											},
											{
												"key": "keyManagerToken",
												"value": "{{keyManToken}}",
												"description": "Key Manager authentication token."
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{agentUrl}}/agent/v4/datafeed/create",
											"protocol": "https",
											"host": [
												"{{agentUrl}}"
											],
											"path": [
												"agent",
												"v4",
												"datafeed",
												"create"
											]
										},
										"description": "A datafeed provides the messages in all conversations that a user is in.\nThis also includes system messages like new users joining a chatroom.\n\nA datafeed will expire if it isn't read before its capacity is reached.\n"
									},
									"status": "Forbidden: Caller lacks necessary entitlement.",
									"code": 403,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
								},
								{
									"name": "Response_500",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "sessionToken",
												"value": "{{sessionToken}}",
												"description": "Session authentication token."
											},
											{
												"key": "keyManagerToken",
												"value": "{{keyManToken}}",
												"description": "Key Manager authentication token."
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{agentUrl}}/agent/v4/datafeed/create",
											"protocol": "https",
											"host": [
												"{{agentUrl}}"
											],
											"path": [
												"agent",
												"v4",
												"datafeed",
												"create"
											]
										},
										"description": "A datafeed provides the messages in all conversations that a user is in.\nThis also includes system messages like new users joining a chatroom.\n\nA datafeed will expire if it isn't read before its capacity is reached.\n"
									},
									"status": "Server error, see response body for further details.",
									"code": 500,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
								}
							]
						},
						{
							"name": "Read a given datafeed.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v4/datafeed/:id/read?limit=32",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v4",
										"datafeed",
										":id",
										"read"
									],
									"query": [
										{
											"key": "limit",
											"value": "32"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "id12"
										}
									]
								},
								"description": "Read messages from the given datafeed. If no more messages are available then this method will block.\nIt is intended that the client should re-call this method as soon as it has processed the messages\nreceived in the previous call. If the client is able to consume messages more quickly than they become\navailable then each call will initially block, there is no need to delay before re-calling this method.\n\nA datafeed will expire if its unread capacity is reached.\nA datafeed can only be consumed by one client thread at a time. E.g. polling the datafeed by two threads may lead to messages being delivered out of order.\n"
							},
							"response": [
								{
									"name": "Response_403",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "sessionToken",
												"value": "{{sessionToken}}",
												"description": "Session authentication token."
											},
											{
												"key": "keyManagerToken",
												"value": "{{keyManToken}}",
												"description": "Key Manager authentication token."
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{agentUrl}}/agent/v4/datafeed/:id/read?limit=32",
											"protocol": "https",
											"host": [
												"{{agentUrl}}"
											],
											"path": [
												"agent",
												"v4",
												"datafeed",
												":id",
												"read"
											],
											"query": [
												{
													"key": "limit",
													"value": "32"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "id12"
												}
											]
										},
										"description": "Read messages from the given datafeed. If no more messages are available then this method will block.\nIt is intended that the client should re-call this method as soon as it has processed the messages\nreceived in the previous call. If the client is able to consume messages more quickly than they become\navailable then each call will initially block, there is no need to delay before re-calling this method.\n\nA datafeed will expire if its unread capacity is reached.\nA datafeed can only be consumed by one client thread at a time. E.g. polling the datafeed by two threads may lead to messages being delivered out of order.\n"
									},
									"status": "Forbidden: Caller lacks necessary entitlement.",
									"code": 403,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
								},
								{
									"name": "Response_401",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "sessionToken",
												"value": "{{sessionToken}}",
												"description": "Session authentication token."
											},
											{
												"key": "keyManagerToken",
												"value": "{{keyManToken}}",
												"description": "Key Manager authentication token."
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{agentUrl}}/agent/v4/datafeed/:id/read?limit=32",
											"protocol": "https",
											"host": [
												"{{agentUrl}}"
											],
											"path": [
												"agent",
												"v4",
												"datafeed",
												":id",
												"read"
											],
											"query": [
												{
													"key": "limit",
													"value": "32"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "id12"
												}
											]
										},
										"description": "Read messages from the given datafeed. If no more messages are available then this method will block.\nIt is intended that the client should re-call this method as soon as it has processed the messages\nreceived in the previous call. If the client is able to consume messages more quickly than they become\navailable then each call will initially block, there is no need to delay before re-calling this method.\n\nA datafeed will expire if its unread capacity is reached.\nA datafeed can only be consumed by one client thread at a time. E.g. polling the datafeed by two threads may lead to messages being delivered out of order.\n"
									},
									"status": "Unauthorized: Session tokens invalid.",
									"code": 401,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
								},
								{
									"name": "Response_200",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "sessionToken",
												"value": "{{sessionToken}}",
												"description": "Session authentication token."
											},
											{
												"key": "keyManagerToken",
												"value": "{{keyManToken}}",
												"description": "Key Manager authentication token."
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{agentUrl}}/agent/v4/datafeed/:id/read?limit=32",
											"protocol": "https",
											"host": [
												"{{agentUrl}}"
											],
											"path": [
												"agent",
												"v4",
												"datafeed",
												":id",
												"read"
											],
											"query": [
												{
													"key": "limit",
													"value": "32"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "id12"
												}
											]
										},
										"description": "Read messages from the given datafeed. If no more messages are available then this method will block.\nIt is intended that the client should re-call this method as soon as it has processed the messages\nreceived in the previous call. If the client is able to consume messages more quickly than they become\navailable then each call will initially block, there is no need to delay before re-calling this method.\n\nA datafeed will expire if its unread capacity is reached.\nA datafeed can only be consumed by one client thread at a time. E.g. polling the datafeed by two threads may lead to messages being delivered out of order.\n"
									},
									"status": "List of messages that have occurred since last time this URL was polled. If the list is empty, it means the request has reached its timeout, and the client should poll again.",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\r\n  {\r\n    \"id\": \"id74\",\r\n    \"messageId\": \"messageId74\",\r\n    \"timestamp\": 192,\r\n    \"type\": \"type74\",\r\n    \"diagnostic\": \"diagnostic74\",\r\n    \"initiator\": {\r\n      \"user\": {\r\n        \"userId\": 192,\r\n        \"firstName\": \"firstName74\",\r\n        \"lastName\": \"lastName74\",\r\n        \"displayName\": \"displayName74\",\r\n        \"email\": \"email74\",\r\n        \"username\": \"username74\"\r\n      }\r\n    },\r\n    \"payload\": {\r\n      \"messageSent\": {\r\n        \"message\": {\r\n          \"messageId\": \"messageId74\",\r\n          \"timestamp\": 192,\r\n          \"message\": \"message74\",\r\n          \"data\": \"data74\",\r\n          \"attachments\": [\r\n            {\r\n              \"id\": \"id74\",\r\n              \"name\": \"name74\",\r\n              \"size\": 192,\r\n              \"images\": [\r\n                {\r\n                  \"id\": \"id74\",\r\n                  \"dimension\": \"dimension74\"\r\n                }\r\n              ]\r\n            }\r\n          ],\r\n          \"user\": {\r\n            \"userId\": 192,\r\n            \"firstName\": \"firstName74\",\r\n            \"lastName\": \"lastName74\",\r\n            \"displayName\": \"displayName74\",\r\n            \"email\": \"email74\",\r\n            \"username\": \"username74\"\r\n          },\r\n          \"stream\": {\r\n            \"streamId\": \"streamId74\",\r\n            \"streamType\": \"streamType74\",\r\n            \"roomName\": \"roomName74\",\r\n            \"members\": [\r\n              {\r\n                \"userId\": 192,\r\n                \"firstName\": \"firstName74\",\r\n                \"lastName\": \"lastName74\",\r\n                \"displayName\": \"displayName74\",\r\n                \"email\": \"email74\",\r\n                \"username\": \"username74\"\r\n              }\r\n            ],\r\n            \"external\": false,\r\n            \"crossPod\": false\r\n          },\r\n          \"externalRecipients\": false,\r\n          \"diagnostic\": \"diagnostic74\",\r\n          \"userAgent\": \"userAgent74\",\r\n          \"originalFormat\": \"originalFormat74\",\r\n          \"disclaimer\": \"disclaimer74\"\r\n        }\r\n      },\r\n      \"sharedPost\": {\r\n        \"message\": {\r\n          \"messageId\": \"messageId74\",\r\n          \"timestamp\": 192,\r\n          \"message\": \"message74\",\r\n          \"data\": \"data74\",\r\n          \"attachments\": [\r\n            {\r\n              \"id\": \"id74\",\r\n              \"name\": \"name74\",\r\n              \"size\": 192,\r\n              \"images\": [\r\n                {\r\n                  \"id\": \"id74\",\r\n                  \"dimension\": \"dimension74\"\r\n                }\r\n              ]\r\n            }\r\n          ],\r\n          \"user\": {\r\n            \"userId\": 192,\r\n            \"firstName\": \"firstName74\",\r\n            \"lastName\": \"lastName74\",\r\n            \"displayName\": \"displayName74\",\r\n            \"email\": \"email74\",\r\n            \"username\": \"username74\"\r\n          },\r\n          \"stream\": {\r\n            \"streamId\": \"streamId74\",\r\n            \"streamType\": \"streamType74\",\r\n            \"roomName\": \"roomName74\",\r\n            \"members\": [\r\n              {\r\n                \"userId\": 192,\r\n                \"firstName\": \"firstName74\",\r\n                \"lastName\": \"lastName74\",\r\n                \"displayName\": \"displayName74\",\r\n                \"email\": \"email74\",\r\n                \"username\": \"username74\"\r\n              }\r\n            ],\r\n            \"external\": false,\r\n            \"crossPod\": false\r\n          },\r\n          \"externalRecipients\": false,\r\n          \"diagnostic\": \"diagnostic74\",\r\n          \"userAgent\": \"userAgent74\",\r\n          \"originalFormat\": \"originalFormat74\",\r\n          \"disclaimer\": \"disclaimer74\"\r\n        },\r\n        \"sharedMessage\": {\r\n          \"messageId\": \"messageId74\",\r\n          \"timestamp\": 192,\r\n          \"message\": \"message74\",\r\n          \"data\": \"data74\",\r\n          \"attachments\": [\r\n            {\r\n              \"id\": \"id74\",\r\n              \"name\": \"name74\",\r\n              \"size\": 192,\r\n              \"images\": [\r\n                {\r\n                  \"id\": \"id74\",\r\n                  \"dimension\": \"dimension74\"\r\n                }\r\n              ]\r\n            }\r\n          ],\r\n          \"user\": {\r\n            \"userId\": 192,\r\n            \"firstName\": \"firstName74\",\r\n            \"lastName\": \"lastName74\",\r\n            \"displayName\": \"displayName74\",\r\n            \"email\": \"email74\",\r\n            \"username\": \"username74\"\r\n          },\r\n          \"stream\": {\r\n            \"streamId\": \"streamId74\",\r\n            \"streamType\": \"streamType74\",\r\n            \"roomName\": \"roomName74\",\r\n            \"members\": [\r\n              {\r\n                \"userId\": 192,\r\n                \"firstName\": \"firstName74\",\r\n                \"lastName\": \"lastName74\",\r\n                \"displayName\": \"displayName74\",\r\n                \"email\": \"email74\",\r\n                \"username\": \"username74\"\r\n              }\r\n            ],\r\n            \"external\": false,\r\n            \"crossPod\": false\r\n          },\r\n          \"externalRecipients\": false,\r\n          \"diagnostic\": \"diagnostic74\",\r\n          \"userAgent\": \"userAgent74\",\r\n          \"originalFormat\": \"originalFormat74\",\r\n          \"disclaimer\": \"disclaimer74\"\r\n        }\r\n      },\r\n      \"instantMessageCreated\": {\r\n        \"stream\": {\r\n          \"streamId\": \"streamId74\",\r\n          \"streamType\": \"streamType74\",\r\n          \"roomName\": \"roomName74\",\r\n          \"members\": [\r\n            {\r\n              \"userId\": 192,\r\n              \"firstName\": \"firstName74\",\r\n              \"lastName\": \"lastName74\",\r\n              \"displayName\": \"displayName74\",\r\n              \"email\": \"email74\",\r\n              \"username\": \"username74\"\r\n            }\r\n          ],\r\n          \"external\": false,\r\n          \"crossPod\": false\r\n        }\r\n      },\r\n      \"roomCreated\": {\r\n        \"stream\": {\r\n          \"streamId\": \"streamId74\",\r\n          \"streamType\": \"streamType74\",\r\n          \"roomName\": \"roomName74\",\r\n          \"members\": [\r\n            {\r\n              \"userId\": 192,\r\n              \"firstName\": \"firstName74\",\r\n              \"lastName\": \"lastName74\",\r\n              \"displayName\": \"displayName74\",\r\n              \"email\": \"email74\",\r\n              \"username\": \"username74\"\r\n            }\r\n          ],\r\n          \"external\": false,\r\n          \"crossPod\": false\r\n        },\r\n        \"roomProperties\": {\r\n          \"name\": \"name74\",\r\n          \"description\": \"description74\",\r\n          \"creatorUser\": {\r\n            \"userId\": 192,\r\n            \"firstName\": \"firstName74\",\r\n            \"lastName\": \"lastName74\",\r\n            \"displayName\": \"displayName74\",\r\n            \"email\": \"email74\",\r\n            \"username\": \"username74\"\r\n          },\r\n          \"createdDate\": 192,\r\n          \"external\": false,\r\n          \"crossPod\": false,\r\n          \"public\": false,\r\n          \"copyProtected\": false,\r\n          \"readOnly\": false,\r\n          \"discoverable\": false,\r\n          \"membersCanInvite\": false,\r\n          \"keywords\": [\r\n            {\r\n              \"key\": \"key74\",\r\n              \"value\": \"value74\"\r\n            }\r\n          ],\r\n          \"canViewHistory\": false\r\n        }\r\n      },\r\n      \"roomUpdated\": {\r\n        \"stream\": {\r\n          \"streamId\": \"streamId74\",\r\n          \"streamType\": \"streamType74\",\r\n          \"roomName\": \"roomName74\",\r\n          \"members\": [\r\n            {\r\n              \"userId\": 192,\r\n              \"firstName\": \"firstName74\",\r\n              \"lastName\": \"lastName74\",\r\n              \"displayName\": \"displayName74\",\r\n              \"email\": \"email74\",\r\n              \"username\": \"username74\"\r\n            }\r\n          ],\r\n          \"external\": false,\r\n          \"crossPod\": false\r\n        },\r\n        \"newRoomProperties\": {\r\n          \"name\": \"name74\",\r\n          \"description\": \"description74\",\r\n          \"creatorUser\": {\r\n            \"userId\": 192,\r\n            \"firstName\": \"firstName74\",\r\n            \"lastName\": \"lastName74\",\r\n            \"displayName\": \"displayName74\",\r\n            \"email\": \"email74\",\r\n            \"username\": \"username74\"\r\n          },\r\n          \"createdDate\": 192,\r\n          \"external\": false,\r\n          \"crossPod\": false,\r\n          \"public\": false,\r\n          \"copyProtected\": false,\r\n          \"readOnly\": false,\r\n          \"discoverable\": false,\r\n          \"membersCanInvite\": false,\r\n          \"keywords\": [\r\n            {\r\n              \"key\": \"key74\",\r\n              \"value\": \"value74\"\r\n            }\r\n          ],\r\n          \"canViewHistory\": false\r\n        }\r\n      },\r\n      \"roomDeactivated\": {\r\n        \"stream\": {\r\n          \"streamId\": \"streamId74\",\r\n          \"streamType\": \"streamType74\",\r\n          \"roomName\": \"roomName74\",\r\n          \"members\": [\r\n            {\r\n              \"userId\": 192,\r\n              \"firstName\": \"firstName74\",\r\n              \"lastName\": \"lastName74\",\r\n              \"displayName\": \"displayName74\",\r\n              \"email\": \"email74\",\r\n              \"username\": \"username74\"\r\n            }\r\n          ],\r\n          \"external\": false,\r\n          \"crossPod\": false\r\n        }\r\n      },\r\n      \"roomReactivated\": {\r\n        \"stream\": {\r\n          \"streamId\": \"streamId74\",\r\n          \"streamType\": \"streamType74\",\r\n          \"roomName\": \"roomName74\",\r\n          \"members\": [\r\n            {\r\n              \"userId\": 192,\r\n              \"firstName\": \"firstName74\",\r\n              \"lastName\": \"lastName74\",\r\n              \"displayName\": \"displayName74\",\r\n              \"email\": \"email74\",\r\n              \"username\": \"username74\"\r\n            }\r\n          ],\r\n          \"external\": false,\r\n          \"crossPod\": false\r\n        }\r\n      },\r\n      \"userJoinedRoom\": {\r\n        \"stream\": {\r\n          \"streamId\": \"streamId74\",\r\n          \"streamType\": \"streamType74\",\r\n          \"roomName\": \"roomName74\",\r\n          \"members\": [\r\n            {\r\n              \"userId\": 192,\r\n              \"firstName\": \"firstName74\",\r\n              \"lastName\": \"lastName74\",\r\n              \"displayName\": \"displayName74\",\r\n              \"email\": \"email74\",\r\n              \"username\": \"username74\"\r\n            }\r\n          ],\r\n          \"external\": false,\r\n          \"crossPod\": false\r\n        },\r\n        \"affectedUser\": {\r\n          \"userId\": 192,\r\n          \"firstName\": \"firstName74\",\r\n          \"lastName\": \"lastName74\",\r\n          \"displayName\": \"displayName74\",\r\n          \"email\": \"email74\",\r\n          \"username\": \"username74\"\r\n        }\r\n      },\r\n      \"userLeftRoom\": {\r\n        \"stream\": {\r\n          \"streamId\": \"streamId44\",\r\n          \"streamType\": \"streamType44\",\r\n          \"roomName\": \"roomName44\",\r\n          \"members\": [\r\n            {\r\n              \"userId\": 114,\r\n              \"firstName\": \"firstName44\",\r\n              \"lastName\": \"lastName44\",\r\n              \"displayName\": \"displayName44\",\r\n              \"email\": \"email44\",\r\n              \"username\": \"username44\"\r\n            }\r\n          ],\r\n          \"external\": false,\r\n          \"crossPod\": false\r\n        },\r\n        \"affectedUser\": {\r\n          \"userId\": 114,\r\n          \"firstName\": \"firstName44\",\r\n          \"lastName\": \"lastName44\",\r\n          \"displayName\": \"displayName44\",\r\n          \"email\": \"email44\",\r\n          \"username\": \"username44\"\r\n        }\r\n      },\r\n      \"roomMemberPromotedToOwner\": {\r\n        \"stream\": {\r\n          \"streamId\": \"streamId44\",\r\n          \"streamType\": \"streamType44\",\r\n          \"roomName\": \"roomName44\",\r\n          \"members\": [\r\n            {\r\n              \"userId\": 114,\r\n              \"firstName\": \"firstName44\",\r\n              \"lastName\": \"lastName44\",\r\n              \"displayName\": \"displayName44\",\r\n              \"email\": \"email44\",\r\n              \"username\": \"username44\"\r\n            }\r\n          ],\r\n          \"external\": false,\r\n          \"crossPod\": false\r\n        },\r\n        \"affectedUser\": {\r\n          \"userId\": 114,\r\n          \"firstName\": \"firstName44\",\r\n          \"lastName\": \"lastName44\",\r\n          \"displayName\": \"displayName44\",\r\n          \"email\": \"email44\",\r\n          \"username\": \"username44\"\r\n        }\r\n      },\r\n      \"roomMemberDemotedFromOwner\": {\r\n        \"stream\": {\r\n          \"streamId\": \"streamId44\",\r\n          \"streamType\": \"streamType44\",\r\n          \"roomName\": \"roomName44\",\r\n          \"members\": [\r\n            {\r\n              \"userId\": 114,\r\n              \"firstName\": \"firstName44\",\r\n              \"lastName\": \"lastName44\",\r\n              \"displayName\": \"displayName44\",\r\n              \"email\": \"email44\",\r\n              \"username\": \"username44\"\r\n            }\r\n          ],\r\n          \"external\": false,\r\n          \"crossPod\": false\r\n        },\r\n        \"affectedUser\": {\r\n          \"userId\": 114,\r\n          \"firstName\": \"firstName44\",\r\n          \"lastName\": \"lastName44\",\r\n          \"displayName\": \"displayName44\",\r\n          \"email\": \"email44\",\r\n          \"username\": \"username44\"\r\n        }\r\n      },\r\n      \"connectionRequested\": {\r\n        \"toUser\": {\r\n          \"userId\": 114,\r\n          \"firstName\": \"firstName44\",\r\n          \"lastName\": \"lastName44\",\r\n          \"displayName\": \"displayName44\",\r\n          \"email\": \"email44\",\r\n          \"username\": \"username44\"\r\n        }\r\n      },\r\n      \"connectionAccepted\": {\r\n        \"fromUser\": {\r\n          \"userId\": 114,\r\n          \"firstName\": \"firstName44\",\r\n          \"lastName\": \"lastName44\",\r\n          \"displayName\": \"displayName44\",\r\n          \"email\": \"email44\",\r\n          \"username\": \"username44\"\r\n        }\r\n      },\r\n      \"messageSuppressed\": {\r\n        \"messageId\": \"messageId44\",\r\n        \"stream\": {\r\n          \"streamId\": \"streamId44\",\r\n          \"streamType\": \"streamType44\",\r\n          \"roomName\": \"roomName44\",\r\n          \"members\": [\r\n            {\r\n              \"userId\": 114,\r\n              \"firstName\": \"firstName44\",\r\n              \"lastName\": \"lastName44\",\r\n              \"displayName\": \"displayName44\",\r\n              \"email\": \"email44\",\r\n              \"username\": \"username44\"\r\n            }\r\n          ],\r\n          \"external\": false,\r\n          \"crossPod\": false\r\n        }\r\n      }\r\n    }\r\n  }\r\n]"
								},
								{
									"name": "Response_400",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "sessionToken",
												"value": "{{sessionToken}}",
												"description": "Session authentication token."
											},
											{
												"key": "keyManagerToken",
												"value": "{{keyManToken}}",
												"description": "Key Manager authentication token."
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{agentUrl}}/agent/v4/datafeed/:id/read?limit=32",
											"protocol": "https",
											"host": [
												"{{agentUrl}}"
											],
											"path": [
												"agent",
												"v4",
												"datafeed",
												":id",
												"read"
											],
											"query": [
												{
													"key": "limit",
													"value": "32"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "id12"
												}
											]
										},
										"description": "Read messages from the given datafeed. If no more messages are available then this method will block.\nIt is intended that the client should re-call this method as soon as it has processed the messages\nreceived in the previous call. If the client is able to consume messages more quickly than they become\navailable then each call will initially block, there is no need to delay before re-calling this method.\n\nA datafeed will expire if its unread capacity is reached.\nA datafeed can only be consumed by one client thread at a time. E.g. polling the datafeed by two threads may lead to messages being delivered out of order.\n"
									},
									"status": "Client error, see response body for further details.",
									"code": 400,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
								},
								{
									"name": "Response_500",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "sessionToken",
												"value": "{{sessionToken}}",
												"description": "Session authentication token."
											},
											{
												"key": "keyManagerToken",
												"value": "{{keyManToken}}",
												"description": "Key Manager authentication token."
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{agentUrl}}/agent/v4/datafeed/:id/read?limit=32",
											"protocol": "https",
											"host": [
												"{{agentUrl}}"
											],
											"path": [
												"agent",
												"v4",
												"datafeed",
												":id",
												"read"
											],
											"query": [
												{
													"key": "limit",
													"value": "32"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "id12"
												}
											]
										},
										"description": "Read messages from the given datafeed. If no more messages are available then this method will block.\nIt is intended that the client should re-call this method as soon as it has processed the messages\nreceived in the previous call. If the client is able to consume messages more quickly than they become\navailable then each call will initially block, there is no need to delay before re-calling this method.\n\nA datafeed will expire if its unread capacity is reached.\nA datafeed can only be consumed by one client thread at a time. E.g. polling the datafeed by two threads may lead to messages being delivered out of order.\n"
									},
									"status": "Server error, see response body for further details.",
									"code": 500,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
								}
							]
						}
					]
				},
				{
					"name": "v2",
					"item": [
						{
							"name": "Create Datafeed v2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"datafeed_id\", pm.response.json().id);",
											"pm.environment.set(\"ack_id\", \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tag\": \"mybot\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v5/datafeeds",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v5",
										"datafeeds"
									]
								},
								"description": "A datafeed provides the messages in all conversations that a user is in.\nThis also includes system messages like new users joining a chatroom.\n\nA datafeed will expire if it isn't read before its capacity is reached.\n"
							},
							"response": []
						},
						{
							"name": "Read Datafeed v2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"ack_id\")) {",
											"    pm.environment.set(\"ack_id\", \"\")",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// update ack id for next read",
											"pm.environment.set(\"ack_id\", pm.response.json().ackId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ackId\": \"{{ack_id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v5/datafeeds/{{datafeed_id}}/read",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v5",
										"datafeeds",
										"{{datafeed_id}}",
										"read"
									]
								},
								"description": "A datafeed provides the messages in all conversations that a user is in.\nThis also includes system messages like new users joining a chatroom.\n\nA datafeed will expire if it isn't read before its capacity is reached.\n"
							},
							"response": []
						},
						{
							"name": "List Datafeed v2",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v5/datafeeds/",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v5",
										"datafeeds",
										""
									]
								},
								"description": "A datafeed provides the messages in all conversations that a user is in.\nThis also includes system messages like new users joining a chatroom.\n\nA datafeed will expire if it isn't read before its capacity is reached.\n"
							},
							"response": []
						},
						{
							"name": "Delete Datafeed v2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.unset(\"datafeed_id\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v5/datafeeds/{{datafeed_id}}",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v5",
										"datafeeds",
										"{{datafeed_id}}"
									]
								},
								"description": "A datafeed provides the messages in all conversations that a user is in.\nThis also includes system messages like new users joining a chatroom.\n\nA datafeed will expire if it isn't read before its capacity is reached.\n"
							},
							"response": []
						},
						{
							"name": "Read Events",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.collectionVariables.set(\"ackId\", jsonData.ackId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
                                "header": [
                                  {
                                    "key": "sessionToken",
                                    "value": "{{sessionToken}}",
                                    "description": "Session authentication token."
                                  },
                                  {
                                    "key": "keyManagerToken",
                                    "value": "{{keyManToken}}",
                                    "description": "Key Manager authentication token."
                                  },
                                  {
                                    "key": "Accept",
                                    "value": "application/json"
                                  }
                                ],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"datahose\",\n    \"tag\": \"{{botName}}\",\n    \"eventTypes\": [\"MESSAGESENT\", \"ROOMUPDATED\"],\n    \"ackId\": \"{{ackId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v5/events/read",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v5",
										"events",
										"read"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Users - Non-admin",
			"item": [
				{
					"name": "Get user information",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v2/user?username=admin&local=true",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v2",
								"user"
							],
							"query": [
								{
									"key": "uid",
									"value": "16",
									"disabled": true
								},
								{
									"key": "email",
									"value": "email6",
									"disabled": true
								},
								{
									"key": "username",
									"value": "admin"
								},
								{
									"key": "local",
									"value": "true"
								}
							]
						},
						"description": "Get user information"
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/user?uid=16&email=email6&username=username6&local=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"user"
									],
									"query": [
										{
											"key": "uid",
											"value": "16"
										},
										{
											"key": "email",
											"value": "email6"
										},
										{
											"key": "username",
											"value": "username6"
										},
										{
											"key": "local",
											"value": "false"
										}
									]
								},
								"description": "Get user information"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/user?uid=16&email=email6&username=username6&local=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"user"
									],
									"query": [
										{
											"key": "uid",
											"value": "16"
										},
										{
											"key": "email",
											"value": "email6"
										},
										{
											"key": "username",
											"value": "username6"
										},
										{
											"key": "local",
											"value": "false"
										}
									]
								},
								"description": "Get user information"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"id\": 94,\r\n  \"emailAddress\": \"emailAddress36\",\r\n  \"firstName\": \"firstName36\",\r\n  \"lastName\": \"lastName36\",\r\n  \"displayName\": \"displayName36\",\r\n  \"title\": \"title36\",\r\n  \"company\": \"company36\",\r\n  \"username\": \"username36\",\r\n  \"location\": \"location36\",\r\n  \"avatars\": [\r\n    {\r\n      \"size\": \"size36\",\r\n      \"url\": \"url36\"\r\n    }\r\n  ],\r\n  \"workPhoneNumber\": \"workPhoneNumber36\",\r\n  \"mobilePhoneNumber\": \"mobilePhoneNumber36\",\r\n  \"jobFunction\": \"jobFunction36\",\r\n  \"department\": \"department36\",\r\n  \"division\": \"division36\",\r\n  \"roles\": [\r\n    \"roles36\"\r\n  ],\r\n  \"interactionUrl\": \"interactionUrl36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/user?uid=16&email=email6&username=username6&local=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"user"
									],
									"query": [
										{
											"key": "uid",
											"value": "16"
										},
										{
											"key": "email",
											"value": "email6"
										},
										{
											"key": "username",
											"value": "username6"
										},
										{
											"key": "local",
											"value": "false"
										}
									]
								},
								"description": "Get user information"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/user?uid=16&email=email6&username=username6&local=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"user"
									],
									"query": [
										{
											"key": "uid",
											"value": "16"
										},
										{
											"key": "email",
											"value": "email6"
										},
										{
											"key": "username",
											"value": "username6"
										},
										{
											"key": "local",
											"value": "false"
										}
									]
								},
								"description": "Get user information"
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/user?uid=16&email=email6&username=username6&local=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"user"
									],
									"query": [
										{
											"key": "uid",
											"value": "16"
										},
										{
											"key": "email",
											"value": "email6"
										},
										{
											"key": "username",
											"value": "username6"
										},
										{
											"key": "local",
											"value": "false"
										}
									]
								},
								"description": "Get user information"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "Follow users",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"followers\": [\n        13056700579848,\n        13056700580889,\n        13056700580890\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/user/{{user_id}}/follow",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"user",
								"{{user_id}}",
								"follow"
							],
							"query": [
								{
									"key": "uid",
									"value": "16",
									"disabled": true
								},
								{
									"key": "email",
									"value": "email6",
									"disabled": true
								}
							]
						},
						"description": "Get user information"
					},
					"response": []
				},
				{
					"name": "Unfollow users",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"followers\": [\n        13056700579848,\n        13056700580889,\n        13056700580890\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/user/{{user_id}}/unfollow",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"user",
								"{{user_id}}",
								"unfollow"
							],
							"query": [
								{
									"key": "uid",
									"value": "16",
									"disabled": true
								},
								{
									"key": "email",
									"value": "email6",
									"disabled": true
								}
							]
						},
						"description": "Get user information"
					},
					"response": []
				},
				{
					"name": "List followers",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/user/{{user_id}}/followers",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"user",
								"{{user_id}}",
								"followers"
							],
							"query": [
								{
									"key": "uid",
									"value": "16",
									"disabled": true
								},
								{
									"key": "email",
									"value": "email6",
									"disabled": true
								}
							]
						},
						"description": "Get user information"
					},
					"response": []
				},
				{
					"name": "List followed",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/user/{{user_id}}/following",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"user",
								"{{user_id}}",
								"following"
							],
							"query": [
								{
									"key": "uid",
									"value": "16",
									"disabled": true
								},
								{
									"key": "email",
									"value": "email6",
									"disabled": true
								}
							]
						},
						"description": "Get user information"
					},
					"response": []
				},
				{
					"name": "Search users by emails or ids.\nOnly one of the search lists should be informed at a time.\nSearch lists may containt up to 100 elements.\n",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v3/users?uid=uid6&email=email6&username=username6&local=false",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v3",
								"users"
							],
							"query": [
								{
									"key": "uid",
									"value": "uid6"
								},
								{
									"key": "email",
									"value": "email6"
								},
								{
									"key": "username",
									"value": "username6"
								},
								{
									"key": "local",
									"value": "false"
								}
							]
						},
						"description": "Search users by emails or ids.\nOnly one of the search lists should be informed at a time.\nSearch lists may containt up to 100 elements.\n"
					},
					"response": [
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/users?uid=uid6&email=email6&username=username6&local=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"users"
									],
									"query": [
										{
											"key": "uid",
											"value": "uid6"
										},
										{
											"key": "email",
											"value": "email6"
										},
										{
											"key": "username",
											"value": "username6"
										},
										{
											"key": "local",
											"value": "false"
										}
									]
								},
								"description": "Search users by emails or ids.\nOnly one of the search lists should be informed at a time.\nSearch lists may containt up to 100 elements.\n"
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/users?uid=uid6&email=email6&username=username6&local=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"users"
									],
									"query": [
										{
											"key": "uid",
											"value": "uid6"
										},
										{
											"key": "email",
											"value": "email6"
										},
										{
											"key": "username",
											"value": "username6"
										},
										{
											"key": "local",
											"value": "false"
										}
									]
								},
								"description": "Search users by emails or ids.\nOnly one of the search lists should be informed at a time.\nSearch lists may containt up to 100 elements.\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/users?uid=uid6&email=email6&username=username6&local=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"users"
									],
									"query": [
										{
											"key": "uid",
											"value": "uid6"
										},
										{
											"key": "email",
											"value": "email6"
										},
										{
											"key": "username",
											"value": "username6"
										},
										{
											"key": "local",
											"value": "false"
										}
									]
								},
								"description": "Search users by emails or ids.\nOnly one of the search lists should be informed at a time.\nSearch lists may containt up to 100 elements.\n"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"users\": [\r\n    {\r\n      \"id\": 94,\r\n      \"emailAddress\": \"emailAddress36\",\r\n      \"firstName\": \"firstName36\",\r\n      \"lastName\": \"lastName36\",\r\n      \"displayName\": \"displayName36\",\r\n      \"title\": \"title36\",\r\n      \"company\": \"company36\",\r\n      \"username\": \"username36\",\r\n      \"location\": \"location36\",\r\n      \"avatars\": [\r\n        {\r\n          \"size\": \"size36\",\r\n          \"url\": \"url36\"\r\n        }\r\n      ],\r\n      \"workPhoneNumber\": \"workPhoneNumber36\",\r\n      \"mobilePhoneNumber\": \"mobilePhoneNumber36\",\r\n      \"jobFunction\": \"jobFunction36\",\r\n      \"department\": \"department36\",\r\n      \"division\": \"division36\",\r\n      \"roles\": [\r\n        \"roles36\"\r\n      ],\r\n      \"interactionUrl\": \"interactionUrl36\"\r\n    }\r\n  ],\r\n  \"errors\": [\r\n    {\r\n      \"error\": \"error36\",\r\n      \"email\": \"email36\",\r\n      \"id\": \"id36\"\r\n    }\r\n  ]\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/users?uid=uid6&email=email6&username=username6&local=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"users"
									],
									"query": [
										{
											"key": "uid",
											"value": "uid6"
										},
										{
											"key": "email",
											"value": "email6"
										},
										{
											"key": "username",
											"value": "username6"
										},
										{
											"key": "local",
											"value": "false"
										}
									]
								},
								"description": "Search users by emails or ids.\nOnly one of the search lists should be informed at a time.\nSearch lists may containt up to 100 elements.\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/users?uid=uid6&email=email6&username=username6&local=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"users"
									],
									"query": [
										{
											"key": "uid",
											"value": "uid6"
										},
										{
											"key": "email",
											"value": "email6"
										},
										{
											"key": "username",
											"value": "username6"
										},
										{
											"key": "local",
											"value": "false"
										}
									]
								},
								"description": "Search users by emails or ids.\nOnly one of the search lists should be informed at a time.\nSearch lists may containt up to 100 elements.\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "Search for users by name or email address",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"query\": \"query36\",\r\n  \"filters\": {\r\n    \"title\": \"title36\",\r\n    \"company\": \"company36\",\r\n    \"location\": \"location36\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/user/search?skip=0&limit=32&local=false",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"user",
								"search"
							],
							"query": [
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "32"
								},
								{
									"key": "local",
									"value": "false"
								}
							]
						},
						"description": "Search for users by name or email address"
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"query\": \"query36\",\r\n  \"filters\": {\r\n    \"title\": \"title36\",\r\n    \"company\": \"company36\",\r\n    \"location\": \"location36\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/user/search?skip=16&limit=16&local=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"user",
										"search"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										},
										{
											"key": "local",
											"value": "false"
										}
									]
								},
								"description": "Search for users by name or email address"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"query\": \"query36\",\r\n  \"filters\": {\r\n    \"title\": \"title36\",\r\n    \"company\": \"company36\",\r\n    \"location\": \"location36\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/user/search?skip=16&limit=16&local=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"user",
										"search"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										},
										{
											"key": "local",
											"value": "false"
										}
									]
								},
								"description": "Search for users by name or email address"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"query\": \"query36\",\r\n  \"filters\": {\r\n    \"title\": \"title36\",\r\n    \"company\": \"company36\",\r\n    \"location\": \"location36\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/user/search?skip=16&limit=16&local=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"user",
										"search"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										},
										{
											"key": "local",
											"value": "false"
										}
									]
								},
								"description": "Search for users by name or email address"
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"query\": \"query36\",\r\n  \"filters\": {\r\n    \"title\": \"title36\",\r\n    \"company\": \"company36\",\r\n    \"location\": \"location36\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/user/search?skip=16&limit=16&local=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"user",
										"search"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										},
										{
											"key": "local",
											"value": "false"
										}
									]
								},
								"description": "Search for users by name or email address"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"query\": \"query36\",\r\n  \"filters\": {\r\n    \"title\": \"title36\",\r\n    \"company\": \"company36\",\r\n    \"location\": \"location36\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/user/search?skip=16&limit=16&local=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"user",
										"search"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										},
										{
											"key": "local",
											"value": "false"
										}
									]
								},
								"description": "Search for users by name or email address"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"count\": 94,\r\n  \"skip\": 94,\r\n  \"limit\": 94,\r\n  \"searchQuery\": {\r\n    \"query\": \"query36\",\r\n    \"filters\": {\r\n      \"title\": \"title36\",\r\n      \"company\": \"company36\",\r\n      \"location\": \"location36\"\r\n    }\r\n  },\r\n  \"users\": [\r\n    {\r\n      \"id\": 94,\r\n      \"emailAddress\": \"emailAddress36\",\r\n      \"firstName\": \"firstName36\",\r\n      \"lastName\": \"lastName36\",\r\n      \"displayName\": \"displayName36\",\r\n      \"title\": \"title36\",\r\n      \"company\": \"company36\",\r\n      \"username\": \"username36\",\r\n      \"location\": \"location36\",\r\n      \"avatars\": [\r\n        {\r\n          \"size\": \"size36\",\r\n          \"url\": \"url36\"\r\n        }\r\n      ],\r\n      \"workPhoneNumber\": \"workPhoneNumber36\",\r\n      \"mobilePhoneNumber\": \"mobilePhoneNumber36\",\r\n      \"jobFunction\": \"jobFunction36\",\r\n      \"department\": \"department36\",\r\n      \"division\": \"division36\",\r\n      \"roles\": [\r\n        \"roles36\"\r\n      ],\r\n      \"interactionUrl\": \"interactionUrl36\"\r\n    }\r\n  ]\r\n}"
						}
					]
				}
			]
		},
		{
			"name": "Users - Admin",
			"item": [
				{
					"name": "[Admin] Retrieve a list of all users in the company (pod)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session Authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v2/admin/user/list?skip=0&limit=32",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v2",
								"admin",
								"user",
								"list"
							],
							"query": [
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "32"
								}
							]
						},
						"description": "Retrieve a list of all users in the company (pod)"
					},
					"response": [
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session Authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/admin/user/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"admin",
										"user",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "Retrieve a list of all users in the company (pod)"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session Authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/admin/user/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"admin",
										"user",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "Retrieve a list of all users in the company (pod)"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session Authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/admin/user/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"admin",
										"user",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "Retrieve a list of all users in the company (pod)"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session Authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/admin/user/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"admin",
										"user",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "Retrieve a list of all users in the company (pod)"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  {\r\n    \"userAttributes\": {\r\n      \"emailAddress\": \"emailAddress36\",\r\n      \"firstName\": \"firstName36\",\r\n      \"lastName\": \"lastName36\",\r\n      \"userName\": \"userName36\",\r\n      \"displayName\": \"displayName36\",\r\n      \"companyName\": \"companyName36\",\r\n      \"department\": \"department36\",\r\n      \"division\": \"division36\",\r\n      \"title\": \"title36\",\r\n      \"workPhoneNumber\": \"workPhoneNumber36\",\r\n      \"mobilePhoneNumber\": \"mobilePhoneNumber36\",\r\n      \"twoFactorAuthPhone\": \"twoFactorAuthPhone36\",\r\n      \"smsNumber\": \"smsNumber36\",\r\n      \"accountType\": \"NORMAL\",\r\n      \"location\": \"location36\",\r\n      \"recommendedLanguage\": \"recommendedLanguage36\",\r\n      \"jobFunction\": \"jobFunction36\",\r\n      \"assetClasses\": [\r\n        \"assetClasses36\"\r\n      ],\r\n      \"industries\": [\r\n        \"industries36\"\r\n      ],\r\n      \"currentKey\": {\r\n        \"key\": \"key36\",\r\n        \"expirationDate\": 94,\r\n        \"action\": \"action36\"\r\n      },\r\n      \"previousKey\": {\r\n        \"key\": \"key36\",\r\n        \"expirationDate\": 94,\r\n        \"action\": \"action36\"\r\n      },\r\n      \"interactionUrl\": \"interactionUrl36\"\r\n    },\r\n    \"userSystemInfo\": {\r\n      \"id\": 94,\r\n      \"status\": \"ENABLED\",\r\n      \"createdDate\": 94,\r\n      \"createdBy\": \"createdBy36\",\r\n      \"lastUpdatedDate\": 94,\r\n      \"lastLoginDate\": 94,\r\n      \"lastPasswordReset\": 94\r\n    },\r\n    \"features\": [\r\n      94\r\n    ],\r\n    \"apps\": [\r\n      94\r\n    ],\r\n    \"groups\": [\r\n      94\r\n    ],\r\n    \"roles\": [\r\n      \"roles36\"\r\n    ],\r\n    \"disclaimers\": [\r\n      94\r\n    ],\r\n    \"avatar\": {\r\n      \"size\": \"size36\",\r\n      \"url\": \"url36\"\r\n    }\r\n  }\r\n]"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session Authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/admin/user/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"admin",
										"user",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "Retrieve a list of all users in the company (pod)"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Find a user based on attributes",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\": \"role36\",\r\n  \"feature\": \"feature36\",\r\n  \"status\": \"ENABLED\"\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/user/find?skip=0&limit=32",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"user",
								"find"
							],
							"query": [
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "32"
								}
							]
						},
						"description": "Find a user based on attributes"
					},
					"response": [
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"role\": \"role36\",\r\n  \"feature\": \"feature36\",\r\n  \"status\": \"ENABLED\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/find?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										"find"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "Find a user based on attributes"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  {\r\n    \"userAttributes\": {\r\n      \"emailAddress\": \"emailAddress36\",\r\n      \"firstName\": \"firstName36\",\r\n      \"lastName\": \"lastName36\",\r\n      \"userName\": \"userName36\",\r\n      \"displayName\": \"displayName36\",\r\n      \"companyName\": \"companyName36\",\r\n      \"department\": \"department36\",\r\n      \"division\": \"division36\",\r\n      \"title\": \"title36\",\r\n      \"workPhoneNumber\": \"workPhoneNumber36\",\r\n      \"mobilePhoneNumber\": \"mobilePhoneNumber36\",\r\n      \"smsNumber\": \"smsNumber36\",\r\n      \"accountType\": \"NORMAL\",\r\n      \"location\": \"location36\",\r\n      \"jobFunction\": \"jobFunction36\",\r\n      \"assetClasses\": [\r\n        \"assetClasses36\"\r\n      ],\r\n      \"industries\": [\r\n        \"industries36\"\r\n      ]\r\n    },\r\n    \"userSystemInfo\": {\r\n      \"id\": 94,\r\n      \"status\": \"ENABLED\",\r\n      \"createdDate\": 94,\r\n      \"createdBy\": \"createdBy36\",\r\n      \"lastUpdatedDate\": 94,\r\n      \"lastLoginDate\": 94,\r\n      \"lastPasswordReset\": 94\r\n    },\r\n    \"features\": [\r\n      94\r\n    ],\r\n    \"apps\": [\r\n      94\r\n    ],\r\n    \"groups\": [\r\n      94\r\n    ],\r\n    \"roles\": [\r\n      \"roles36\"\r\n    ],\r\n    \"disclaimers\": [\r\n      94\r\n    ],\r\n    \"avatar\": {\r\n      \"size\": \"size36\",\r\n      \"url\": \"url36\"\r\n    }\r\n  }\r\n]"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"role\": \"role36\",\r\n  \"feature\": \"feature36\",\r\n  \"status\": \"ENABLED\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/find?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										"find"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "Find a user based on attributes"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"role\": \"role36\",\r\n  \"feature\": \"feature36\",\r\n  \"status\": \"ENABLED\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/find?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										"find"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "Find a user based on attributes"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"role\": \"role36\",\r\n  \"feature\": \"feature36\",\r\n  \"status\": \"ENABLED\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/find?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										"find"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "Find a user based on attributes"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"role\": \"role36\",\r\n  \"feature\": \"feature36\",\r\n  \"status\": \"ENABLED\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/find?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										"find"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "Find a user based on attributes"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Add a role to a user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"id36\"\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/roles/add",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"user",
								":uid",
								"roles",
								"add"
							],
							"variable": [
								{
									"key": "uid",
									"value": "16"
								}
							]
						},
						"description": "Add a role to a user"
					},
					"response": [
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"id36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/roles/add",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"roles",
										"add"
									],
									"variable": [
										{
											"key": "uid",
											"value": "16"
										}
									]
								},
								"description": "Add a role to a user"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"format\": \"TEXT\",\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"id36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/roles/add",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"roles",
										"add"
									],
									"variable": [
										{
											"key": "uid",
											"value": "16"
										}
									]
								},
								"description": "Add a role to a user"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"id36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/roles/add",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"roles",
										"add"
									],
									"variable": [
										{
											"key": "uid",
											"value": "16"
										}
									]
								},
								"description": "Add a role to a user"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"id36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/roles/add",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"roles",
										"add"
									],
									"variable": [
										{
											"key": "uid",
											"value": "16"
										}
									]
								},
								"description": "Add a role to a user"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"id36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/roles/add",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"roles",
										"add"
									],
									"variable": [
										{
											"key": "uid",
											"value": "16"
										}
									]
								},
								"description": "Add a role to a user"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Remove a role from a user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"id36\"\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/roles/remove",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"user",
								":uid",
								"roles",
								"remove"
							],
							"variable": [
								{
									"key": "uid",
									"value": "119"
								}
							]
						},
						"description": "Remove a role from a user"
					},
					"response": [
						{
							"name": "Response_404",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"id36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/roles/remove",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"roles",
										"remove"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Remove a role from a user"
							},
							"status": "Not Found: User cannot be found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"id36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/roles/remove",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"roles",
										"remove"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Remove a role from a user"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"id36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/roles/remove",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"roles",
										"remove"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Remove a role from a user"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"id36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/roles/remove",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"roles",
										"remove"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Remove a role from a user"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"id36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/roles/remove",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"roles",
										"remove"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Remove a role from a user"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"id36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/roles/remove",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"roles",
										"remove"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Remove a role from a user"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"format\": \"TEXT\",\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Get the URL of the avatar of a particular user",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/avatar",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"user",
								":uid",
								"avatar"
							],
							"variable": [
								{
									"key": "uid",
									"value": "119"
								}
							]
						},
						"description": "Get the URL of the avatar of a particular user"
					},
					"response": [
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/avatar",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"avatar"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Get the URL of the avatar of a particular user"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/avatar",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"avatar"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Get the URL of the avatar of a particular user"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  {\r\n    \"size\": \"size36\",\r\n    \"url\": \"url36\"\r\n  }\r\n]"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/avatar",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"avatar"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Get the URL of the avatar of a particular user"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/avatar",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"avatar"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Get the URL of the avatar of a particular user"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/avatar",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"avatar"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Get the URL of the avatar of a particular user"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Update the avatar of a particular user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"image\": \"image36\"\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/avatar/update",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"user",
								":uid",
								"avatar",
								"update"
							],
							"variable": [
								{
									"key": "uid",
									"value": "119"
								}
							]
						},
						"description": "Update the avatar of a particular user"
					},
					"response": [
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"image\": \"image36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/avatar/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"avatar",
										"update"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Update the avatar of a particular user"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"image\": \"image36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/avatar/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"avatar",
										"update"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Update the avatar of a particular user"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"format\": \"TEXT\",\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"image\": \"image36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/avatar/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"avatar",
										"update"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Update the avatar of a particular user"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"image\": \"image36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/avatar/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"avatar",
										"update"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Update the avatar of a particular user"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"image\": \"image36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/avatar/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"avatar",
										"update"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Update the avatar of a particular user"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Get the disclaimer assigned to a user",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/disclaimer",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"user",
								":uid",
								"disclaimer"
							],
							"variable": [
								{
									"key": "uid",
									"value": "119"
								}
							]
						},
						"description": "Get the disclaimer assigned to a user"
					},
					"response": [
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/disclaimer",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"disclaimer"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Get the disclaimer assigned to a user"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/disclaimer",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"disclaimer"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Get the disclaimer assigned to a user"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/disclaimer",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"disclaimer"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Get the disclaimer assigned to a user"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"id\": \"id36\",\r\n  \"name\": \"name36\",\r\n  \"content\": \"content36\",\r\n  \"frequencyInHours\": 94,\r\n  \"isDefault\": false,\r\n  \"isActive\": false,\r\n  \"createdDate\": 94,\r\n  \"modifiedDate\": 94,\r\n  \"format\": \"TEXT\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/disclaimer",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"disclaimer"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Get the disclaimer assigned to a user"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/disclaimer",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"disclaimer"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Get the disclaimer assigned to a user"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Assign a disclaimer to a user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"id36\"\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/disclaimer/update",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"user",
								":uid",
								"disclaimer",
								"update"
							],
							"variable": [
								{
									"key": "uid",
									"value": "119"
								}
							]
						},
						"description": "Assign a disclaimer to a user"
					},
					"response": [
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"id36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/disclaimer/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"disclaimer",
										"update"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Assign a disclaimer to a user"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"format\": \"TEXT\",\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"id36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/disclaimer/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"disclaimer",
										"update"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Assign a disclaimer to a user"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"id36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/disclaimer/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"disclaimer",
										"update"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Assign a disclaimer to a user"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"id36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/disclaimer/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"disclaimer",
										"update"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Assign a disclaimer to a user"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"id36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/disclaimer/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"disclaimer",
										"update"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Assign a disclaimer to a user"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Get the delegates assigned to a user",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/delegates",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"user",
								":uid",
								"delegates"
							],
							"variable": [
								{
									"key": "uid",
									"value": "119"
								}
							]
						},
						"description": "Get the delegates assigned to a user"
					},
					"response": [
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/delegates",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"delegates"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Get the delegates assigned to a user"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/delegates",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"delegates"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Get the delegates assigned to a user"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/delegates",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"delegates"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Get the delegates assigned to a user"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/delegates",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"delegates"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Get the delegates assigned to a user"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/delegates",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"delegates"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Get the delegates assigned to a user"
							},
							"status": "The userid's of the delegates of this user.",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  119\r\n]"
						}
					]
				},
				{
					"name": "[Admin] Update the delegates assigned to a user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": 94,\r\n  \"action\": \"ADD\"\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/delegates/update",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"user",
								":uid",
								"delegates",
								"update"
							],
							"variable": [
								{
									"key": "uid",
									"value": "119"
								}
							]
						},
						"description": "Update the delegates assigned to a user"
					},
					"response": [
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": 94,\r\n  \"action\": \"ADD\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/delegates/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"delegates",
										"update"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Update the delegates assigned to a user"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": 94,\r\n  \"action\": \"ADD\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/delegates/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"delegates",
										"update"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Update the delegates assigned to a user"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": 94,\r\n  \"action\": \"ADD\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/delegates/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"delegates",
										"update"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Update the delegates assigned to a user"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": 94,\r\n  \"action\": \"ADD\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/delegates/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"delegates",
										"update"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Update the delegates assigned to a user"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": 94,\r\n  \"action\": \"ADD\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/delegates/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"delegates",
										"update"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Update the delegates assigned to a user"
							},
							"status": "Sucesss.",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"format\": \"TEXT\",\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Get the list of Symphony feature entitlements enabled for a particular user",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/features",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"user",
								":uid",
								"features"
							],
							"variable": [
								{
									"key": "uid",
									"value": "119"
								}
							]
						},
						"description": "Get the list of Symphony feature entitlements enabled for a particular user"
					},
					"response": [
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/features",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"features"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Get the list of Symphony feature entitlements enabled for a particular user"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/features",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"features"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Get the list of Symphony feature entitlements enabled for a particular user"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/features",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"features"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Get the list of Symphony feature entitlements enabled for a particular user"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/features",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"features"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Get the list of Symphony feature entitlements enabled for a particular user"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/features",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"features"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Get the list of Symphony feature entitlements enabled for a particular user"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  {\r\n    \"entitlment\": \"entitlment36\",\r\n    \"enabled\": false\r\n  }\r\n]"
						}
					]
				},
				{
					"name": "[Admin] Update the list of Symphony feature entitlements for a particular user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"entitlment\": \"entitlment36\",\r\n    \"enabled\": false\r\n  }\r\n]"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/features/update",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"user",
								":uid",
								"features",
								"update"
							],
							"variable": [
								{
									"key": "uid",
									"value": "119"
								}
							]
						},
						"description": "Update the list of Symphony feature entitlements for a particular user"
					},
					"response": [
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"entitlment\": \"entitlment36\",\r\n    \"enabled\": false\r\n  }\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/features/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"features",
										"update"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Update the list of Symphony feature entitlements for a particular user"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"entitlment\": \"entitlment36\",\r\n    \"enabled\": false\r\n  }\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/features/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"features",
										"update"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Update the list of Symphony feature entitlements for a particular user"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"entitlment\": \"entitlment36\",\r\n    \"enabled\": false\r\n  }\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/features/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"features",
										"update"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Update the list of Symphony feature entitlements for a particular user"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"entitlment\": \"entitlment36\",\r\n    \"enabled\": false\r\n  }\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/features/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"features",
										"update"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Update the list of Symphony feature entitlements for a particular user"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"format\": \"TEXT\",\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"entitlment\": \"entitlment36\",\r\n    \"enabled\": false\r\n  }\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/features/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"features",
										"update"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Update the list of Symphony feature entitlements for a particular user"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Get the status, active or inactive, for a particular user",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/status",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"user",
								":uid",
								"status"
							],
							"variable": [
								{
									"key": "uid",
									"value": "119"
								}
							]
						},
						"description": "Get the status, active or inactive, for a particular user"
					},
					"response": [
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/status",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"status"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Get the status, active or inactive, for a particular user"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/status",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"status"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Get the status, active or inactive, for a particular user"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/status",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"status"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Get the status, active or inactive, for a particular user"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/status",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"status"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Get the status, active or inactive, for a particular user"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"status\": \"ENABLED\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/status",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"status"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Get the status, active or inactive, for a particular user"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Update the status of a particular user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"ENABLED\"\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/status/update",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"user",
								":uid",
								"status",
								"update"
							],
							"variable": [
								{
									"key": "uid",
									"value": "119"
								}
							]
						},
						"description": "Update the status of a particular user"
					},
					"response": [
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": \"ENABLED\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/status/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"status",
										"update"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Update the status of a particular user"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": \"ENABLED\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/status/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"status",
										"update"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Update the status of a particular user"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": \"ENABLED\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/status/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"status",
										"update"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Update the status of a particular user"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": \"ENABLED\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/status/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"status",
										"update"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Update the status of a particular user"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"format\": \"TEXT\",\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": \"ENABLED\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/status/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"status",
										"update"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Update the status of a particular user"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Create a new V2 User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userAttributes\": {\r\n    \"emailAddress\": \"emailAddress36\",\r\n    \"firstName\": \"firstName36\",\r\n    \"lastName\": \"lastName36\",\r\n    \"userName\": \"userName36\",\r\n    \"displayName\": \"displayName36\",\r\n    \"companyName\": \"companyName36\",\r\n    \"department\": \"department36\",\r\n    \"division\": \"division36\",\r\n    \"title\": \"title36\",\r\n    \"workPhoneNumber\": \"workPhoneNumber36\",\r\n    \"mobilePhoneNumber\": \"mobilePhoneNumber36\",\r\n    \"twoFactorAuthPhone\": \"twoFactorAuthPhone36\",\r\n    \"smsNumber\": \"smsNumber36\",\r\n    \"accountType\": \"NORMAL\",\r\n    \"location\": \"location36\",\r\n    \"recommendedLanguage\": \"recommendedLanguage36\",\r\n    \"jobFunction\": \"jobFunction36\",\r\n    \"assetClasses\": [\r\n      \"assetClasses36\"\r\n    ],\r\n    \"industries\": [\r\n      \"industries36\"\r\n    ],\r\n    \"currentKey\": {\r\n      \"key\": \"key36\",\r\n      \"expirationDate\": 94,\r\n      \"action\": \"action36\"\r\n    },\r\n    \"previousKey\": {\r\n      \"key\": \"key36\",\r\n      \"expirationDate\": 94,\r\n      \"action\": \"action36\"\r\n    },\r\n    \"interactionUrl\": \"interactionUrl36\"\r\n  },\r\n  \"password\": {\r\n    \"hSalt\": \"hSalt36\",\r\n    \"hPassword\": \"hPassword36\",\r\n    \"khSalt\": \"khSalt36\",\r\n    \"khPassword\": \"khPassword36\"\r\n  },\r\n  \"roles\": [\r\n    \"roles36\"\r\n  ]\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v2/admin/user/create",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v2",
								"admin",
								"user",
								"create"
							]
						},
						"description": "Create a new V2 User"
					},
					"response": [
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userAttributes\": {\r\n    \"emailAddress\": \"emailAddress36\",\r\n    \"firstName\": \"firstName36\",\r\n    \"lastName\": \"lastName36\",\r\n    \"userName\": \"userName36\",\r\n    \"displayName\": \"displayName36\",\r\n    \"companyName\": \"companyName36\",\r\n    \"department\": \"department36\",\r\n    \"division\": \"division36\",\r\n    \"title\": \"title36\",\r\n    \"workPhoneNumber\": \"workPhoneNumber36\",\r\n    \"mobilePhoneNumber\": \"mobilePhoneNumber36\",\r\n    \"twoFactorAuthPhone\": \"twoFactorAuthPhone36\",\r\n    \"smsNumber\": \"smsNumber36\",\r\n    \"accountType\": \"NORMAL\",\r\n    \"location\": \"location36\",\r\n    \"recommendedLanguage\": \"recommendedLanguage36\",\r\n    \"jobFunction\": \"jobFunction36\",\r\n    \"assetClasses\": [\r\n      \"assetClasses36\"\r\n    ],\r\n    \"industries\": [\r\n      \"industries36\"\r\n    ],\r\n    \"currentKey\": {\r\n      \"key\": \"key36\",\r\n      \"expirationDate\": 94,\r\n      \"action\": \"action36\"\r\n    },\r\n    \"previousKey\": {\r\n      \"key\": \"key36\",\r\n      \"expirationDate\": 94,\r\n      \"action\": \"action36\"\r\n    },\r\n    \"interactionUrl\": \"interactionUrl36\"\r\n  },\r\n  \"password\": {\r\n    \"hSalt\": \"hSalt36\",\r\n    \"hPassword\": \"hPassword36\",\r\n    \"khSalt\": \"khSalt36\",\r\n    \"khPassword\": \"khPassword36\"\r\n  },\r\n  \"roles\": [\r\n    \"roles36\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/admin/user/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"admin",
										"user",
										"create"
									]
								},
								"description": "Create a new V2 User"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userAttributes\": {\r\n    \"emailAddress\": \"emailAddress36\",\r\n    \"firstName\": \"firstName36\",\r\n    \"lastName\": \"lastName36\",\r\n    \"userName\": \"userName36\",\r\n    \"displayName\": \"displayName36\",\r\n    \"companyName\": \"companyName36\",\r\n    \"department\": \"department36\",\r\n    \"division\": \"division36\",\r\n    \"title\": \"title36\",\r\n    \"workPhoneNumber\": \"workPhoneNumber36\",\r\n    \"mobilePhoneNumber\": \"mobilePhoneNumber36\",\r\n    \"twoFactorAuthPhone\": \"twoFactorAuthPhone36\",\r\n    \"smsNumber\": \"smsNumber36\",\r\n    \"accountType\": \"NORMAL\",\r\n    \"location\": \"location36\",\r\n    \"recommendedLanguage\": \"recommendedLanguage36\",\r\n    \"jobFunction\": \"jobFunction36\",\r\n    \"assetClasses\": [\r\n      \"assetClasses36\"\r\n    ],\r\n    \"industries\": [\r\n      \"industries36\"\r\n    ],\r\n    \"currentKey\": {\r\n      \"key\": \"key36\",\r\n      \"expirationDate\": 94,\r\n      \"action\": \"action36\"\r\n    },\r\n    \"previousKey\": {\r\n      \"key\": \"key36\",\r\n      \"expirationDate\": 94,\r\n      \"action\": \"action36\"\r\n    },\r\n    \"interactionUrl\": \"interactionUrl36\"\r\n  },\r\n  \"password\": {\r\n    \"hSalt\": \"hSalt36\",\r\n    \"hPassword\": \"hPassword36\",\r\n    \"khSalt\": \"khSalt36\",\r\n    \"khPassword\": \"khPassword36\"\r\n  },\r\n  \"roles\": [\r\n    \"roles36\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/admin/user/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"admin",
										"user",
										"create"
									]
								},
								"description": "Create a new V2 User"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"userAttributes\": {\r\n    \"emailAddress\": \"emailAddress36\",\r\n    \"firstName\": \"firstName36\",\r\n    \"lastName\": \"lastName36\",\r\n    \"userName\": \"userName36\",\r\n    \"displayName\": \"displayName36\",\r\n    \"companyName\": \"companyName36\",\r\n    \"department\": \"department36\",\r\n    \"division\": \"division36\",\r\n    \"title\": \"title36\",\r\n    \"workPhoneNumber\": \"workPhoneNumber36\",\r\n    \"mobilePhoneNumber\": \"mobilePhoneNumber36\",\r\n    \"twoFactorAuthPhone\": \"twoFactorAuthPhone36\",\r\n    \"smsNumber\": \"smsNumber36\",\r\n    \"accountType\": \"NORMAL\",\r\n    \"location\": \"location36\",\r\n    \"recommendedLanguage\": \"recommendedLanguage36\",\r\n    \"jobFunction\": \"jobFunction36\",\r\n    \"assetClasses\": [\r\n      \"assetClasses36\"\r\n    ],\r\n    \"industries\": [\r\n      \"industries36\"\r\n    ],\r\n    \"currentKey\": {\r\n      \"key\": \"key36\",\r\n      \"expirationDate\": 94,\r\n      \"action\": \"action36\"\r\n    },\r\n    \"previousKey\": {\r\n      \"key\": \"key36\",\r\n      \"expirationDate\": 94,\r\n      \"action\": \"action36\"\r\n    },\r\n    \"interactionUrl\": \"interactionUrl36\"\r\n  },\r\n  \"userSystemInfo\": {\r\n    \"id\": 94,\r\n    \"status\": \"ENABLED\",\r\n    \"createdDate\": 94,\r\n    \"createdBy\": \"createdBy36\",\r\n    \"lastUpdatedDate\": 94,\r\n    \"lastLoginDate\": 94,\r\n    \"lastPasswordReset\": 94\r\n  },\r\n  \"features\": [\r\n    94\r\n  ],\r\n  \"apps\": [\r\n    94\r\n  ],\r\n  \"groups\": [\r\n    94\r\n  ],\r\n  \"roles\": [\r\n    \"roles36\"\r\n  ],\r\n  \"disclaimers\": [\r\n    94\r\n  ],\r\n  \"avatar\": {\r\n    \"size\": \"size36\",\r\n    \"url\": \"url36\"\r\n  }\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userAttributes\": {\r\n    \"emailAddress\": \"emailAddress36\",\r\n    \"firstName\": \"firstName36\",\r\n    \"lastName\": \"lastName36\",\r\n    \"userName\": \"userName36\",\r\n    \"displayName\": \"displayName36\",\r\n    \"companyName\": \"companyName36\",\r\n    \"department\": \"department36\",\r\n    \"division\": \"division36\",\r\n    \"title\": \"title36\",\r\n    \"workPhoneNumber\": \"workPhoneNumber36\",\r\n    \"mobilePhoneNumber\": \"mobilePhoneNumber36\",\r\n    \"twoFactorAuthPhone\": \"twoFactorAuthPhone36\",\r\n    \"smsNumber\": \"smsNumber36\",\r\n    \"accountType\": \"NORMAL\",\r\n    \"location\": \"location36\",\r\n    \"recommendedLanguage\": \"recommendedLanguage36\",\r\n    \"jobFunction\": \"jobFunction36\",\r\n    \"assetClasses\": [\r\n      \"assetClasses36\"\r\n    ],\r\n    \"industries\": [\r\n      \"industries36\"\r\n    ],\r\n    \"currentKey\": {\r\n      \"key\": \"key36\",\r\n      \"expirationDate\": 94,\r\n      \"action\": \"action36\"\r\n    },\r\n    \"previousKey\": {\r\n      \"key\": \"key36\",\r\n      \"expirationDate\": 94,\r\n      \"action\": \"action36\"\r\n    },\r\n    \"interactionUrl\": \"interactionUrl36\"\r\n  },\r\n  \"password\": {\r\n    \"hSalt\": \"hSalt36\",\r\n    \"hPassword\": \"hPassword36\",\r\n    \"khSalt\": \"khSalt36\",\r\n    \"khPassword\": \"khPassword36\"\r\n  },\r\n  \"roles\": [\r\n    \"roles36\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/admin/user/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"admin",
										"user",
										"create"
									]
								},
								"description": "Create a new V2 User"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userAttributes\": {\r\n    \"emailAddress\": \"emailAddress36\",\r\n    \"firstName\": \"firstName36\",\r\n    \"lastName\": \"lastName36\",\r\n    \"userName\": \"userName36\",\r\n    \"displayName\": \"displayName36\",\r\n    \"companyName\": \"companyName36\",\r\n    \"department\": \"department36\",\r\n    \"division\": \"division36\",\r\n    \"title\": \"title36\",\r\n    \"workPhoneNumber\": \"workPhoneNumber36\",\r\n    \"mobilePhoneNumber\": \"mobilePhoneNumber36\",\r\n    \"twoFactorAuthPhone\": \"twoFactorAuthPhone36\",\r\n    \"smsNumber\": \"smsNumber36\",\r\n    \"accountType\": \"NORMAL\",\r\n    \"location\": \"location36\",\r\n    \"recommendedLanguage\": \"recommendedLanguage36\",\r\n    \"jobFunction\": \"jobFunction36\",\r\n    \"assetClasses\": [\r\n      \"assetClasses36\"\r\n    ],\r\n    \"industries\": [\r\n      \"industries36\"\r\n    ],\r\n    \"currentKey\": {\r\n      \"key\": \"key36\",\r\n      \"expirationDate\": 94,\r\n      \"action\": \"action36\"\r\n    },\r\n    \"previousKey\": {\r\n      \"key\": \"key36\",\r\n      \"expirationDate\": 94,\r\n      \"action\": \"action36\"\r\n    },\r\n    \"interactionUrl\": \"interactionUrl36\"\r\n  },\r\n  \"password\": {\r\n    \"hSalt\": \"hSalt36\",\r\n    \"hPassword\": \"hPassword36\",\r\n    \"khSalt\": \"khSalt36\",\r\n    \"khPassword\": \"khPassword36\"\r\n  },\r\n  \"roles\": [\r\n    \"roles36\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/admin/user/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"admin",
										"user",
										"create"
									]
								},
								"description": "Create a new V2 User"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userAttributes\": {\r\n    \"emailAddress\": \"emailAddress36\",\r\n    \"firstName\": \"firstName36\",\r\n    \"lastName\": \"lastName36\",\r\n    \"userName\": \"userName36\",\r\n    \"displayName\": \"displayName36\",\r\n    \"companyName\": \"companyName36\",\r\n    \"department\": \"department36\",\r\n    \"division\": \"division36\",\r\n    \"title\": \"title36\",\r\n    \"workPhoneNumber\": \"workPhoneNumber36\",\r\n    \"mobilePhoneNumber\": \"mobilePhoneNumber36\",\r\n    \"twoFactorAuthPhone\": \"twoFactorAuthPhone36\",\r\n    \"smsNumber\": \"smsNumber36\",\r\n    \"accountType\": \"NORMAL\",\r\n    \"location\": \"location36\",\r\n    \"recommendedLanguage\": \"recommendedLanguage36\",\r\n    \"jobFunction\": \"jobFunction36\",\r\n    \"assetClasses\": [\r\n      \"assetClasses36\"\r\n    ],\r\n    \"industries\": [\r\n      \"industries36\"\r\n    ],\r\n    \"currentKey\": {\r\n      \"key\": \"key36\",\r\n      \"expirationDate\": 94,\r\n      \"action\": \"action36\"\r\n    },\r\n    \"previousKey\": {\r\n      \"key\": \"key36\",\r\n      \"expirationDate\": 94,\r\n      \"action\": \"action36\"\r\n    },\r\n    \"interactionUrl\": \"interactionUrl36\"\r\n  },\r\n  \"password\": {\r\n    \"hSalt\": \"hSalt36\",\r\n    \"hPassword\": \"hPassword36\",\r\n    \"khSalt\": \"khSalt36\",\r\n    \"khPassword\": \"khPassword36\"\r\n  },\r\n  \"roles\": [\r\n    \"roles36\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/admin/user/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"admin",
										"user",
										"create"
									]
								},
								"description": "Create a new V2 User"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Update an existing V2 User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"emailAddress\": \"emailAddress36\",\r\n  \"firstName\": \"firstName36\",\r\n  \"lastName\": \"lastName36\",\r\n  \"userName\": \"userName36\",\r\n  \"displayName\": \"displayName36\",\r\n  \"companyName\": \"companyName36\",\r\n  \"department\": \"department36\",\r\n  \"division\": \"division36\",\r\n  \"title\": \"title36\",\r\n  \"workPhoneNumber\": \"workPhoneNumber36\",\r\n  \"mobilePhoneNumber\": \"mobilePhoneNumber36\",\r\n  \"twoFactorAuthPhone\": \"twoFactorAuthPhone36\",\r\n  \"smsNumber\": \"smsNumber36\",\r\n  \"accountType\": \"NORMAL\",\r\n  \"location\": \"location36\",\r\n  \"recommendedLanguage\": \"recommendedLanguage36\",\r\n  \"jobFunction\": \"jobFunction36\",\r\n  \"assetClasses\": [\r\n    \"assetClasses36\"\r\n  ],\r\n  \"industries\": [\r\n    \"industries36\"\r\n  ],\r\n  \"currentKey\": {\r\n    \"key\": \"key36\",\r\n    \"expirationDate\": 94,\r\n    \"action\": \"action36\"\r\n  },\r\n  \"previousKey\": {\r\n    \"key\": \"key36\",\r\n    \"expirationDate\": 94,\r\n    \"action\": \"action36\"\r\n  },\r\n  \"interactionUrl\": \"interactionUrl36\"\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v2/admin/user/:uid/update",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v2",
								"admin",
								"user",
								":uid",
								"update"
							],
							"variable": [
								{
									"key": "uid",
									"value": "119"
								}
							]
						},
						"description": "Update an existing V2 User"
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"emailAddress\": \"emailAddress36\",\r\n  \"firstName\": \"firstName36\",\r\n  \"lastName\": \"lastName36\",\r\n  \"userName\": \"userName36\",\r\n  \"displayName\": \"displayName36\",\r\n  \"companyName\": \"companyName36\",\r\n  \"department\": \"department36\",\r\n  \"division\": \"division36\",\r\n  \"title\": \"title36\",\r\n  \"workPhoneNumber\": \"workPhoneNumber36\",\r\n  \"mobilePhoneNumber\": \"mobilePhoneNumber36\",\r\n  \"twoFactorAuthPhone\": \"twoFactorAuthPhone36\",\r\n  \"smsNumber\": \"smsNumber36\",\r\n  \"accountType\": \"NORMAL\",\r\n  \"location\": \"location36\",\r\n  \"recommendedLanguage\": \"recommendedLanguage36\",\r\n  \"jobFunction\": \"jobFunction36\",\r\n  \"assetClasses\": [\r\n    \"assetClasses36\"\r\n  ],\r\n  \"industries\": [\r\n    \"industries36\"\r\n  ],\r\n  \"currentKey\": {\r\n    \"key\": \"key36\",\r\n    \"expirationDate\": 94,\r\n    \"action\": \"action36\"\r\n  },\r\n  \"previousKey\": {\r\n    \"key\": \"key36\",\r\n    \"expirationDate\": 94,\r\n    \"action\": \"action36\"\r\n  },\r\n  \"interactionUrl\": \"interactionUrl36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/admin/user/:uid/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"admin",
										"user",
										":uid",
										"update"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Update an existing V2 User"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"emailAddress\": \"emailAddress36\",\r\n  \"firstName\": \"firstName36\",\r\n  \"lastName\": \"lastName36\",\r\n  \"userName\": \"userName36\",\r\n  \"displayName\": \"displayName36\",\r\n  \"companyName\": \"companyName36\",\r\n  \"department\": \"department36\",\r\n  \"division\": \"division36\",\r\n  \"title\": \"title36\",\r\n  \"workPhoneNumber\": \"workPhoneNumber36\",\r\n  \"mobilePhoneNumber\": \"mobilePhoneNumber36\",\r\n  \"twoFactorAuthPhone\": \"twoFactorAuthPhone36\",\r\n  \"smsNumber\": \"smsNumber36\",\r\n  \"accountType\": \"NORMAL\",\r\n  \"location\": \"location36\",\r\n  \"recommendedLanguage\": \"recommendedLanguage36\",\r\n  \"jobFunction\": \"jobFunction36\",\r\n  \"assetClasses\": [\r\n    \"assetClasses36\"\r\n  ],\r\n  \"industries\": [\r\n    \"industries36\"\r\n  ],\r\n  \"currentKey\": {\r\n    \"key\": \"key36\",\r\n    \"expirationDate\": 94,\r\n    \"action\": \"action36\"\r\n  },\r\n  \"previousKey\": {\r\n    \"key\": \"key36\",\r\n    \"expirationDate\": 94,\r\n    \"action\": \"action36\"\r\n  },\r\n  \"interactionUrl\": \"interactionUrl36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/admin/user/:uid/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"admin",
										"user",
										":uid",
										"update"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Update an existing V2 User"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"emailAddress\": \"emailAddress36\",\r\n  \"firstName\": \"firstName36\",\r\n  \"lastName\": \"lastName36\",\r\n  \"userName\": \"userName36\",\r\n  \"displayName\": \"displayName36\",\r\n  \"companyName\": \"companyName36\",\r\n  \"department\": \"department36\",\r\n  \"division\": \"division36\",\r\n  \"title\": \"title36\",\r\n  \"workPhoneNumber\": \"workPhoneNumber36\",\r\n  \"mobilePhoneNumber\": \"mobilePhoneNumber36\",\r\n  \"twoFactorAuthPhone\": \"twoFactorAuthPhone36\",\r\n  \"smsNumber\": \"smsNumber36\",\r\n  \"accountType\": \"NORMAL\",\r\n  \"location\": \"location36\",\r\n  \"recommendedLanguage\": \"recommendedLanguage36\",\r\n  \"jobFunction\": \"jobFunction36\",\r\n  \"assetClasses\": [\r\n    \"assetClasses36\"\r\n  ],\r\n  \"industries\": [\r\n    \"industries36\"\r\n  ],\r\n  \"currentKey\": {\r\n    \"key\": \"key36\",\r\n    \"expirationDate\": 94,\r\n    \"action\": \"action36\"\r\n  },\r\n  \"previousKey\": {\r\n    \"key\": \"key36\",\r\n    \"expirationDate\": 94,\r\n    \"action\": \"action36\"\r\n  },\r\n  \"interactionUrl\": \"interactionUrl36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/admin/user/:uid/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"admin",
										"user",
										":uid",
										"update"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Update an existing V2 User"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"emailAddress\": \"emailAddress36\",\r\n  \"firstName\": \"firstName36\",\r\n  \"lastName\": \"lastName36\",\r\n  \"userName\": \"userName36\",\r\n  \"displayName\": \"displayName36\",\r\n  \"companyName\": \"companyName36\",\r\n  \"department\": \"department36\",\r\n  \"division\": \"division36\",\r\n  \"title\": \"title36\",\r\n  \"workPhoneNumber\": \"workPhoneNumber36\",\r\n  \"mobilePhoneNumber\": \"mobilePhoneNumber36\",\r\n  \"twoFactorAuthPhone\": \"twoFactorAuthPhone36\",\r\n  \"smsNumber\": \"smsNumber36\",\r\n  \"accountType\": \"NORMAL\",\r\n  \"location\": \"location36\",\r\n  \"recommendedLanguage\": \"recommendedLanguage36\",\r\n  \"jobFunction\": \"jobFunction36\",\r\n  \"assetClasses\": [\r\n    \"assetClasses36\"\r\n  ],\r\n  \"industries\": [\r\n    \"industries36\"\r\n  ],\r\n  \"currentKey\": {\r\n    \"key\": \"key36\",\r\n    \"expirationDate\": 94,\r\n    \"action\": \"action36\"\r\n  },\r\n  \"previousKey\": {\r\n    \"key\": \"key36\",\r\n    \"expirationDate\": 94,\r\n    \"action\": \"action36\"\r\n  },\r\n  \"interactionUrl\": \"interactionUrl36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/admin/user/:uid/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"admin",
										"user",
										":uid",
										"update"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Update an existing V2 User"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"userAttributes\": {\r\n    \"emailAddress\": \"emailAddress36\",\r\n    \"firstName\": \"firstName36\",\r\n    \"lastName\": \"lastName36\",\r\n    \"userName\": \"userName36\",\r\n    \"displayName\": \"displayName36\",\r\n    \"companyName\": \"companyName36\",\r\n    \"department\": \"department36\",\r\n    \"division\": \"division36\",\r\n    \"title\": \"title36\",\r\n    \"workPhoneNumber\": \"workPhoneNumber36\",\r\n    \"mobilePhoneNumber\": \"mobilePhoneNumber36\",\r\n    \"twoFactorAuthPhone\": \"twoFactorAuthPhone36\",\r\n    \"smsNumber\": \"smsNumber36\",\r\n    \"accountType\": \"NORMAL\",\r\n    \"location\": \"location36\",\r\n    \"recommendedLanguage\": \"recommendedLanguage36\",\r\n    \"jobFunction\": \"jobFunction36\",\r\n    \"assetClasses\": [\r\n      \"assetClasses36\"\r\n    ],\r\n    \"industries\": [\r\n      \"industries36\"\r\n    ],\r\n    \"currentKey\": {\r\n      \"key\": \"key36\",\r\n      \"expirationDate\": 94,\r\n      \"action\": \"action36\"\r\n    },\r\n    \"previousKey\": {\r\n      \"key\": \"key36\",\r\n      \"expirationDate\": 94,\r\n      \"action\": \"action36\"\r\n    },\r\n    \"interactionUrl\": \"interactionUrl36\"\r\n  },\r\n  \"userSystemInfo\": {\r\n    \"id\": 94,\r\n    \"status\": \"ENABLED\",\r\n    \"createdDate\": 94,\r\n    \"createdBy\": \"createdBy36\",\r\n    \"lastUpdatedDate\": 94,\r\n    \"lastLoginDate\": 94,\r\n    \"lastPasswordReset\": 94\r\n  },\r\n  \"features\": [\r\n    94\r\n  ],\r\n  \"apps\": [\r\n    94\r\n  ],\r\n  \"groups\": [\r\n    94\r\n  ],\r\n  \"roles\": [\r\n    \"roles36\"\r\n  ],\r\n  \"disclaimers\": [\r\n    94\r\n  ],\r\n  \"avatar\": {\r\n    \"size\": \"size36\",\r\n    \"url\": \"url36\"\r\n  }\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"emailAddress\": \"emailAddress36\",\r\n  \"firstName\": \"firstName36\",\r\n  \"lastName\": \"lastName36\",\r\n  \"userName\": \"userName36\",\r\n  \"displayName\": \"displayName36\",\r\n  \"companyName\": \"companyName36\",\r\n  \"department\": \"department36\",\r\n  \"division\": \"division36\",\r\n  \"title\": \"title36\",\r\n  \"workPhoneNumber\": \"workPhoneNumber36\",\r\n  \"mobilePhoneNumber\": \"mobilePhoneNumber36\",\r\n  \"twoFactorAuthPhone\": \"twoFactorAuthPhone36\",\r\n  \"smsNumber\": \"smsNumber36\",\r\n  \"accountType\": \"NORMAL\",\r\n  \"location\": \"location36\",\r\n  \"recommendedLanguage\": \"recommendedLanguage36\",\r\n  \"jobFunction\": \"jobFunction36\",\r\n  \"assetClasses\": [\r\n    \"assetClasses36\"\r\n  ],\r\n  \"industries\": [\r\n    \"industries36\"\r\n  ],\r\n  \"currentKey\": {\r\n    \"key\": \"key36\",\r\n    \"expirationDate\": 94,\r\n    \"action\": \"action36\"\r\n  },\r\n  \"previousKey\": {\r\n    \"key\": \"key36\",\r\n    \"expirationDate\": 94,\r\n    \"action\": \"action36\"\r\n  },\r\n  \"interactionUrl\": \"interactionUrl36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/admin/user/:uid/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"admin",
										"user",
										":uid",
										"update"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Update an existing V2 User"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Retrieve V2 User details for a particular user",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v2/admin/user/:uid",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v2",
								"admin",
								"user",
								":uid"
							],
							"variable": [
								{
									"key": "uid",
									"value": "119"
								}
							]
						},
						"description": "Retreive V2 User details for a particular user"
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/admin/user/:uid",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"admin",
										"user",
										":uid"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Retreive V2 User details for a particular user"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/admin/user/:uid",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"admin",
										"user",
										":uid"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Retreive V2 User details for a particular user"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/admin/user/:uid",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"admin",
										"user",
										":uid"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Retreive V2 User details for a particular user"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/admin/user/:uid",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"admin",
										"user",
										":uid"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Retreive V2 User details for a particular user"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"userAttributes\": {\r\n    \"emailAddress\": \"emailAddress36\",\r\n    \"firstName\": \"firstName36\",\r\n    \"lastName\": \"lastName36\",\r\n    \"userName\": \"userName36\",\r\n    \"displayName\": \"displayName36\",\r\n    \"companyName\": \"companyName36\",\r\n    \"department\": \"department36\",\r\n    \"division\": \"division36\",\r\n    \"title\": \"title36\",\r\n    \"workPhoneNumber\": \"workPhoneNumber36\",\r\n    \"mobilePhoneNumber\": \"mobilePhoneNumber36\",\r\n    \"twoFactorAuthPhone\": \"twoFactorAuthPhone36\",\r\n    \"smsNumber\": \"smsNumber36\",\r\n    \"accountType\": \"NORMAL\",\r\n    \"location\": \"location36\",\r\n    \"recommendedLanguage\": \"recommendedLanguage36\",\r\n    \"jobFunction\": \"jobFunction36\",\r\n    \"assetClasses\": [\r\n      \"assetClasses36\"\r\n    ],\r\n    \"industries\": [\r\n      \"industries36\"\r\n    ],\r\n    \"currentKey\": {\r\n      \"key\": \"key36\",\r\n      \"expirationDate\": 94,\r\n      \"action\": \"action36\"\r\n    },\r\n    \"previousKey\": {\r\n      \"key\": \"key36\",\r\n      \"expirationDate\": 94,\r\n      \"action\": \"action36\"\r\n    },\r\n    \"interactionUrl\": \"interactionUrl36\"\r\n  },\r\n  \"userSystemInfo\": {\r\n    \"id\": 94,\r\n    \"status\": \"ENABLED\",\r\n    \"createdDate\": 94,\r\n    \"createdBy\": \"createdBy36\",\r\n    \"lastUpdatedDate\": 94,\r\n    \"lastLoginDate\": 94,\r\n    \"lastPasswordReset\": 94\r\n  },\r\n  \"features\": [\r\n    94\r\n  ],\r\n  \"apps\": [\r\n    94\r\n  ],\r\n  \"groups\": [\r\n    94\r\n  ],\r\n  \"roles\": [\r\n    \"roles36\"\r\n  ],\r\n  \"disclaimers\": [\r\n    94\r\n  ],\r\n  \"avatar\": {\r\n    \"size\": \"size36\",\r\n    \"url\": \"url36\"\r\n  }\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/admin/user/:uid",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"admin",
										"user",
										":uid"
									],
									"variable": [
										{
											"key": "uid",
											"value": "119"
										}
									]
								},
								"description": "Retreive V2 User details for a particular user"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				}
			]
		},
		{
			"name": "Presence",
			"item": [
				{
					"name": "Create Presence status feed.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/presence/feed/create",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"presence",
								"feed",
								"create"
							]
						},
						"description": "Create a new stream capturing presence status changes (\"presence feed\").\nWhen read from, the feed will return the current presence status of company (pod) users\nif it has changed since the last read.\n\nReturns the ID of the presence feed to be used in subsequent read operations.\n"
					},
					"response": [
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/presence/feed/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"presence",
										"feed",
										"create"
									]
								},
								"description": "Create a new stream capturing presence status changes (\"presence feed\").\nWhen read from, the feed will return the current presence status of company (pod) users\nif it has changed since the last read.\n\nReturns the ID of the presence feed to be used in subsequent read operations.\n"
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/presence/feed/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"presence",
										"feed",
										"create"
									]
								},
								"description": "Create a new stream capturing presence status changes (\"presence feed\").\nWhen read from, the feed will return the current presence status of company (pod) users\nif it has changed since the last read.\n\nReturns the ID of the presence feed to be used in subsequent read operations.\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/presence/feed/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"presence",
										"feed",
										"create"
									]
								},
								"description": "Create a new stream capturing presence status changes (\"presence feed\").\nWhen read from, the feed will return the current presence status of company (pod) users\nif it has changed since the last read.\n\nReturns the ID of the presence feed to be used in subsequent read operations.\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/presence/feed/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"presence",
										"feed",
										"create"
									]
								},
								"description": "Create a new stream capturing presence status changes (\"presence feed\").\nWhen read from, the feed will return the current presence status of company (pod) users\nif it has changed since the last read.\n\nReturns the ID of the presence feed to be used in subsequent read operations.\n"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"id\": \"id36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/presence/feed/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"presence",
										"feed",
										"create"
									]
								},
								"description": "Create a new stream capturing presence status changes (\"presence feed\").\nWhen read from, the feed will return the current presence status of company (pod) users\nif it has changed since the last read.\n\nReturns the ID of the presence feed to be used in subsequent read operations.\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "Read a presence status feed.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/presence/feed/:feedId/read",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"presence",
								"feed",
								":feedId",
								"read"
							],
							"variable": [
								{
									"key": "feedId",
									"value": "feedId6"
								}
							]
						},
						"description": "Returns the current presence status of company (pod) users\nif it has changed since the last read. Returns up to 500 records at a time.\n"
					},
					"response": [
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/presence/feed/:feedId/read",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"presence",
										"feed",
										":feedId",
										"read"
									],
									"variable": [
										{
											"key": "feedId",
											"value": "feedId6"
										}
									]
								},
								"description": "Returns the current presence status of company (pod) users\nif it has changed since the last read. Returns up to 500 records at a time.\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/presence/feed/:feedId/read",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"presence",
										"feed",
										":feedId",
										"read"
									],
									"variable": [
										{
											"key": "feedId",
											"value": "feedId6"
										}
									]
								},
								"description": "Returns the current presence status of company (pod) users\nif it has changed since the last read. Returns up to 500 records at a time.\n"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  {\r\n    \"category\": \"category6\",\r\n    \"userId\": 16,\r\n    \"timestamp\": 16\r\n  }\r\n]"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/presence/feed/:feedId/read",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"presence",
										"feed",
										":feedId",
										"read"
									],
									"variable": [
										{
											"key": "feedId",
											"value": "feedId6"
										}
									]
								},
								"description": "Returns the current presence status of company (pod) users\nif it has changed since the last read. Returns up to 500 records at a time.\n"
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/presence/feed/:feedId/read",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"presence",
										"feed",
										":feedId",
										"read"
									],
									"variable": [
										{
											"key": "feedId",
											"value": "feedId6"
										}
									]
								},
								"description": "Returns the current presence status of company (pod) users\nif it has changed since the last read. Returns up to 500 records at a time.\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/presence/feed/:feedId/read",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"presence",
										"feed",
										":feedId",
										"read"
									],
									"variable": [
										{
											"key": "feedId",
											"value": "feedId6"
										}
									]
								},
								"description": "Returns the current presence status of company (pod) users\nif it has changed since the last read. Returns up to 500 records at a time.\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "Delete a presence status feed.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/presence/feed/:feedId/delete",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"presence",
								"feed",
								":feedId",
								"delete"
							],
							"variable": [
								{
									"key": "feedId",
									"value": "feedId6"
								}
							]
						},
						"description": "Returns the ID of the deleted feed.\n"
					},
					"response": [
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/presence/feed/:feedId/delete",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"presence",
										"feed",
										":feedId",
										"delete"
									],
									"variable": [
										{
											"key": "feedId",
											"value": "feedId6"
										}
									]
								},
								"description": "Returns the ID of the deleted feed.\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/presence/feed/:feedId/delete",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"presence",
										"feed",
										":feedId",
										"delete"
									],
									"variable": [
										{
											"key": "feedId",
											"value": "feedId6"
										}
									]
								},
								"description": "Returns the ID of the deleted feed.\n"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"id\": \"id36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/presence/feed/:feedId/delete",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"presence",
										"feed",
										":feedId",
										"delete"
									],
									"variable": [
										{
											"key": "feedId",
											"value": "feedId6"
										}
									]
								},
								"description": "Returns the ID of the deleted feed.\n"
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/presence/feed/:feedId/delete",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"presence",
										"feed",
										":feedId",
										"delete"
									],
									"variable": [
										{
											"key": "feedId",
											"value": "feedId6"
										}
									]
								},
								"description": "Returns the ID of the deleted feed.\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/presence/feed/:feedId/delete",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"presence",
										"feed",
										":feedId",
										"delete"
									],
									"variable": [
										{
											"key": "feedId",
											"value": "feedId6"
										}
									]
								},
								"description": "Returns the ID of the deleted feed.\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "Register interest in a user's presence status",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  16\r\n]"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/user/presence/register",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"user",
								"presence",
								"register"
							]
						},
						"description": "Register interest in a user's presence status"
					},
					"response": [
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  16\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/user/presence/register",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"user",
										"presence",
										"register"
									]
								},
								"description": "Register interest in a user's presence status"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  16\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/user/presence/register",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"user",
										"presence",
										"register"
									]
								},
								"description": "Register interest in a user's presence status"
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  16\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/user/presence/register",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"user",
										"presence",
										"register"
									]
								},
								"description": "Register interest in a user's presence status"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  16\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/user/presence/register",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"user",
										"presence",
										"register"
									]
								},
								"description": "Register interest in a user's presence status"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"format\": \"TEXT\",\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_404",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  16\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/user/presence/register",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"user",
										"presence",
										"register"
									]
								},
								"description": "Register interest in a user's presence status"
							},
							"status": "Not Found: user id cannot be located.",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  16\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/user/presence/register",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"user",
										"presence",
										"register"
									]
								},
								"description": "Register interest in a user's presence status"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "Get presence information about the requesting user.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v2/user/presence",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v2",
								"user",
								"presence"
							]
						},
						"description": "Get presence information about the requesting user."
					},
					"response": [
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/user/presence",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"user",
										"presence"
									]
								},
								"description": "Get presence information about the requesting user."
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/user/presence",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"user",
										"presence"
									]
								},
								"description": "Get presence information about the requesting user."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/user/presence",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"user",
										"presence"
									]
								},
								"description": "Get presence information about the requesting user."
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"category\": \"category6\",\r\n  \"userId\": 16,\r\n  \"timestamp\": 16\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/user/presence",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"user",
										"presence"
									]
								},
								"description": "Get presence information about the requesting user."
							},
							"status": "Unauthorized: Invalid session token",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "Set the presence of the requesting user.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"category\": \"category6\"\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v2/user/presence",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v2",
								"user",
								"presence"
							]
						},
						"description": "Set the presence of the requesting user."
					},
					"response": [
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"category\": \"category6\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/user/presence",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"user",
										"presence"
									]
								},
								"description": "Set the presence of the requesting user."
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"category\": \"category6\",\r\n  \"userId\": 16,\r\n  \"timestamp\": 16\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"category\": \"category6\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/user/presence",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"user",
										"presence"
									]
								},
								"description": "Set the presence of the requesting user."
							},
							"status": "Unauthorized: Invalid session token.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"category\": \"category6\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/user/presence",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"user",
										"presence"
									]
								},
								"description": "Set the presence of the requesting user."
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"category\": \"category6\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/user/presence",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"user",
										"presence"
									]
								},
								"description": "Set the presence of the requesting user."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "Get presence information about a particular user.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v3/user/:uid/presence?local=false",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v3",
								"user",
								":uid",
								"presence"
							],
							"query": [
								{
									"key": "local",
									"value": "false"
								}
							],
							"variable": [
								{
									"key": "uid",
									"value": "16"
								}
							]
						},
						"description": "Get presence information about a particular user."
					},
					"response": [
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/user/:uid/presence?local=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"user",
										":uid",
										"presence"
									],
									"query": [
										{
											"key": "local",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "uid",
											"value": "16"
										}
									]
								},
								"description": "Get presence information about a particular user."
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/user/:uid/presence?local=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"user",
										":uid",
										"presence"
									],
									"query": [
										{
											"key": "local",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "uid",
											"value": "16"
										}
									]
								},
								"description": "Get presence information about a particular user."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/user/:uid/presence?local=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"user",
										":uid",
										"presence"
									],
									"query": [
										{
											"key": "local",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "uid",
											"value": "16"
										}
									]
								},
								"description": "Get presence information about a particular user."
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"category\": \"category6\",\r\n  \"userId\": 16,\r\n  \"timestamp\": 16\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/user/:uid/presence?local=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"user",
										":uid",
										"presence"
									],
									"query": [
										{
											"key": "local",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "uid",
											"value": "16"
										}
									]
								},
								"description": "Get presence information about a particular user."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/user/:uid/presence?local=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"user",
										":uid",
										"presence"
									],
									"query": [
										{
											"key": "local",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "uid",
											"value": "16"
										}
									]
								},
								"description": "Get presence information about a particular user."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_404",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/user/:uid/presence?local=false",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"user",
										":uid",
										"presence"
									],
									"query": [
										{
											"key": "local",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "uid",
											"value": "16"
										}
									]
								},
								"description": "Get presence information about a particular user."
							},
							"status": "Not Found: user id cannot be located.",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "Get presence information about all company (pod) users.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v2/users/presence?lastUserId=16&limit=16",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v2",
								"users",
								"presence"
							],
							"query": [
								{
									"key": "lastUserId",
									"value": "16"
								},
								{
									"key": "limit",
									"value": "16"
								}
							]
						},
						"description": "The returned data is taken from the in-memory cache for performance\nreasons which means inactive users may be omitted from the response.\n\nAll non-inactive users WILL be returned and some inactive users MAY\nbe included. Any omitted user IS inactive.\n\nReturned records are sorted by user ID, ascending.\n\nThis method is expensive. It pulls ALL records from the cache, sorts them and then only uses a subset.\nFor large numbers of users, this can be very inefficient both due to sorting\nand due to the cache being distributed across many nodes.\n\nAddiionally, there is the potential to miss users if they become active\nafter the page in which their user ID falls has already been read by the client.\nTo avoid this situation, a presence feed should be created (and optionally read from)\nfirst to capture presence changes of users who get reactivated during a paged call to this endpoint.\n"
					},
					"response": [
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/users/presence?lastUserId=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"users",
										"presence"
									],
									"query": [
										{
											"key": "lastUserId",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "The returned data is taken from the in-memory cache for performance\nreasons which means inactive users may be omitted from the response.\n\nAll non-inactive users WILL be returned and some inactive users MAY\nbe included. Any omitted user IS inactive.\n\nReturned records are sorted by user ID, ascending.\n\nThis method is expensive. It pulls ALL records from the cache, sorts them and then only uses a subset.\nFor large numbers of users, this can be very inefficient both due to sorting\nand due to the cache being distributed across many nodes.\n\nAddiionally, there is the potential to miss users if they become active\nafter the page in which their user ID falls has already been read by the client.\nTo avoid this situation, a presence feed should be created (and optionally read from)\nfirst to capture presence changes of users who get reactivated during a paged call to this endpoint.\n"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  {\r\n    \"category\": \"category6\",\r\n    \"userId\": 16,\r\n    \"timestamp\": 16\r\n  }\r\n]"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/users/presence?lastUserId=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"users",
										"presence"
									],
									"query": [
										{
											"key": "lastUserId",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "The returned data is taken from the in-memory cache for performance\nreasons which means inactive users may be omitted from the response.\n\nAll non-inactive users WILL be returned and some inactive users MAY\nbe included. Any omitted user IS inactive.\n\nReturned records are sorted by user ID, ascending.\n\nThis method is expensive. It pulls ALL records from the cache, sorts them and then only uses a subset.\nFor large numbers of users, this can be very inefficient both due to sorting\nand due to the cache being distributed across many nodes.\n\nAddiionally, there is the potential to miss users if they become active\nafter the page in which their user ID falls has already been read by the client.\nTo avoid this situation, a presence feed should be created (and optionally read from)\nfirst to capture presence changes of users who get reactivated during a paged call to this endpoint.\n"
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/users/presence?lastUserId=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"users",
										"presence"
									],
									"query": [
										{
											"key": "lastUserId",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "The returned data is taken from the in-memory cache for performance\nreasons which means inactive users may be omitted from the response.\n\nAll non-inactive users WILL be returned and some inactive users MAY\nbe included. Any omitted user IS inactive.\n\nReturned records are sorted by user ID, ascending.\n\nThis method is expensive. It pulls ALL records from the cache, sorts them and then only uses a subset.\nFor large numbers of users, this can be very inefficient both due to sorting\nand due to the cache being distributed across many nodes.\n\nAddiionally, there is the potential to miss users if they become active\nafter the page in which their user ID falls has already been read by the client.\nTo avoid this situation, a presence feed should be created (and optionally read from)\nfirst to capture presence changes of users who get reactivated during a paged call to this endpoint.\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/users/presence?lastUserId=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"users",
										"presence"
									],
									"query": [
										{
											"key": "lastUserId",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "The returned data is taken from the in-memory cache for performance\nreasons which means inactive users may be omitted from the response.\n\nAll non-inactive users WILL be returned and some inactive users MAY\nbe included. Any omitted user IS inactive.\n\nReturned records are sorted by user ID, ascending.\n\nThis method is expensive. It pulls ALL records from the cache, sorts them and then only uses a subset.\nFor large numbers of users, this can be very inefficient both due to sorting\nand due to the cache being distributed across many nodes.\n\nAddiionally, there is the potential to miss users if they become active\nafter the page in which their user ID falls has already been read by the client.\nTo avoid this situation, a presence feed should be created (and optionally read from)\nfirst to capture presence changes of users who get reactivated during a paged call to this endpoint.\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/users/presence?lastUserId=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"users",
										"presence"
									],
									"query": [
										{
											"key": "lastUserId",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "The returned data is taken from the in-memory cache for performance\nreasons which means inactive users may be omitted from the response.\n\nAll non-inactive users WILL be returned and some inactive users MAY\nbe included. Any omitted user IS inactive.\n\nReturned records are sorted by user ID, ascending.\n\nThis method is expensive. It pulls ALL records from the cache, sorts them and then only uses a subset.\nFor large numbers of users, this can be very inefficient both due to sorting\nand due to the cache being distributed across many nodes.\n\nAddiionally, there is the potential to miss users if they become active\nafter the page in which their user ID falls has already been read by the client.\nTo avoid this situation, a presence feed should be created (and optionally read from)\nfirst to capture presence changes of users who get reactivated during a paged call to this endpoint.\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "Set presence information for a particular user.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"category\": \"category6\",\r\n  \"userId\": 16\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v3/user/presence",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v3",
								"user",
								"presence"
							]
						},
						"description": "Set presence information for a particular user."
					},
					"response": [
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"category\": \"category6\",\r\n  \"userId\": 16\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/user/presence",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"user",
										"presence"
									]
								},
								"description": "Set presence information for a particular user."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"category\": \"category6\",\r\n  \"userId\": 16\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/user/presence",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"user",
										"presence"
									]
								},
								"description": "Set presence information for a particular user."
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"category\": \"category6\",\r\n  \"userId\": 16,\r\n  \"timestamp\": 16\r\n}"
						},
						{
							"name": "Response_404",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"category\": \"category6\",\r\n  \"userId\": 16\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/user/presence",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"user",
										"presence"
									]
								},
								"description": "Set presence information for a particular user."
							},
							"status": "Not Found: user id cannot be located.",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"category\": \"category6\",\r\n  \"userId\": 16\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/user/presence",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"user",
										"presence"
									]
								},
								"description": "Set presence information for a particular user."
							},
							"status": "Unauthorized.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"category\": \"category6\",\r\n  \"userId\": 16\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/user/presence",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"user",
										"presence"
									]
								},
								"description": "Set presence information for a particular user."
							},
							"status": "Forbidden.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"category\": \"category6\",\r\n  \"userId\": 16\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v3/user/presence",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v3",
										"user",
										"presence"
									]
								},
								"description": "Set presence information for a particular user."
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				}
			]
		},
		{
			"name": "Connection",
			"item": [
				{
					"name": "List of requesting user's connection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*",
									"pm.response.json().forEach(u => {",
									"    pm.sendRequest({",
									"        url: `https://preview.symphony.com/pod/v3/users?uid=${u.userId}&local=false`,",
									"        method: 'GET',",
									"        header: { 'sessionToken': 'eyJhbGciOiJSUzUxMiJ9.eyJzdWIiOiJpbm5vdmF0ZSIsImlzcyI6InN5bXBob255Iiwic2Vzc2lvbklkIjoiMGU3Mzg1MWZlNzQ0NWNkN2JlNDA1NzIyNmMyYmRjZDgzMzNjNzE0OTY2ZDJmMDIzZmRlZDExYTRlZDUyOWE0MmU0NTAwM2FlN2UwYjJiMmMxNTRjMTc5NmMzOGI5NWJkMDAwMDAxNmRhZjZmYjhmNTAwMDA0MDAwMDAwMDAyZTYiLCJ1c2VySWQiOiI3MDM2ODc0NDE3ODQwNiJ9.kpX7ZCrvYmAWcGmom0kvWR6jCvMqQmxL6IQCFjBUcQpfw4E4eXrU1I2ouA76s-7sGcegKSo6wcdLKh0mBnHah7_DcTl5eqvdF6z5bp8_ZlqOu6Bjgd7ilG9Cz7OQLVmr0U1aIcH7rsDHB_A6itPl_KuV-8M5DhyOpAsjGqFFSomq2S8NRMAXkoV8ucG_jOpZiEPUCvFhkwoaEbZyBTPkphziarPTeOFVJFbvDs2KgXUSI6BT_ypJQbFHe-t5jfclxhflz4y5ZLGiqA0FiBwb6loNEOevY1hzy3xAMYkUUY994u9HMe6E2zTGfD1364YYBECeIx3SaNIg2cxbY0kT9w' }",
									"    }, (err, res) => {",
									"        const x = res.json().users[0];",
									"        console.log(u.userId + \"|\" + u.status + \"|\" + u.updatedAt + \"|\" + x.company + \"|\" + x.displayName + \"|\" + x.emailAddress + \"|\" + x.location)",
									"    });",
									"})",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/connection/list?status=ALL",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"connection",
								"list"
							],
							"query": [
								{
									"key": "status",
									"value": "ALL"
								},
								{
									"key": "userIds",
									"value": "userIds6",
									"disabled": true
								}
							]
						},
						"description": "This retrieves all connections of the requesting user. (i.e. both connections in which the requesting user is the sender and those\nin which the requesting user is the inivtee) By default, if you haven't specified the connection status to filter on, this call will only\nreturn results for both \"pending_incoming\" and \"pending_outgoing\". You can optionally filter by userIds to further restrict the results of\na specific connection status. If the users are in the same private pod, the users have an implicit connection status of \"accepted\". Those\nusers will not be returned in the response if you don't specify the connection status as \"accepted\" (default is \"pending\")\nand the explicit userIds in the request.\n"
					},
					"response": [
						{
							"name": "Response_404",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/list?status=PENDING_OUTGOING&userIds=userIds6",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"list"
									],
									"query": [
										{
											"key": "status",
											"value": "PENDING_OUTGOING"
										},
										{
											"key": "userIds",
											"value": "userIds6"
										}
									]
								},
								"description": "This retrieves all connections of the requesting user. (i.e. both connections in which the requesting user is the sender and those\nin which the requesting user is the inivtee) By default, if you haven't specified the connection status to filter on, this call will only\nreturn results for both \"pending_incoming\" and \"pending_outgoing\". You can optionally filter by userIds to further restrict the results of\na specific connection status. If the users are in the same private pod, the users have an implicit connection status of \"accepted\". Those\nusers will not be returned in the response if you don't specify the connection status as \"accepted\" (default is \"pending\")\nand the explicit userIds in the request.\n"
							},
							"status": "Not Found: Connection cannot be found.",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/list?status=PENDING_OUTGOING&userIds=userIds6",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"list"
									],
									"query": [
										{
											"key": "status",
											"value": "PENDING_OUTGOING"
										},
										{
											"key": "userIds",
											"value": "userIds6"
										}
									]
								},
								"description": "This retrieves all connections of the requesting user. (i.e. both connections in which the requesting user is the sender and those\nin which the requesting user is the inivtee) By default, if you haven't specified the connection status to filter on, this call will only\nreturn results for both \"pending_incoming\" and \"pending_outgoing\". You can optionally filter by userIds to further restrict the results of\na specific connection status. If the users are in the same private pod, the users have an implicit connection status of \"accepted\". Those\nusers will not be returned in the response if you don't specify the connection status as \"accepted\" (default is \"pending\")\nand the explicit userIds in the request.\n"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/list?status=PENDING_OUTGOING&userIds=userIds6",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"list"
									],
									"query": [
										{
											"key": "status",
											"value": "PENDING_OUTGOING"
										},
										{
											"key": "userIds",
											"value": "userIds6"
										}
									]
								},
								"description": "This retrieves all connections of the requesting user. (i.e. both connections in which the requesting user is the sender and those\nin which the requesting user is the inivtee) By default, if you haven't specified the connection status to filter on, this call will only\nreturn results for both \"pending_incoming\" and \"pending_outgoing\". You can optionally filter by userIds to further restrict the results of\na specific connection status. If the users are in the same private pod, the users have an implicit connection status of \"accepted\". Those\nusers will not be returned in the response if you don't specify the connection status as \"accepted\" (default is \"pending\")\nand the explicit userIds in the request.\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/list?status=PENDING_OUTGOING&userIds=userIds6",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"list"
									],
									"query": [
										{
											"key": "status",
											"value": "PENDING_OUTGOING"
										},
										{
											"key": "userIds",
											"value": "userIds6"
										}
									]
								},
								"description": "This retrieves all connections of the requesting user. (i.e. both connections in which the requesting user is the sender and those\nin which the requesting user is the inivtee) By default, if you haven't specified the connection status to filter on, this call will only\nreturn results for both \"pending_incoming\" and \"pending_outgoing\". You can optionally filter by userIds to further restrict the results of\na specific connection status. If the users are in the same private pod, the users have an implicit connection status of \"accepted\". Those\nusers will not be returned in the response if you don't specify the connection status as \"accepted\" (default is \"pending\")\nand the explicit userIds in the request.\n"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  {\r\n    \"userId\": 16,\r\n    \"status\": \"PENDING_OUTGOING\",\r\n    \"firstRequestedAt\": 16,\r\n    \"updatedAt\": 16,\r\n    \"requestCounter\": 16\r\n  }\r\n]"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/list?status=PENDING_OUTGOING&userIds=userIds6",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"list"
									],
									"query": [
										{
											"key": "status",
											"value": "PENDING_OUTGOING"
										},
										{
											"key": "userIds",
											"value": "userIds6"
										}
									]
								},
								"description": "This retrieves all connections of the requesting user. (i.e. both connections in which the requesting user is the sender and those\nin which the requesting user is the inivtee) By default, if you haven't specified the connection status to filter on, this call will only\nreturn results for both \"pending_incoming\" and \"pending_outgoing\". You can optionally filter by userIds to further restrict the results of\na specific connection status. If the users are in the same private pod, the users have an implicit connection status of \"accepted\". Those\nusers will not be returned in the response if you don't specify the connection status as \"accepted\" (default is \"pending\")\nand the explicit userIds in the request.\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/list?status=PENDING_OUTGOING&userIds=userIds6",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"list"
									],
									"query": [
										{
											"key": "status",
											"value": "PENDING_OUTGOING"
										},
										{
											"key": "userIds",
											"value": "userIds6"
										}
									]
								},
								"description": "This retrieves all connections of the requesting user. (i.e. both connections in which the requesting user is the sender and those\nin which the requesting user is the inivtee) By default, if you haven't specified the connection status to filter on, this call will only\nreturn results for both \"pending_incoming\" and \"pending_outgoing\". You can optionally filter by userIds to further restrict the results of\na specific connection status. If the users are in the same private pod, the users have an implicit connection status of \"accepted\". Those\nusers will not be returned in the response if you don't specify the connection status as \"accepted\" (default is \"pending\")\nand the explicit userIds in the request.\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "Sends an invitation to connect with another user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": 16\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/connection/create",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"connection",
								"create"
							]
						},
						"description": "Sends an invitation to connect with another user"
					},
					"response": [
						{
							"name": "Response_404",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": 16\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"create"
									]
								},
								"description": "Sends an invitation to connect with another user"
							},
							"status": "Not Found: User cannot be found.",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": 16\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"create"
									]
								},
								"description": "Sends an invitation to connect with another user"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": 16\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"create"
									]
								},
								"description": "Sends an invitation to connect with another user"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"userId\": 16,\r\n  \"status\": \"PENDING_OUTGOING\",\r\n  \"firstRequestedAt\": 16,\r\n  \"updatedAt\": 16,\r\n  \"requestCounter\": 16\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": 16\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"create"
									]
								},
								"description": "Sends an invitation to connect with another user"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": 16\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"create"
									]
								},
								"description": "Sends an invitation to connect with another user"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": 16\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"create"
									]
								},
								"description": "Sends an invitation to connect with another user"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "Accept the connection request for the requesting user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": 16\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/connection/accept",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"connection",
								"accept"
							]
						},
						"description": "Accept the connection request for the requesting user"
					},
					"response": [
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": 16\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/accept",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"accept"
									]
								},
								"description": "Accept the connection request for the requesting user"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": 16\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/accept",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"accept"
									]
								},
								"description": "Accept the connection request for the requesting user"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": 16\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/accept",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"accept"
									]
								},
								"description": "Accept the connection request for the requesting user"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": 16\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/accept",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"accept"
									]
								},
								"description": "Accept the connection request for the requesting user"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"userId\": 16,\r\n  \"status\": \"PENDING_OUTGOING\",\r\n  \"firstRequestedAt\": 16,\r\n  \"updatedAt\": 16,\r\n  \"requestCounter\": 16\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": 16\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/accept",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"accept"
									]
								},
								"description": "Accept the connection request for the requesting user"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_404",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": 16\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/accept",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"accept"
									]
								},
								"description": "Accept the connection request for the requesting user"
							},
							"status": "Not Found: Connection cannot be found.",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "Reject the connection request for the requesting user.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": 16\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/connection/reject",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"connection",
								"reject"
							]
						},
						"description": "Reject the connection between the requesting user and request sender. If both users are in the same private pod,\nan error will be returned because both users have an implicit connection which cannot be rejected.\n"
					},
					"response": [
						{
							"name": "Response_404",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": 16\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/reject",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"reject"
									]
								},
								"description": "Reject the connection between the requesting user and request sender. If both users are in the same private pod,\nan error will be returned because both users have an implicit connection which cannot be rejected.\n"
							},
							"status": "Not Found: Connection cannot be found.",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": 16\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/reject",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"reject"
									]
								},
								"description": "Reject the connection between the requesting user and request sender. If both users are in the same private pod,\nan error will be returned because both users have an implicit connection which cannot be rejected.\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": 16\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/reject",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"reject"
									]
								},
								"description": "Reject the connection between the requesting user and request sender. If both users are in the same private pod,\nan error will be returned because both users have an implicit connection which cannot be rejected.\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": 16\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/reject",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"reject"
									]
								},
								"description": "Reject the connection between the requesting user and request sender. If both users are in the same private pod,\nan error will be returned because both users have an implicit connection which cannot be rejected.\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": 16\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/reject",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"reject"
									]
								},
								"description": "Reject the connection between the requesting user and request sender. If both users are in the same private pod,\nan error will be returned because both users have an implicit connection which cannot be rejected.\n"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"userId\": 16,\r\n  \"status\": \"PENDING_OUTGOING\",\r\n  \"firstRequestedAt\": 16,\r\n  \"updatedAt\": 16,\r\n  \"requestCounter\": 16\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": 16\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/reject",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"reject"
									]
								},
								"description": "Reject the connection between the requesting user and request sender. If both users are in the same private pod,\nan error will be returned because both users have an implicit connection which cannot be rejected.\n"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "The status of the connection invitation to another user.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/connection/user/:userId/info",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"connection",
								"user",
								":userId",
								"info"
							],
							"variable": [
								{
									"key": "userId",
									"value": "userId6"
								}
							]
						},
						"description": "The status of the connection invitation to another user."
					},
					"response": [
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/user/:userId/info",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"user",
										":userId",
										"info"
									],
									"variable": [
										{
											"key": "userId",
											"value": "userId6"
										}
									]
								},
								"description": "The status of the connection invitation to another user."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/user/:userId/info",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"user",
										":userId",
										"info"
									],
									"variable": [
										{
											"key": "userId",
											"value": "userId6"
										}
									]
								},
								"description": "The status of the connection invitation to another user."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/user/:userId/info",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"user",
										":userId",
										"info"
									],
									"variable": [
										{
											"key": "userId",
											"value": "userId6"
										}
									]
								},
								"description": "The status of the connection invitation to another user."
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"userId\": 16,\r\n  \"status\": \"PENDING_OUTGOING\",\r\n  \"firstRequestedAt\": 16,\r\n  \"updatedAt\": 16,\r\n  \"requestCounter\": 16\r\n}"
						},
						{
							"name": "Response_404",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/user/:userId/info",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"user",
										":userId",
										"info"
									],
									"variable": [
										{
											"key": "userId",
											"value": "userId6"
										}
									]
								},
								"description": "The status of the connection invitation to another user."
							},
							"status": "Not Found: Connection cannot be found.",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/user/:userId/info",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"user",
										":userId",
										"info"
									],
									"variable": [
										{
											"key": "userId",
											"value": "userId6"
										}
									]
								},
								"description": "The status of the connection invitation to another user."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/user/:userId/info",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"user",
										":userId",
										"info"
									],
									"variable": [
										{
											"key": "userId",
											"value": "userId6"
										}
									]
								},
								"description": "The status of the connection invitation to another user."
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "Removes a connection with a user.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/connection/user/:uid/remove",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"connection",
								"user",
								":uid",
								"remove"
							],
							"variable": [
								{
									"key": "uid",
									"value": "16"
								}
							]
						},
						"description": "Removes a connection with a user."
					},
					"response": [
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/user/:uid/remove",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"user",
										":uid",
										"remove"
									],
									"variable": [
										{
											"key": "uid",
											"value": "16"
										}
									]
								},
								"description": "Removes a connection with a user."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/user/:uid/remove",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"user",
										":uid",
										"remove"
									],
									"variable": [
										{
											"key": "uid",
											"value": "16"
										}
									]
								},
								"description": "Removes a connection with a user."
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"format\": \"TEXT\",\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/user/:uid/remove",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"user",
										":uid",
										"remove"
									],
									"variable": [
										{
											"key": "uid",
											"value": "16"
										}
									]
								},
								"description": "Removes a connection with a user."
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/user/:uid/remove",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"user",
										":uid",
										"remove"
									],
									"variable": [
										{
											"key": "uid",
											"value": "16"
										}
									]
								},
								"description": "Removes a connection with a user."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/user/:uid/remove",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"user",
										":uid",
										"remove"
									],
									"variable": [
										{
											"key": "uid",
											"value": "16"
										}
									]
								},
								"description": "Removes a connection with a user."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_404",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/connection/user/:uid/remove",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"connection",
										"user",
										":uid",
										"remove"
									],
									"variable": [
										{
											"key": "uid",
											"value": "16"
										}
									]
								},
								"description": "Removes a connection with a user."
							},
							"status": "Not Found: Connection cannot be found.",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				}
			]
		},
		{
			"name": "Signals",
			"item": [
				{
					"name": "List signals for the requesting user. This includes signals that the user has created and public signals\nto which they subscribed.\n",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{agentUrl}}/agent/v1/signals/list?skip=81&limit=81",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v1",
								"signals",
								"list"
							],
							"query": [
								{
									"key": "skip",
									"value": "81"
								},
								{
									"key": "limit",
									"value": "81"
								}
							]
						},
						"description": "List signals for the requesting user. This includes signals that the user has created and public signals\nto which they subscribed.\n"
					},
					"response": [
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/list?skip=81&limit=81",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "81"
										},
										{
											"key": "limit",
											"value": "81"
										}
									]
								},
								"description": "List signals for the requesting user. This includes signals that the user has created and public signals\nto which they subscribed.\n"
							},
							"status": "List of signals for the requesting user.",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  {\r\n    \"name\": \"name44\",\r\n    \"query\": \"query44\",\r\n    \"visibleOnProfile\": false,\r\n    \"companyWide\": false,\r\n    \"id\": \"id44\",\r\n    \"timestamp\": 114\r\n  }\r\n]"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/list?skip=81&limit=81",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "81"
										},
										{
											"key": "limit",
											"value": "81"
										}
									]
								},
								"description": "List signals for the requesting user. This includes signals that the user has created and public signals\nto which they subscribed.\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/list?skip=81&limit=81",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "81"
										},
										{
											"key": "limit",
											"value": "81"
										}
									]
								},
								"description": "List signals for the requesting user. This includes signals that the user has created and public signals\nto which they subscribed.\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/list?skip=81&limit=81",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "81"
										},
										{
											"key": "limit",
											"value": "81"
										}
									]
								},
								"description": "List signals for the requesting user. This includes signals that the user has created and public signals\nto which they subscribed.\n"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/list?skip=81&limit=81",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "81"
										},
										{
											"key": "limit",
											"value": "81"
										}
									]
								},
								"description": "List signals for the requesting user. This includes signals that the user has created and public signals\nto which they subscribed.\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						}
					]
				},
				{
					"name": "Get details of the requested signal.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{agentUrl}}/agent/v1/signals/:id/get",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v1",
								"signals",
								":id",
								"get"
							],
							"variable": [
								{
									"key": "id",
									"value": "id31"
								}
							]
						},
						"description": "Get details of the requested signal."
					},
					"response": [
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/:id/get",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										":id",
										"get"
									],
									"variable": [
										{
											"key": "id",
											"value": "id31"
										}
									]
								},
								"description": "Get details of the requested signal."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/:id/get",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										":id",
										"get"
									],
									"variable": [
										{
											"key": "id",
											"value": "id31"
										}
									]
								},
								"description": "Get details of the requested signal."
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/:id/get",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										":id",
										"get"
									],
									"variable": [
										{
											"key": "id",
											"value": "id31"
										}
									]
								},
								"description": "Get details of the requested signal."
							},
							"status": "List of signals for the requesting user.",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"name\": \"name44\",\r\n  \"query\": \"query44\",\r\n  \"visibleOnProfile\": false,\r\n  \"companyWide\": false,\r\n  \"id\": \"id44\",\r\n  \"timestamp\": 114\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/:id/get",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										":id",
										"get"
									],
									"variable": [
										{
											"key": "id",
											"value": "id31"
										}
									]
								},
								"description": "Get details of the requested signal."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/:id/get",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										":id",
										"get"
									],
									"variable": [
										{
											"key": "id",
											"value": "id31"
										}
									]
								},
								"description": "Get details of the requested signal."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						}
					]
				},
				{
					"name": "Create a signal.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"name44\",\r\n  \"query\": \"query44\",\r\n  \"visibleOnProfile\": false,\r\n  \"companyWide\": false\r\n}"
						},
						"url": {
							"raw": "https://{{agentUrl}}/agent/v1/signals/create",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v1",
								"signals",
								"create"
							]
						},
						"description": "Create a signal."
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name44\",\r\n  \"query\": \"query44\",\r\n  \"visibleOnProfile\": false,\r\n  \"companyWide\": false\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/create",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										"create"
									]
								},
								"description": "Create a signal."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name44\",\r\n  \"query\": \"query44\",\r\n  \"visibleOnProfile\": false,\r\n  \"companyWide\": false\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/create",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										"create"
									]
								},
								"description": "Create a signal."
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name44\",\r\n  \"query\": \"query44\",\r\n  \"visibleOnProfile\": false,\r\n  \"companyWide\": false\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/create",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										"create"
									]
								},
								"description": "Create a signal."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name44\",\r\n  \"query\": \"query44\",\r\n  \"visibleOnProfile\": false,\r\n  \"companyWide\": false\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/create",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										"create"
									]
								},
								"description": "Create a signal."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name44\",\r\n  \"query\": \"query44\",\r\n  \"visibleOnProfile\": false,\r\n  \"companyWide\": false\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/create",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										"create"
									]
								},
								"description": "Create a signal."
							},
							"status": "Signal created.",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"name\": \"name44\",\r\n  \"query\": \"query44\",\r\n  \"visibleOnProfile\": false,\r\n  \"companyWide\": false,\r\n  \"id\": \"id44\",\r\n  \"timestamp\": 114\r\n}"
						},
						{
							"name": "Response_451",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name44\",\r\n  \"query\": \"query44\",\r\n  \"visibleOnProfile\": false,\r\n  \"companyWide\": false\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/create",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										"create"
									]
								},
								"description": "Create a signal."
							},
							"status": "Compliance Issues found in signal",
							"code": 451,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						}
					]
				},
				{
					"name": "Update a signal.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"name44\",\r\n  \"query\": \"query44\",\r\n  \"visibleOnProfile\": false,\r\n  \"companyWide\": false\r\n}"
						},
						"url": {
							"raw": "https://{{agentUrl}}/agent/v1/signals/:id/update",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v1",
								"signals",
								":id",
								"update"
							],
							"variable": [
								{
									"key": "id",
									"value": "id31"
								}
							]
						},
						"description": "Update a signal."
					},
					"response": [
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name44\",\r\n  \"query\": \"query44\",\r\n  \"visibleOnProfile\": false,\r\n  \"companyWide\": false\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/:id/update",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										":id",
										"update"
									],
									"variable": [
										{
											"key": "id",
											"value": "id31"
										}
									]
								},
								"description": "Update a signal."
							},
							"status": "Signal updated.",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"name\": \"name44\",\r\n  \"query\": \"query44\",\r\n  \"visibleOnProfile\": false,\r\n  \"companyWide\": false,\r\n  \"id\": \"id44\",\r\n  \"timestamp\": 114\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name44\",\r\n  \"query\": \"query44\",\r\n  \"visibleOnProfile\": false,\r\n  \"companyWide\": false\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/:id/update",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										":id",
										"update"
									],
									"variable": [
										{
											"key": "id",
											"value": "id31"
										}
									]
								},
								"description": "Update a signal."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name44\",\r\n  \"query\": \"query44\",\r\n  \"visibleOnProfile\": false,\r\n  \"companyWide\": false\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/:id/update",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										":id",
										"update"
									],
									"variable": [
										{
											"key": "id",
											"value": "id31"
										}
									]
								},
								"description": "Update a signal."
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name44\",\r\n  \"query\": \"query44\",\r\n  \"visibleOnProfile\": false,\r\n  \"companyWide\": false\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/:id/update",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										":id",
										"update"
									],
									"variable": [
										{
											"key": "id",
											"value": "id31"
										}
									]
								},
								"description": "Update a signal."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_451",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name44\",\r\n  \"query\": \"query44\",\r\n  \"visibleOnProfile\": false,\r\n  \"companyWide\": false\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/:id/update",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										":id",
										"update"
									],
									"variable": [
										{
											"key": "id",
											"value": "id31"
										}
									]
								},
								"description": "Update a signal."
							},
							"status": "Compliance Issues found in signal",
							"code": 451,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name44\",\r\n  \"query\": \"query44\",\r\n  \"visibleOnProfile\": false,\r\n  \"companyWide\": false\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/:id/update",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										":id",
										"update"
									],
									"variable": [
										{
											"key": "id",
											"value": "id31"
										}
									]
								},
								"description": "Update a signal."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						}
					]
				},
				{
					"name": "Delete a signal.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{agentUrl}}/agent/v1/signals/:id/delete",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v1",
								"signals",
								":id",
								"delete"
							],
							"variable": [
								{
									"key": "id",
									"value": "id31"
								}
							]
						},
						"description": "Delete a signal."
					},
					"response": [
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/:id/delete",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										":id",
										"delete"
									],
									"variable": [
										{
											"key": "id",
											"value": "id31"
										}
									]
								},
								"description": "Delete a signal."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/:id/delete",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										":id",
										"delete"
									],
									"variable": [
										{
											"key": "id",
											"value": "id31"
										}
									]
								},
								"description": "Delete a signal."
							},
							"status": "Signal deleted.",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"format\": \"TEXT\",\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/:id/delete",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										":id",
										"delete"
									],
									"variable": [
										{
											"key": "id",
											"value": "id31"
										}
									]
								},
								"description": "Delete a signal."
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/:id/delete",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										":id",
										"delete"
									],
									"variable": [
										{
											"key": "id",
											"value": "id31"
										}
									]
								},
								"description": "Delete a signal."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/:id/delete",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										":id",
										"delete"
									],
									"variable": [
										{
											"key": "id",
											"value": "id31"
										}
									]
								},
								"description": "Delete a signal."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						}
					]
				},
				{
					"name": "Subscribe to a Signal.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  81\r\n]"
						},
						"url": {
							"raw": "https://{{agentUrl}}/agent/v1/signals/:id/subscribe?pushed=false",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v1",
								"signals",
								":id",
								"subscribe"
							],
							"query": [
								{
									"key": "pushed",
									"value": "false"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "id31"
								}
							]
						},
						"description": "Subscribe to a Signal."
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  81\r\n]"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/:id/subscribe?pushed=false",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										":id",
										"subscribe"
									],
									"query": [
										{
											"key": "pushed",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "id31"
										}
									]
								},
								"description": "Subscribe to a Signal."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  81\r\n]"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/:id/subscribe?pushed=false",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										":id",
										"subscribe"
									],
									"query": [
										{
											"key": "pushed",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "id31"
										}
									]
								},
								"description": "Subscribe to a Signal."
							},
							"status": "Signal subscribed.",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"requestedSubscription\": 114,\r\n  \"successfulSubscription\": 114,\r\n  \"failedSubscription\": 114,\r\n  \"subscriptionErrors\": [\r\n    {\r\n      \"userId\": 114,\r\n      \"code\": \"code44\",\r\n      \"message\": \"message44\"\r\n    }\r\n  ]\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  81\r\n]"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/:id/subscribe?pushed=false",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										":id",
										"subscribe"
									],
									"query": [
										{
											"key": "pushed",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "id31"
										}
									]
								},
								"description": "Subscribe to a Signal."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  81\r\n]"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/:id/subscribe?pushed=false",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										":id",
										"subscribe"
									],
									"query": [
										{
											"key": "pushed",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "id31"
										}
									]
								},
								"description": "Subscribe to a Signal."
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  81\r\n]"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/:id/subscribe?pushed=false",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										":id",
										"subscribe"
									],
									"query": [
										{
											"key": "pushed",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "id31"
										}
									]
								},
								"description": "Subscribe to a Signal."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						}
					]
				},
				{
					"name": "Unsubscribe to a Signal.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  81\r\n]"
						},
						"url": {
							"raw": "https://{{agentUrl}}/agent/v1/signals/:id/unsubscribe",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v1",
								"signals",
								":id",
								"unsubscribe"
							],
							"variable": [
								{
									"key": "id",
									"value": "id31"
								}
							]
						},
						"description": "Unsubscribe to a Signal."
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  81\r\n]"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/:id/unsubscribe",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										":id",
										"unsubscribe"
									],
									"variable": [
										{
											"key": "id",
											"value": "id31"
										}
									]
								},
								"description": "Unsubscribe to a Signal."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  81\r\n]"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/:id/unsubscribe",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										":id",
										"unsubscribe"
									],
									"variable": [
										{
											"key": "id",
											"value": "id31"
										}
									]
								},
								"description": "Unsubscribe to a Signal."
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  81\r\n]"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/:id/unsubscribe",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										":id",
										"unsubscribe"
									],
									"variable": [
										{
											"key": "id",
											"value": "id31"
										}
									]
								},
								"description": "Unsubscribe to a Signal."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  81\r\n]"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/:id/unsubscribe",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										":id",
										"unsubscribe"
									],
									"variable": [
										{
											"key": "id",
											"value": "id31"
										}
									]
								},
								"description": "Unsubscribe to a Signal."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  81\r\n]"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/:id/unsubscribe",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										":id",
										"unsubscribe"
									],
									"variable": [
										{
											"key": "id",
											"value": "id31"
										}
									]
								},
								"description": "Unsubscribe to a Signal."
							},
							"status": "Signal unsubscribed.",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"requestedSubscription\": 114,\r\n  \"successfulSubscription\": 114,\r\n  \"failedSubscription\": 114,\r\n  \"subscriptionErrors\": [\r\n    {\r\n      \"userId\": 114,\r\n      \"code\": \"code44\",\r\n      \"message\": \"message44\"\r\n    }\r\n  ]\r\n}"
						}
					]
				},
				{
					"name": "Get the subscribers of a signal",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{agentUrl}}/agent/v1/signals/:id/subscribers?skip=0&limit=100",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v1",
								"signals",
								":id",
								"subscribers"
							],
							"query": [
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "100"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "id31"
								}
							]
						},
						"description": "Get the subscribers of a signal"
					},
					"response": [
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/:id/subscribers?skip=0&limit=100",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										":id",
										"subscribers"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "id31"
										}
									]
								},
								"description": "Get the subscribers of a signal"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/:id/subscribers?skip=0&limit=100",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										":id",
										"subscribers"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "id31"
										}
									]
								},
								"description": "Get the subscribers of a signal"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/:id/subscribers?skip=0&limit=100",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										":id",
										"subscribers"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "id31"
										}
									]
								},
								"description": "Get the subscribers of a signal"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/:id/subscribers?skip=0&limit=100",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										":id",
										"subscribers"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "id31"
										}
									]
								},
								"description": "Get the subscribers of a signal"
							},
							"status": "Signal Subscribers.",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"offset\": 114,\r\n  \"hasMore\": false,\r\n  \"total\": 114,\r\n  \"data\": [\r\n    {\r\n      \"pushed\": false,\r\n      \"owner\": false,\r\n      \"subscriberName\": \"subscriberName44\",\r\n      \"userId\": 114,\r\n      \"timestamp\": 114\r\n    }\r\n  ]\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/signals/:id/subscribers?skip=0&limit=100",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"signals",
										":id",
										"subscribers"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "id31"
										}
									]
								},
								"description": "Get the subscribers of a signal"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						}
					]
				},
				{
					"name": "Get information about the Agent",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{agentUrl}}/agent/v1/info",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v1",
								"info"
							]
						},
						"description": "Get information about the Agent"
					},
					"response": [
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/info",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"info"
									]
								},
								"description": "Get information about the Agent"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/info",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"info"
									]
								},
								"description": "Get information about the Agent"
							},
							"status": "Agent info.",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"ipAddress\": \"ipAddress44\",\r\n  \"hostname\": \"hostname44\",\r\n  \"serverFqdn\": \"serverFqdn44\",\r\n  \"version\": \"version44\",\r\n  \"url\": \"url44\",\r\n  \"onPrem\": false,\r\n  \"commitId\": \"commitId44\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/info",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"info"
									]
								},
								"description": "Get information about the Agent"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/info",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"info"
									]
								},
								"description": "Get information about the Agent"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/info",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"info"
									]
								},
								"description": "Get information about the Agent"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 15,\r\n  \"message\": \"message5\",\r\n  \"details\": {\r\n    \"details0\": \"details47\",\r\n    \"details1\": \"details24\"\r\n  }\r\n}"
						}
					]
				}
			]
		},
		{
			"name": "Disclaimer",
			"item": [
				{
					"name": "[Admin] Get a disclaimer by disclaimer id",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/disclaimer/:did",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"disclaimer",
								":did"
							],
							"variable": [
								{
									"key": "did",
									"value": "did6"
								}
							]
						},
						"description": "Get a disclaimer by disclaimer id"
					},
					"response": [
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/disclaimer/:did",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"disclaimer",
										":did"
									],
									"variable": [
										{
											"key": "did",
											"value": "did6"
										}
									]
								},
								"description": "Get a disclaimer by disclaimer id"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/disclaimer/:did",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"disclaimer",
										":did"
									],
									"variable": [
										{
											"key": "did",
											"value": "did6"
										}
									]
								},
								"description": "Get a disclaimer by disclaimer id"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"id\": \"id36\",\r\n  \"name\": \"name36\",\r\n  \"content\": \"content36\",\r\n  \"frequencyInHours\": 94,\r\n  \"isDefault\": false,\r\n  \"isActive\": false,\r\n  \"createdDate\": 94,\r\n  \"modifiedDate\": 94,\r\n  \"format\": \"TEXT\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/disclaimer/:did",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"disclaimer",
										":did"
									],
									"variable": [
										{
											"key": "did",
											"value": "did6"
										}
									]
								},
								"description": "Get a disclaimer by disclaimer id"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/disclaimer/:did",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"disclaimer",
										":did"
									],
									"variable": [
										{
											"key": "did",
											"value": "did6"
										}
									]
								},
								"description": "Get a disclaimer by disclaimer id"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/disclaimer/:did",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"disclaimer",
										":did"
									],
									"variable": [
										{
											"key": "did",
											"value": "did6"
										}
									]
								},
								"description": "Get a disclaimer by disclaimer id"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] List all disclaimers for the company (pod)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/disclaimer/list",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"disclaimer",
								"list"
							]
						},
						"description": "List all disclaimers for the company (pod)"
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/disclaimer/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"disclaimer",
										"list"
									]
								},
								"description": "List all disclaimers for the company (pod)"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/disclaimer/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"disclaimer",
										"list"
									]
								},
								"description": "List all disclaimers for the company (pod)"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  {\r\n    \"id\": \"id36\",\r\n    \"name\": \"name36\",\r\n    \"content\": \"content36\",\r\n    \"frequencyInHours\": 94,\r\n    \"isDefault\": false,\r\n    \"isActive\": false,\r\n    \"createdDate\": 94,\r\n    \"modifiedDate\": 94,\r\n    \"format\": \"TEXT\"\r\n  }\r\n]"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/disclaimer/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"disclaimer",
										"list"
									]
								},
								"description": "List all disclaimers for the company (pod)"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/disclaimer/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"disclaimer",
										"list"
									]
								},
								"description": "List all disclaimers for the company (pod)"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/disclaimer/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"disclaimer",
										"list"
									]
								},
								"description": "List all disclaimers for the company (pod)"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] List all users assigned to this disclaimer",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/disclaimer/:did/users",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"disclaimer",
								":did",
								"users"
							],
							"variable": [
								{
									"key": "did",
									"value": "did6"
								}
							]
						},
						"description": "List all users assigned to this disclaimer"
					},
					"response": [
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/disclaimer/:did/users",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"disclaimer",
										":did",
										"users"
									],
									"variable": [
										{
											"key": "did",
											"value": "did6"
										}
									]
								},
								"description": "List all users assigned to this disclaimer"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  16\r\n]"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/disclaimer/:did/users",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"disclaimer",
										":did",
										"users"
									],
									"variable": [
										{
											"key": "did",
											"value": "did6"
										}
									]
								},
								"description": "List all users assigned to this disclaimer"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/disclaimer/:did/users",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"disclaimer",
										":did",
										"users"
									],
									"variable": [
										{
											"key": "did",
											"value": "did6"
										}
									]
								},
								"description": "List all users assigned to this disclaimer"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/disclaimer/:did/users",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"disclaimer",
										":did",
										"users"
									],
									"variable": [
										{
											"key": "did",
											"value": "did6"
										}
									]
								},
								"description": "List all users assigned to this disclaimer"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/disclaimer/:did/users",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"disclaimer",
										":did",
										"users"
									],
									"variable": [
										{
											"key": "did",
											"value": "did6"
										}
									]
								},
								"description": "List all users assigned to this disclaimer"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				}
			]
		},
		{
			"name": "Info Barriers",
			"item": [
				{
					"name": "[Admin] Get a list of all Information Barrier Groups",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "Session authentication token.",
								"key": "sessionToken",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/group/list",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"group",
								"list"
							]
						},
						"description": "Get a list of all Information Barrier Groups"
					},
					"response": [
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Session authentication token.",
										"key": "sessionToken",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/group/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"group",
										"list"
									]
								},
								"description": "Get a list of all Information Barrier Groups"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Session authentication token.",
										"key": "sessionToken",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/group/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"group",
										"list"
									]
								},
								"description": "Get a list of all Information Barrier Groups"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Session authentication token.",
										"key": "sessionToken",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/group/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"group",
										"list"
									]
								},
								"description": "Get a list of all Information Barrier Groups"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Session authentication token.",
										"key": "sessionToken",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/group/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"group",
										"list"
									]
								},
								"description": "Get a list of all Information Barrier Groups"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Session authentication token.",
										"key": "sessionToken",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/group/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"group",
										"list"
									]
								},
								"description": "Get a list of all Information Barrier Groups"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  {\r\n    \"id\": \"id36\",\r\n    \"name\": \"name36\",\r\n    \"active\": false,\r\n    \"memberCount\": 94,\r\n    \"policies\": [\r\n      \"policies36\"\r\n    ],\r\n    \"createdDate\": 94,\r\n    \"modifiedDate\": 94\r\n  }\r\n]"
						}
					]
				},
				{
					"name": "[Admin] Get the list of userids in this Information Barrier Group",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/group/:gid/membership/list",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"group",
								":gid",
								"membership",
								"list"
							],
							"variable": [
								{
									"key": "gid",
									"value": "gid6"
								}
							]
						},
						"description": "Get the list of userids in this Information Barrier Group"
					},
					"response": [
						{
							"name": "Response_404",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/group/:gid/membership/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"group",
										":gid",
										"membership",
										"list"
									],
									"variable": [
										{
											"key": "gid",
											"value": "gid6"
										}
									]
								},
								"description": "Get the list of userids in this Information Barrier Group"
							},
							"status": "Not Found: Group cannot be found.",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/group/:gid/membership/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"group",
										":gid",
										"membership",
										"list"
									],
									"variable": [
										{
											"key": "gid",
											"value": "gid6"
										}
									]
								},
								"description": "Get the list of userids in this Information Barrier Group"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/group/:gid/membership/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"group",
										":gid",
										"membership",
										"list"
									],
									"variable": [
										{
											"key": "gid",
											"value": "gid6"
										}
									]
								},
								"description": "Get the list of userids in this Information Barrier Group"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/group/:gid/membership/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"group",
										":gid",
										"membership",
										"list"
									],
									"variable": [
										{
											"key": "gid",
											"value": "gid6"
										}
									]
								},
								"description": "Get the list of userids in this Information Barrier Group"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  16\r\n]"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/group/:gid/membership/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"group",
										":gid",
										"membership",
										"list"
									],
									"variable": [
										{
											"key": "gid",
											"value": "gid6"
										}
									]
								},
								"description": "Get the list of userids in this Information Barrier Group"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/group/:gid/membership/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"group",
										":gid",
										"membership",
										"list"
									],
									"variable": [
										{
											"key": "gid",
											"value": "gid6"
										}
									]
								},
								"description": "Get the list of userids in this Information Barrier Group"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Add members to an Information Barrier group.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  16\r\n]"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/group/:gid/membership/add",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"group",
								":gid",
								"membership",
								"add"
							],
							"variable": [
								{
									"key": "gid",
									"value": "gid6"
								}
							]
						},
						"description": "Add members to an Information Barrier group."
					},
					"response": [
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  16\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/group/:gid/membership/add",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"group",
										":gid",
										"membership",
										"add"
									],
									"variable": [
										{
											"key": "gid",
											"value": "gid6"
										}
									]
								},
								"description": "Add members to an Information Barrier group."
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  16\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/group/:gid/membership/add",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"group",
										":gid",
										"membership",
										"add"
									],
									"variable": [
										{
											"key": "gid",
											"value": "gid6"
										}
									]
								},
								"description": "Add members to an Information Barrier group."
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"overallResult\": \"SUCCESS\",\r\n  \"results\": [\r\n    \"results6\"\r\n  ]\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  16\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/group/:gid/membership/add",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"group",
										":gid",
										"membership",
										"add"
									],
									"variable": [
										{
											"key": "gid",
											"value": "gid6"
										}
									]
								},
								"description": "Add members to an Information Barrier group."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  16\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/group/:gid/membership/add",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"group",
										":gid",
										"membership",
										"add"
									],
									"variable": [
										{
											"key": "gid",
											"value": "gid6"
										}
									]
								},
								"description": "Add members to an Information Barrier group."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  16\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/group/:gid/membership/add",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"group",
										":gid",
										"membership",
										"add"
									],
									"variable": [
										{
											"key": "gid",
											"value": "gid6"
										}
									]
								},
								"description": "Add members to an Information Barrier group."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Remove members from an Information Barrier group",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  16\r\n]"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/group/:gid/membership/remove",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"group",
								":gid",
								"membership",
								"remove"
							],
							"variable": [
								{
									"key": "gid",
									"value": "gid6"
								}
							]
						},
						"description": "Remove members from an Information Barrier group"
					},
					"response": [
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  16\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/group/:gid/membership/remove",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"group",
										":gid",
										"membership",
										"remove"
									],
									"variable": [
										{
											"key": "gid",
											"value": "gid6"
										}
									]
								},
								"description": "Remove members from an Information Barrier group"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  16\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/group/:gid/membership/remove",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"group",
										":gid",
										"membership",
										"remove"
									],
									"variable": [
										{
											"key": "gid",
											"value": "gid6"
										}
									]
								},
								"description": "Remove members from an Information Barrier group"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  16\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/group/:gid/membership/remove",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"group",
										":gid",
										"membership",
										"remove"
									],
									"variable": [
										{
											"key": "gid",
											"value": "gid6"
										}
									]
								},
								"description": "Remove members from an Information Barrier group"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"overallResult\": \"SUCCESS\",\r\n  \"results\": [\r\n    \"results6\"\r\n  ]\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  16\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/group/:gid/membership/remove",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"group",
										":gid",
										"membership",
										"remove"
									],
									"variable": [
										{
											"key": "gid",
											"value": "gid6"
										}
									]
								},
								"description": "Remove members from an Information Barrier group"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  16\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/group/:gid/membership/remove",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"group",
										":gid",
										"membership",
										"remove"
									],
									"variable": [
										{
											"key": "gid",
											"value": "gid6"
										}
									]
								},
								"description": "Remove members from an Information Barrier group"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Get all Information Policies",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "Session authentication token.",
								"key": "sessionToken",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/policy/list",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"policy",
								"list"
							]
						},
						"description": "Get all Information Policies"
					},
					"response": [
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Session authentication token.",
										"key": "sessionToken",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/policy/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"policy",
										"list"
									]
								},
								"description": "Get all Information Policies"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  {\r\n    \"id\": \"id36\",\r\n    \"policyType\": \"BLOCK\",\r\n    \"active\": false,\r\n    \"memberCount\": 94,\r\n    \"groups\": [\r\n      \"groups36\"\r\n    ],\r\n    \"createdDate\": 94,\r\n    \"modifiedDate\": 94\r\n  }\r\n]"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Session authentication token.",
										"key": "sessionToken",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/policy/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"policy",
										"list"
									]
								},
								"description": "Get all Information Policies"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Session authentication token.",
										"key": "sessionToken",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/policy/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"policy",
										"list"
									]
								},
								"description": "Get all Information Policies"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Session authentication token.",
										"key": "sessionToken",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/policy/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"policy",
										"list"
									]
								},
								"description": "Get all Information Policies"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Session authentication token.",
										"key": "sessionToken",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/policy/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"policy",
										"list"
									]
								},
								"description": "Get all Information Policies"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				}
			]
		},
		{
			"name": "DLP / Dictionary",
			"item": [
				{
					"name": "Get all policies",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{agentUrl}}/agent/v1/dlp/policies?page=81&limit=81",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v1",
								"dlp",
								"policies"
							],
							"query": [
								{
									"key": "page",
									"value": "81"
								},
								{
									"key": "limit",
									"value": "81"
								}
							]
						},
						"description": "Get all policies"
					},
					"response": [
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies?page=81&limit=81",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies"
									],
									"query": [
										{
											"key": "page",
											"value": "81"
										},
										{
											"key": "limit",
											"value": "81"
										}
									]
								},
								"description": "Get all policies"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies?page=81&limit=81",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies"
									],
									"query": [
										{
											"key": "page",
											"value": "81"
										},
										{
											"key": "limit",
											"value": "81"
										}
									]
								},
								"description": "Get all policies"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies?page=81&limit=81",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies"
									],
									"query": [
										{
											"key": "page",
											"value": "81"
										},
										{
											"key": "limit",
											"value": "81"
										}
									]
								},
								"description": "Get all policies"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"policies\": [\r\n    {\r\n      \"active\": false,\r\n      \"contentTypes\": [\r\n        \"contentTypes44\"\r\n      ],\r\n      \"creationDate\": 114,\r\n      \"creatorId\": \"creatorId44\",\r\n      \"dictionaryRefs\": [\r\n        {\r\n          \"dictId\": \"dictId44\",\r\n          \"name\": \"name44\",\r\n          \"version\": \"version44\"\r\n        }\r\n      ],\r\n      \"lastDisabledDate\": 114,\r\n      \"lastUpdatedDate\": 114,\r\n      \"name\": \"name44\",\r\n      \"policyId\": \"policyId44\",\r\n      \"scopes\": [\r\n        \"scopes44\"\r\n      ],\r\n      \"type\": \"type44\",\r\n      \"version\": \"version44\"\r\n    }\r\n  ],\r\n  \"page\": 114,\r\n  \"pageCount\": 114\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies?page=81&limit=81",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies"
									],
									"query": [
										{
											"key": "page",
											"value": "81"
										},
										{
											"key": "limit",
											"value": "81"
										}
									]
								},
								"description": "Get all policies"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies?page=81&limit=81",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies"
									],
									"query": [
										{
											"key": "page",
											"value": "81"
										},
										{
											"key": "limit",
											"value": "81"
										}
									]
								},
								"description": "Get all policies"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						}
					]
				},
				{
					"name": "Creates a policy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"contentTypes\": [\r\n    \"contentTypes44\"\r\n  ],\r\n  \"dictionaryIds\": [\r\n    \"dictionaryIds44\"\r\n  ],\r\n  \"name\": \"name44\",\r\n  \"scopes\": [\r\n    \"scopes44\"\r\n  ],\r\n  \"type\": \"type44\"\r\n}"
						},
						"url": {
							"raw": "https://{{agentUrl}}/agent/v1/dlp/policies",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v1",
								"dlp",
								"policies"
							]
						},
						"description": "Creates a new policy with dictionary references.\n\nAt the time of policy creation, the caller should only provide - contentTypes, name, scopes and type. The rest of the information is populated automatically.\n\nNote - You need to enable the policy after creation to start enforcing the policy.\n"
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"contentTypes\": [\r\n    \"contentTypes44\"\r\n  ],\r\n  \"dictionaryIds\": [\r\n    \"dictionaryIds44\"\r\n  ],\r\n  \"name\": \"name44\",\r\n  \"scopes\": [\r\n    \"scopes44\"\r\n  ],\r\n  \"type\": \"type44\"\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies"
									]
								},
								"description": "Creates a new policy with dictionary references.\n\nAt the time of policy creation, the caller should only provide - contentTypes, name, scopes and type. The rest of the information is populated automatically.\n\nNote - You need to enable the policy after creation to start enforcing the policy.\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"contentTypes\": [\r\n    \"contentTypes44\"\r\n  ],\r\n  \"dictionaryIds\": [\r\n    \"dictionaryIds44\"\r\n  ],\r\n  \"name\": \"name44\",\r\n  \"scopes\": [\r\n    \"scopes44\"\r\n  ],\r\n  \"type\": \"type44\"\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies"
									]
								},
								"description": "Creates a new policy with dictionary references.\n\nAt the time of policy creation, the caller should only provide - contentTypes, name, scopes and type. The rest of the information is populated automatically.\n\nNote - You need to enable the policy after creation to start enforcing the policy.\n"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"contentTypes\": [\r\n    \"contentTypes44\"\r\n  ],\r\n  \"dictionaryIds\": [\r\n    \"dictionaryIds44\"\r\n  ],\r\n  \"name\": \"name44\",\r\n  \"scopes\": [\r\n    \"scopes44\"\r\n  ],\r\n  \"type\": \"type44\"\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies"
									]
								},
								"description": "Creates a new policy with dictionary references.\n\nAt the time of policy creation, the caller should only provide - contentTypes, name, scopes and type. The rest of the information is populated automatically.\n\nNote - You need to enable the policy after creation to start enforcing the policy.\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"contentTypes\": [\r\n    \"contentTypes44\"\r\n  ],\r\n  \"dictionaryIds\": [\r\n    \"dictionaryIds44\"\r\n  ],\r\n  \"name\": \"name44\",\r\n  \"scopes\": [\r\n    \"scopes44\"\r\n  ],\r\n  \"type\": \"type44\"\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies"
									]
								},
								"description": "Creates a new policy with dictionary references.\n\nAt the time of policy creation, the caller should only provide - contentTypes, name, scopes and type. The rest of the information is populated automatically.\n\nNote - You need to enable the policy after creation to start enforcing the policy.\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"contentTypes\": [\r\n    \"contentTypes44\"\r\n  ],\r\n  \"dictionaryIds\": [\r\n    \"dictionaryIds44\"\r\n  ],\r\n  \"name\": \"name44\",\r\n  \"scopes\": [\r\n    \"scopes44\"\r\n  ],\r\n  \"type\": \"type44\"\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies"
									]
								},
								"description": "Creates a new policy with dictionary references.\n\nAt the time of policy creation, the caller should only provide - contentTypes, name, scopes and type. The rest of the information is populated automatically.\n\nNote - You need to enable the policy after creation to start enforcing the policy.\n"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"data\": {\r\n    \"active\": false,\r\n    \"contentTypes\": [\r\n      \"contentTypes44\"\r\n    ],\r\n    \"creationDate\": 114,\r\n    \"creatorId\": \"creatorId44\",\r\n    \"dictionaryRefs\": [\r\n      {\r\n        \"dictId\": \"dictId44\",\r\n        \"name\": \"name44\",\r\n        \"version\": \"version44\"\r\n      }\r\n    ],\r\n    \"lastDisabledDate\": 114,\r\n    \"lastUpdatedDate\": 114,\r\n    \"name\": \"name44\",\r\n    \"policyId\": \"policyId44\",\r\n    \"scopes\": [\r\n      \"scopes44\"\r\n    ],\r\n    \"type\": \"type44\",\r\n    \"version\": \"version44\"\r\n  }\r\n}"
						}
					]
				},
				{
					"name": "Get a policy",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{agentUrl}}/agent/v1/dlp/policies/:policyId?policyVersion=policyVersion31",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v1",
								"dlp",
								"policies",
								":policyId"
							],
							"query": [
								{
									"key": "policyVersion",
									"value": "policyVersion31"
								}
							],
							"variable": [
								{
									"key": "policyId",
									"value": "policyId31"
								}
							]
						},
						"description": "Get a policy"
					},
					"response": [
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies/:policyId?policyVersion=policyVersion31",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies",
										":policyId"
									],
									"query": [
										{
											"key": "policyVersion",
											"value": "policyVersion31"
										}
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Get a policy"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"data\": {\r\n    \"active\": false,\r\n    \"contentTypes\": [\r\n      \"contentTypes44\"\r\n    ],\r\n    \"creationDate\": 114,\r\n    \"creatorId\": \"creatorId44\",\r\n    \"dictionaryRefs\": [\r\n      {\r\n        \"dictId\": \"dictId44\",\r\n        \"name\": \"name44\",\r\n        \"version\": \"version44\"\r\n      }\r\n    ],\r\n    \"lastDisabledDate\": 114,\r\n    \"lastUpdatedDate\": 114,\r\n    \"name\": \"name44\",\r\n    \"policyId\": \"policyId44\",\r\n    \"scopes\": [\r\n      \"scopes44\"\r\n    ],\r\n    \"type\": \"type44\",\r\n    \"version\": \"version44\"\r\n  }\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies/:policyId?policyVersion=policyVersion31",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies",
										":policyId"
									],
									"query": [
										{
											"key": "policyVersion",
											"value": "policyVersion31"
										}
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Get a policy"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies/:policyId?policyVersion=policyVersion31",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies",
										":policyId"
									],
									"query": [
										{
											"key": "policyVersion",
											"value": "policyVersion31"
										}
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Get a policy"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies/:policyId?policyVersion=policyVersion31",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies",
										":policyId"
									],
									"query": [
										{
											"key": "policyVersion",
											"value": "policyVersion31"
										}
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Get a policy"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies/:policyId?policyVersion=policyVersion31",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies",
										":policyId"
									],
									"query": [
										{
											"key": "policyVersion",
											"value": "policyVersion31"
										}
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Get a policy"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						}
					]
				},
				{
					"name": "Updates a policy. Cannot be used for creation.",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"contentTypes\": [\r\n    \"contentTypes44\"\r\n  ],\r\n  \"dictionaryIds\": [\r\n    \"dictionaryIds44\"\r\n  ],\r\n  \"name\": \"name44\",\r\n  \"scopes\": [\r\n    \"scopes44\"\r\n  ],\r\n  \"type\": \"type44\"\r\n}"
						},
						"url": {
							"raw": "https://{{agentUrl}}/agent/v1/dlp/policies/:policyId",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v1",
								"dlp",
								"policies",
								":policyId"
							],
							"variable": [
								{
									"key": "policyId",
									"value": "policyId31"
								}
							]
						},
						"description": "Update the policy (name, type, contentTypes, scopes) and also the dictionaries for a policy.\nWarning: If you send empty list of dictionaries during the update operation, then all the\ndictionaries for this policy are deleted and policy is automatically disabled.\nNote: The policy should already exist.\n"
					},
					"response": [
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"contentTypes\": [\r\n    \"contentTypes44\"\r\n  ],\r\n  \"dictionaryIds\": [\r\n    \"dictionaryIds44\"\r\n  ],\r\n  \"name\": \"name44\",\r\n  \"scopes\": [\r\n    \"scopes44\"\r\n  ],\r\n  \"type\": \"type44\"\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies/:policyId",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies",
										":policyId"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Update the policy (name, type, contentTypes, scopes) and also the dictionaries for a policy.\nWarning: If you send empty list of dictionaries during the update operation, then all the\ndictionaries for this policy are deleted and policy is automatically disabled.\nNote: The policy should already exist.\n"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"contentTypes\": [\r\n    \"contentTypes44\"\r\n  ],\r\n  \"dictionaryIds\": [\r\n    \"dictionaryIds44\"\r\n  ],\r\n  \"name\": \"name44\",\r\n  \"scopes\": [\r\n    \"scopes44\"\r\n  ],\r\n  \"type\": \"type44\"\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies/:policyId",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies",
										":policyId"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Update the policy (name, type, contentTypes, scopes) and also the dictionaries for a policy.\nWarning: If you send empty list of dictionaries during the update operation, then all the\ndictionaries for this policy are deleted and policy is automatically disabled.\nNote: The policy should already exist.\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"contentTypes\": [\r\n    \"contentTypes44\"\r\n  ],\r\n  \"dictionaryIds\": [\r\n    \"dictionaryIds44\"\r\n  ],\r\n  \"name\": \"name44\",\r\n  \"scopes\": [\r\n    \"scopes44\"\r\n  ],\r\n  \"type\": \"type44\"\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies/:policyId",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies",
										":policyId"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Update the policy (name, type, contentTypes, scopes) and also the dictionaries for a policy.\nWarning: If you send empty list of dictionaries during the update operation, then all the\ndictionaries for this policy are deleted and policy is automatically disabled.\nNote: The policy should already exist.\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"contentTypes\": [\r\n    \"contentTypes44\"\r\n  ],\r\n  \"dictionaryIds\": [\r\n    \"dictionaryIds44\"\r\n  ],\r\n  \"name\": \"name44\",\r\n  \"scopes\": [\r\n    \"scopes44\"\r\n  ],\r\n  \"type\": \"type44\"\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies/:policyId",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies",
										":policyId"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Update the policy (name, type, contentTypes, scopes) and also the dictionaries for a policy.\nWarning: If you send empty list of dictionaries during the update operation, then all the\ndictionaries for this policy are deleted and policy is automatically disabled.\nNote: The policy should already exist.\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"contentTypes\": [\r\n    \"contentTypes44\"\r\n  ],\r\n  \"dictionaryIds\": [\r\n    \"dictionaryIds44\"\r\n  ],\r\n  \"name\": \"name44\",\r\n  \"scopes\": [\r\n    \"scopes44\"\r\n  ],\r\n  \"type\": \"type44\"\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies/:policyId",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies",
										":policyId"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Update the policy (name, type, contentTypes, scopes) and also the dictionaries for a policy.\nWarning: If you send empty list of dictionaries during the update operation, then all the\ndictionaries for this policy are deleted and policy is automatically disabled.\nNote: The policy should already exist.\n"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"data\": {\r\n    \"active\": false,\r\n    \"contentTypes\": [\r\n      \"contentTypes44\"\r\n    ],\r\n    \"creationDate\": 114,\r\n    \"creatorId\": \"creatorId44\",\r\n    \"dictionaryRefs\": [\r\n      {\r\n        \"dictId\": \"dictId44\",\r\n        \"name\": \"name44\",\r\n        \"version\": \"version44\"\r\n      }\r\n    ],\r\n    \"lastDisabledDate\": 114,\r\n    \"lastUpdatedDate\": 114,\r\n    \"name\": \"name44\",\r\n    \"policyId\": \"policyId44\",\r\n    \"scopes\": [\r\n      \"scopes44\"\r\n    ],\r\n    \"type\": \"type44\",\r\n    \"version\": \"version44\"\r\n  }\r\n}"
						}
					]
				},
				{
					"name": "Delete a policy",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{agentUrl}}/agent/v1/dlp/policies/:policyId",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v1",
								"dlp",
								"policies",
								":policyId"
							],
							"variable": [
								{
									"key": "policyId",
									"value": "policyId31"
								}
							]
						},
						"description": "Delete a policy.\nNote: Only disabled policy can be deleted\n"
					},
					"response": [
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies/:policyId",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies",
										":policyId"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Delete a policy.\nNote: Only disabled policy can be deleted\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies/:policyId",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies",
										":policyId"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Delete a policy.\nNote: Only disabled policy can be deleted\n"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies/:policyId",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies",
										":policyId"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Delete a policy.\nNote: Only disabled policy can be deleted\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies/:policyId",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies",
										":policyId"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Delete a policy.\nNote: Only disabled policy can be deleted\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies/:policyId",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies",
										":policyId"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Delete a policy.\nNote: Only disabled policy can be deleted\n"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"data\": {\r\n    \"active\": false,\r\n    \"contentTypes\": [\r\n      \"contentTypes44\"\r\n    ],\r\n    \"creationDate\": 114,\r\n    \"creatorId\": \"creatorId44\",\r\n    \"dictionaryRefs\": [\r\n      {\r\n        \"dictId\": \"dictId44\",\r\n        \"name\": \"name44\",\r\n        \"version\": \"version44\"\r\n      }\r\n    ],\r\n    \"lastDisabledDate\": 114,\r\n    \"lastUpdatedDate\": 114,\r\n    \"name\": \"name44\",\r\n    \"policyId\": \"policyId44\",\r\n    \"scopes\": [\r\n      \"scopes44\"\r\n    ],\r\n    \"type\": \"type44\",\r\n    \"version\": \"version44\"\r\n  }\r\n}"
						}
					]
				},
				{
					"name": "Enables a policy.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{agentUrl}}/agent/v1/dlp/policies/:policyId/enable",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v1",
								"dlp",
								"policies",
								":policyId",
								"enable"
							],
							"variable": [
								{
									"key": "policyId",
									"value": "policyId31"
								}
							]
						},
						"description": "Enables a policy."
					},
					"response": [
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies/:policyId/enable",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies",
										":policyId",
										"enable"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Enables a policy."
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies/:policyId/enable",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies",
										":policyId",
										"enable"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Enables a policy."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies/:policyId/enable",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies",
										":policyId",
										"enable"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Enables a policy."
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"data\": {\r\n    \"active\": false,\r\n    \"contentTypes\": [\r\n      \"contentTypes44\"\r\n    ],\r\n    \"creationDate\": 114,\r\n    \"creatorId\": \"creatorId44\",\r\n    \"dictionaryRefs\": [\r\n      {\r\n        \"dictId\": \"dictId44\",\r\n        \"name\": \"name44\",\r\n        \"version\": \"version44\"\r\n      }\r\n    ],\r\n    \"lastDisabledDate\": 114,\r\n    \"lastUpdatedDate\": 114,\r\n    \"name\": \"name44\",\r\n    \"policyId\": \"policyId44\",\r\n    \"scopes\": [\r\n      \"scopes44\"\r\n    ],\r\n    \"type\": \"type44\",\r\n    \"version\": \"version44\"\r\n  }\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies/:policyId/enable",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies",
										":policyId",
										"enable"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Enables a policy."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies/:policyId/enable",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies",
										":policyId",
										"enable"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Enables a policy."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						}
					]
				},
				{
					"name": "Disables a policy.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{agentUrl}}/agent/v1/dlp/policies/:policyId/disable",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v1",
								"dlp",
								"policies",
								":policyId",
								"disable"
							],
							"variable": [
								{
									"key": "policyId",
									"value": "policyId31"
								}
							]
						},
						"description": "Disables a policy."
					},
					"response": [
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies/:policyId/disable",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies",
										":policyId",
										"disable"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Disables a policy."
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies/:policyId/disable",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies",
										":policyId",
										"disable"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Disables a policy."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies/:policyId/disable",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies",
										":policyId",
										"disable"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Disables a policy."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies/:policyId/disable",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies",
										":policyId",
										"disable"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Disables a policy."
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"data\": {\r\n    \"active\": false,\r\n    \"contentTypes\": [\r\n      \"contentTypes44\"\r\n    ],\r\n    \"creationDate\": 114,\r\n    \"creatorId\": \"creatorId44\",\r\n    \"dictionaryRefs\": [\r\n      {\r\n        \"dictId\": \"dictId44\",\r\n        \"name\": \"name44\",\r\n        \"version\": \"version44\"\r\n      }\r\n    ],\r\n    \"lastDisabledDate\": 114,\r\n    \"lastUpdatedDate\": 114,\r\n    \"name\": \"name44\",\r\n    \"policyId\": \"policyId44\",\r\n    \"scopes\": [\r\n      \"scopes44\"\r\n    ],\r\n    \"type\": \"type44\",\r\n    \"version\": \"version44\"\r\n  }\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/policies/:policyId/disable",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"policies",
										":policyId",
										"disable"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Disables a policy."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						}
					]
				},
				{
					"name": "Get all dictionary metadatas",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries?page=81&limit=81",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v1",
								"dlp",
								"dictionaries"
							],
							"query": [
								{
									"key": "page",
									"value": "81"
								},
								{
									"key": "limit",
									"value": "81"
								}
							]
						},
						"description": "Get all dictionary metadatas with the latest version. Each dictionary object will only contain meta data of the content.\n"
					},
					"response": [
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries?page=81&limit=81",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries"
									],
									"query": [
										{
											"key": "page",
											"value": "81"
										},
										{
											"key": "limit",
											"value": "81"
										}
									]
								},
								"description": "Get all dictionary metadatas with the latest version. Each dictionary object will only contain meta data of the content.\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries?page=81&limit=81",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries"
									],
									"query": [
										{
											"key": "page",
											"value": "81"
										},
										{
											"key": "limit",
											"value": "81"
										}
									]
								},
								"description": "Get all dictionary metadatas with the latest version. Each dictionary object will only contain meta data of the content.\n"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries?page=81&limit=81",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries"
									],
									"query": [
										{
											"key": "page",
											"value": "81"
										},
										{
											"key": "limit",
											"value": "81"
										}
									]
								},
								"description": "Get all dictionary metadatas with the latest version. Each dictionary object will only contain meta data of the content.\n"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"items\": [\r\n    {\r\n      \"creationDate\": 114,\r\n      \"creatorId\": \"creatorId44\",\r\n      \"dictRef\": {\r\n        \"dictId\": \"dictId44\",\r\n        \"name\": \"name44\",\r\n        \"version\": \"version44\"\r\n      },\r\n      \"lastUpdatedDate\": 114,\r\n      \"type\": \"type44\"\r\n    }\r\n  ],\r\n  \"page\": 114,\r\n  \"pageCount\": 114\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries?page=81&limit=81",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries"
									],
									"query": [
										{
											"key": "page",
											"value": "81"
										},
										{
											"key": "limit",
											"value": "81"
										}
									]
								},
								"description": "Get all dictionary metadatas with the latest version. Each dictionary object will only contain meta data of the content.\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries?page=81&limit=81",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries"
									],
									"query": [
										{
											"key": "page",
											"value": "81"
										},
										{
											"key": "limit",
											"value": "81"
										}
									]
								},
								"description": "Get all dictionary metadatas with the latest version. Each dictionary object will only contain meta data of the content.\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						}
					]
				},
				{
					"name": "Create a dictionary",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"name44\",\r\n  \"type\": \"type44\"\r\n}"
						},
						"url": {
							"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v1",
								"dlp",
								"dictionaries"
							]
						},
						"description": "Creates a dictionary with basic metadata and no content. Only \"name\" and \"type\" field is used to create a new dictionary entry.\n"
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name44\",\r\n  \"type\": \"type44\"\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries"
									]
								},
								"description": "Creates a dictionary with basic metadata and no content. Only \"name\" and \"type\" field is used to create a new dictionary entry.\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name44\",\r\n  \"type\": \"type44\"\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries"
									]
								},
								"description": "Creates a dictionary with basic metadata and no content. Only \"name\" and \"type\" field is used to create a new dictionary entry.\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name44\",\r\n  \"type\": \"type44\"\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries"
									]
								},
								"description": "Creates a dictionary with basic metadata and no content. Only \"name\" and \"type\" field is used to create a new dictionary entry.\n"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name44\",\r\n  \"type\": \"type44\"\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries"
									]
								},
								"description": "Creates a dictionary with basic metadata and no content. Only \"name\" and \"type\" field is used to create a new dictionary entry.\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name44\",\r\n  \"type\": \"type44\"\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries"
									]
								},
								"description": "Creates a dictionary with basic metadata and no content. Only \"name\" and \"type\" field is used to create a new dictionary entry.\n"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"data\": {\r\n    \"creationDate\": 114,\r\n    \"creatorId\": \"creatorId44\",\r\n    \"dictRef\": {\r\n      \"dictId\": \"dictId44\",\r\n      \"name\": \"name44\",\r\n      \"version\": \"version44\"\r\n    },\r\n    \"lastUpdatedDate\": 114,\r\n    \"type\": \"type44\"\r\n  }\r\n}"
						}
					]
				},
				{
					"name": "Get dictionary metadata",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries/:dictId?dictVersion=dictVersion31",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v1",
								"dlp",
								"dictionaries",
								":dictId"
							],
							"query": [
								{
									"key": "dictVersion",
									"value": "dictVersion31"
								}
							],
							"variable": [
								{
									"key": "dictId",
									"value": "dictId31"
								}
							]
						},
						"description": "Get basic information for a dictionary."
					},
					"response": [
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries/:dictId?dictVersion=dictVersion31",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries",
										":dictId"
									],
									"query": [
										{
											"key": "dictVersion",
											"value": "dictVersion31"
										}
									],
									"variable": [
										{
											"key": "dictId",
											"value": "dictId31"
										}
									]
								},
								"description": "Get basic information for a dictionary."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries/:dictId?dictVersion=dictVersion31",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries",
										":dictId"
									],
									"query": [
										{
											"key": "dictVersion",
											"value": "dictVersion31"
										}
									],
									"variable": [
										{
											"key": "dictId",
											"value": "dictId31"
										}
									]
								},
								"description": "Get basic information for a dictionary."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries/:dictId?dictVersion=dictVersion31",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries",
										":dictId"
									],
									"query": [
										{
											"key": "dictVersion",
											"value": "dictVersion31"
										}
									],
									"variable": [
										{
											"key": "dictId",
											"value": "dictId31"
										}
									]
								},
								"description": "Get basic information for a dictionary."
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"data\": {\r\n    \"creationDate\": 114,\r\n    \"creatorId\": \"creatorId44\",\r\n    \"dictRef\": {\r\n      \"dictId\": \"dictId44\",\r\n      \"name\": \"name44\",\r\n      \"version\": \"version44\"\r\n    },\r\n    \"lastUpdatedDate\": 114,\r\n    \"type\": \"type44\"\r\n  }\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries/:dictId?dictVersion=dictVersion31",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries",
										":dictId"
									],
									"query": [
										{
											"key": "dictVersion",
											"value": "dictVersion31"
										}
									],
									"variable": [
										{
											"key": "dictId",
											"value": "dictId31"
										}
									]
								},
								"description": "Get basic information for a dictionary."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries/:dictId?dictVersion=dictVersion31",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries",
										":dictId"
									],
									"query": [
										{
											"key": "dictVersion",
											"value": "dictVersion31"
										}
									],
									"variable": [
										{
											"key": "dictId",
											"value": "dictId31"
										}
									]
								},
								"description": "Get basic information for a dictionary."
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						}
					]
				},
				{
					"name": "Updates a dictionary",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"name44\"\r\n}"
						},
						"url": {
							"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries/:dictId",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v1",
								"dlp",
								"dictionaries",
								":dictId"
							],
							"variable": [
								{
									"key": "dictId",
									"value": "dictId31"
								}
							]
						},
						"description": "Updates the dictionary's basic metadata without content.\nThis API cannot be used for creating a new dictionary.\nIn case of update only \"name\" can be changed.\nNote: All related policies will also have versions updated.\n"
					},
					"response": [
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name44\"\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries/:dictId",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries",
										":dictId"
									],
									"variable": [
										{
											"key": "dictId",
											"value": "dictId31"
										}
									]
								},
								"description": "Updates the dictionary's basic metadata without content.\nThis API cannot be used for creating a new dictionary.\nIn case of update only \"name\" can be changed.\nNote: All related policies will also have versions updated.\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name44\"\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries/:dictId",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries",
										":dictId"
									],
									"variable": [
										{
											"key": "dictId",
											"value": "dictId31"
										}
									]
								},
								"description": "Updates the dictionary's basic metadata without content.\nThis API cannot be used for creating a new dictionary.\nIn case of update only \"name\" can be changed.\nNote: All related policies will also have versions updated.\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name44\"\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries/:dictId",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries",
										":dictId"
									],
									"variable": [
										{
											"key": "dictId",
											"value": "dictId31"
										}
									]
								},
								"description": "Updates the dictionary's basic metadata without content.\nThis API cannot be used for creating a new dictionary.\nIn case of update only \"name\" can be changed.\nNote: All related policies will also have versions updated.\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name44\"\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries/:dictId",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries",
										":dictId"
									],
									"variable": [
										{
											"key": "dictId",
											"value": "dictId31"
										}
									]
								},
								"description": "Updates the dictionary's basic metadata without content.\nThis API cannot be used for creating a new dictionary.\nIn case of update only \"name\" can be changed.\nNote: All related policies will also have versions updated.\n"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name44\"\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries/:dictId",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries",
										":dictId"
									],
									"variable": [
										{
											"key": "dictId",
											"value": "dictId31"
										}
									]
								},
								"description": "Updates the dictionary's basic metadata without content.\nThis API cannot be used for creating a new dictionary.\nIn case of update only \"name\" can be changed.\nNote: All related policies will also have versions updated.\n"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"data\": {\r\n    \"creationDate\": 114,\r\n    \"creatorId\": \"creatorId44\",\r\n    \"dictRef\": {\r\n      \"dictId\": \"dictId44\",\r\n      \"name\": \"name44\",\r\n      \"version\": \"version44\"\r\n    },\r\n    \"lastUpdatedDate\": 114,\r\n    \"type\": \"type44\"\r\n  }\r\n}"
						}
					]
				},
				{
					"name": "Delete a dictionary",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries/:dictId",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v1",
								"dlp",
								"dictionaries",
								":dictId"
							],
							"variable": [
								{
									"key": "dictId",
									"value": "dictId31"
								}
							]
						},
						"description": "Deletes a dictionary.\nNote: All related policies will be affected.\n"
					},
					"response": [
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries/:dictId",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries",
										":dictId"
									],
									"variable": [
										{
											"key": "dictId",
											"value": "dictId31"
										}
									]
								},
								"description": "Deletes a dictionary.\nNote: All related policies will be affected.\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries/:dictId",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries",
										":dictId"
									],
									"variable": [
										{
											"key": "dictId",
											"value": "dictId31"
										}
									]
								},
								"description": "Deletes a dictionary.\nNote: All related policies will be affected.\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries/:dictId",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries",
										":dictId"
									],
									"variable": [
										{
											"key": "dictId",
											"value": "dictId31"
										}
									]
								},
								"description": "Deletes a dictionary.\nNote: All related policies will be affected.\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries/:dictId",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries",
										":dictId"
									],
									"variable": [
										{
											"key": "dictId",
											"value": "dictId31"
										}
									]
								},
								"description": "Deletes a dictionary.\nNote: All related policies will be affected.\n"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"data\": {\r\n    \"creationDate\": 114,\r\n    \"creatorId\": \"creatorId44\",\r\n    \"dictRef\": {\r\n      \"dictId\": \"dictId44\",\r\n      \"name\": \"name44\",\r\n      \"version\": \"version44\"\r\n    },\r\n    \"lastUpdatedDate\": 114,\r\n    \"type\": \"type44\"\r\n  }\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries/:dictId",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries",
										":dictId"
									],
									"variable": [
										{
											"key": "dictId",
											"value": "dictId31"
										}
									]
								},
								"description": "Deletes a dictionary.\nNote: All related policies will be affected.\n"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						}
					]
				},
				{
					"name": "Downloads Base 64 encoded dictionary content.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "text/plain,application/json"
							}
						],
						"url": {
							"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries/:dictId/data/download?dictVersion=dictVersion31",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v1",
								"dlp",
								"dictionaries",
								":dictId",
								"data",
								"download"
							],
							"query": [
								{
									"key": "dictVersion",
									"value": "dictVersion31"
								}
							],
							"variable": [
								{
									"key": "dictId",
									"value": "dictId31"
								}
							]
						},
						"description": "Downloads Base 64 encoded dictionary content."
					},
					"response": [
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "text/plain,application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries/:dictId/data/download?dictVersion=dictVersion31",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries",
										":dictId",
										"data",
										"download"
									],
									"query": [
										{
											"key": "dictVersion",
											"value": "dictVersion31"
										}
									],
									"variable": [
										{
											"key": "dictId",
											"value": "dictId31"
										}
									]
								},
								"description": "Downloads Base 64 encoded dictionary content."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "text/plain,application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries/:dictId/data/download?dictVersion=dictVersion31",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries",
										":dictId",
										"data",
										"download"
									],
									"query": [
										{
											"key": "dictVersion",
											"value": "dictVersion31"
										}
									],
									"variable": [
										{
											"key": "dictId",
											"value": "dictId31"
										}
									]
								},
								"description": "Downloads Base 64 encoded dictionary content."
							},
							"status": "Attachment body as Base64 encoded string.",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/octet-stream"
								}
							],
							"cookie": [],
							"body": "response31"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "text/plain,application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries/:dictId/data/download?dictVersion=dictVersion31",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries",
										":dictId",
										"data",
										"download"
									],
									"query": [
										{
											"key": "dictVersion",
											"value": "dictVersion31"
										}
									],
									"variable": [
										{
											"key": "dictId",
											"value": "dictId31"
										}
									]
								},
								"description": "Downloads Base 64 encoded dictionary content."
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "text/plain,application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries/:dictId/data/download?dictVersion=dictVersion31",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries",
										":dictId",
										"data",
										"download"
									],
									"query": [
										{
											"key": "dictVersion",
											"value": "dictVersion31"
										}
									],
									"variable": [
										{
											"key": "dictId",
											"value": "dictId31"
										}
									]
								},
								"description": "Downloads Base 64 encoded dictionary content."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "text/plain,application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries/:dictId/data/download?dictVersion=dictVersion31",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries",
										":dictId",
										"data",
										"download"
									],
									"query": [
										{
											"key": "dictVersion",
											"value": "dictVersion31"
										}
									],
									"variable": [
										{
											"key": "dictId",
											"value": "dictId31"
										}
									]
								},
								"description": "Downloads Base 64 encoded dictionary content."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						}
					]
				},
				{
					"name": "Override dictionary content with provided content.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries/:dictId/data/upload",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v1",
								"dlp",
								"dictionaries",
								":dictId",
								"data",
								"upload"
							],
							"variable": [
								{
									"key": "dictId",
									"value": "dictId31"
								}
							]
						},
						"description": "Override dictionary content with provided content."
					},
					"response": [
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries/:dictId/data/upload",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries",
										":dictId",
										"data",
										"upload"
									],
									"variable": [
										{
											"key": "dictId",
											"value": "dictId31"
										}
									]
								},
								"description": "Override dictionary content with provided content."
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries/:dictId/data/upload",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries",
										":dictId",
										"data",
										"upload"
									],
									"variable": [
										{
											"key": "dictId",
											"value": "dictId31"
										}
									]
								},
								"description": "Override dictionary content with provided content."
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"data\": {\r\n    \"creationDate\": 114,\r\n    \"creatorId\": \"creatorId44\",\r\n    \"dictRef\": {\r\n      \"dictId\": \"dictId44\",\r\n      \"name\": \"name44\",\r\n      \"version\": \"version44\"\r\n    },\r\n    \"lastUpdatedDate\": 114,\r\n    \"type\": \"type44\"\r\n  }\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries/:dictId/data/upload",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries",
										":dictId",
										"data",
										"upload"
									],
									"variable": [
										{
											"key": "dictId",
											"value": "dictId31"
										}
									]
								},
								"description": "Override dictionary content with provided content."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries/:dictId/data/upload",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries",
										":dictId",
										"data",
										"upload"
									],
									"variable": [
										{
											"key": "dictId",
											"value": "dictId31"
										}
									]
								},
								"description": "Override dictionary content with provided content."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/dictionaries/:dictId/data/upload",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"dictionaries",
										":dictId",
										"data",
										"upload"
									],
									"variable": [
										{
											"key": "dictId",
											"value": "dictId31"
										}
									]
								},
								"description": "Override dictionary content with provided content."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						}
					]
				},
				{
					"name": "Get all policies1",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{agentUrl}}/agent/v3/dlp/policies?page=81&limit=81",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v3",
								"dlp",
								"policies"
							],
							"query": [
								{
									"key": "page",
									"value": "81"
								},
								{
									"key": "limit",
									"value": "81"
								}
							]
						},
						"description": "Get all policies"
					},
					"response": [
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies?page=81&limit=81",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies"
									],
									"query": [
										{
											"key": "page",
											"value": "81"
										},
										{
											"key": "limit",
											"value": "81"
										}
									]
								},
								"description": "Get all policies"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies?page=81&limit=81",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies"
									],
									"query": [
										{
											"key": "page",
											"value": "81"
										},
										{
											"key": "limit",
											"value": "81"
										}
									]
								},
								"description": "Get all policies"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies?page=81&limit=81",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies"
									],
									"query": [
										{
											"key": "page",
											"value": "81"
										},
										{
											"key": "limit",
											"value": "81"
										}
									]
								},
								"description": "Get all policies"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies?page=81&limit=81",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies"
									],
									"query": [
										{
											"key": "page",
											"value": "81"
										},
										{
											"key": "limit",
											"value": "81"
										}
									]
								},
								"description": "Get all policies"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies?page=81&limit=81",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies"
									],
									"query": [
										{
											"key": "page",
											"value": "81"
										},
										{
											"key": "limit",
											"value": "81"
										}
									]
								},
								"description": "Get all policies"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"policies\": [\r\n    {\r\n      \"id\": \"id44\",\r\n      \"policyId\": \"policyId44\",\r\n      \"version\": \"version44\",\r\n      \"name\": \"name44\",\r\n      \"creatorId\": 114,\r\n      \"scopes\": [\r\n        \"scopes44\"\r\n      ],\r\n      \"appliesTo\": [\r\n        {\r\n          \"dataType\": \"dataType44\",\r\n          \"action\": \"action44\",\r\n          \"rules\": [\r\n            {\r\n              \"type\": \"type44\",\r\n              \"name\": \"name44\",\r\n              \"textMatchConfig\": {\r\n                \"dictionaries\": [\r\n                  {\r\n                    \"dictId\": \"dictId44\",\r\n                    \"version\": \"version44\",\r\n                    \"name\": \"name44\"\r\n                  }\r\n                ],\r\n                \"countUniqueOccurrences\": 114,\r\n                \"applicableFileTypes\": [\r\n                  \"applicableFileTypes44\"\r\n                ]\r\n              },\r\n              \"fileSizeConfig\": {\r\n                \"sizeLimit\": 114\r\n              },\r\n              \"fileExtensionConfig\": {\r\n                \"allowLists\": [\r\n                  \"allowLists44\"\r\n                ],\r\n                \"blockLists\": [\r\n                  \"blockLists44\"\r\n                ]\r\n              },\r\n              \"filePasswordConfig\": {\r\n                \"applicableFileTypes\": [\r\n                  \"applicableFileTypes44\"\r\n                ],\r\n                \"matchCriteria\": \"matchCriteria44\"\r\n              },\r\n              \"fileClassifierConfig\": {\r\n                \"classifiers\": {\r\n                  \"key1\": \"classifiers44\"\r\n                },\r\n                \"applicableFileTypes\": [\r\n                  \"applicableFileTypes44\"\r\n                ]\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      ],\r\n      \"active\": false,\r\n      \"deleted\": false,\r\n      \"creationDate\": 114,\r\n      \"lastUpdatedDate\": 114,\r\n      \"lastDisabledDate\": 114,\r\n      \"systemPolicy\": false\r\n    }\r\n  ],\r\n  \"page\": 114,\r\n  \"size\": 114,\r\n  \"pageCount\": 114\r\n}"
						}
					]
				},
				{
					"name": "Creates a policy1",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"name44\",\r\n  \"scopes\": [\r\n    \"scopes44\"\r\n  ],\r\n  \"appliesTo\": [\r\n    {\r\n      \"dataType\": \"dataType44\",\r\n      \"action\": \"action44\",\r\n      \"rules\": [\r\n        {\r\n          \"type\": \"type44\",\r\n          \"name\": \"name44\",\r\n          \"textMatchConfig\": {\r\n            \"dictionaries\": [\r\n              {\r\n                \"dictId\": \"dictId44\",\r\n                \"version\": \"version44\",\r\n                \"name\": \"name44\"\r\n              }\r\n            ],\r\n            \"countUniqueOccurrences\": 114,\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ]\r\n          },\r\n          \"fileSizeConfig\": {\r\n            \"sizeLimit\": 114\r\n          },\r\n          \"fileExtensionConfig\": {\r\n            \"allowLists\": [\r\n              \"allowLists44\"\r\n            ],\r\n            \"blockLists\": [\r\n              \"blockLists44\"\r\n            ]\r\n          },\r\n          \"filePasswordConfig\": {\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ],\r\n            \"matchCriteria\": \"matchCriteria44\"\r\n          },\r\n          \"fileClassifierConfig\": {\r\n            \"classifiers\": {\r\n              \"key1\": \"classifiers44\"\r\n            },\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ]\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
						},
						"url": {
							"raw": "https://{{agentUrl}}/agent/v3/dlp/policies",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v3",
								"dlp",
								"policies"
							]
						},
						"description": "Creates a new policy with dictionary references.\nAt the time of policy creation, the caller should only provide - contentTypes, name, scopes and type.\nThe rest of the information is populated automatically.\nNote - You need to enable the policy after creation to start enforcing the policy.\n"
					},
					"response": [
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name44\",\r\n  \"scopes\": [\r\n    \"scopes44\"\r\n  ],\r\n  \"appliesTo\": [\r\n    {\r\n      \"dataType\": \"dataType44\",\r\n      \"action\": \"action44\",\r\n      \"rules\": [\r\n        {\r\n          \"type\": \"type44\",\r\n          \"name\": \"name44\",\r\n          \"textMatchConfig\": {\r\n            \"dictionaries\": [\r\n              {\r\n                \"dictId\": \"dictId44\",\r\n                \"version\": \"version44\",\r\n                \"name\": \"name44\"\r\n              }\r\n            ],\r\n            \"countUniqueOccurrences\": 114,\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ]\r\n          },\r\n          \"fileSizeConfig\": {\r\n            \"sizeLimit\": 114\r\n          },\r\n          \"fileExtensionConfig\": {\r\n            \"allowLists\": [\r\n              \"allowLists44\"\r\n            ],\r\n            \"blockLists\": [\r\n              \"blockLists44\"\r\n            ]\r\n          },\r\n          \"filePasswordConfig\": {\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ],\r\n            \"matchCriteria\": \"matchCriteria44\"\r\n          },\r\n          \"fileClassifierConfig\": {\r\n            \"classifiers\": {\r\n              \"key1\": \"classifiers44\"\r\n            },\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ]\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies"
									]
								},
								"description": "Creates a new policy with dictionary references.\nAt the time of policy creation, the caller should only provide - contentTypes, name, scopes and type.\nThe rest of the information is populated automatically.\nNote - You need to enable the policy after creation to start enforcing the policy.\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name44\",\r\n  \"scopes\": [\r\n    \"scopes44\"\r\n  ],\r\n  \"appliesTo\": [\r\n    {\r\n      \"dataType\": \"dataType44\",\r\n      \"action\": \"action44\",\r\n      \"rules\": [\r\n        {\r\n          \"type\": \"type44\",\r\n          \"name\": \"name44\",\r\n          \"textMatchConfig\": {\r\n            \"dictionaries\": [\r\n              {\r\n                \"dictId\": \"dictId44\",\r\n                \"version\": \"version44\",\r\n                \"name\": \"name44\"\r\n              }\r\n            ],\r\n            \"countUniqueOccurrences\": 114,\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ]\r\n          },\r\n          \"fileSizeConfig\": {\r\n            \"sizeLimit\": 114\r\n          },\r\n          \"fileExtensionConfig\": {\r\n            \"allowLists\": [\r\n              \"allowLists44\"\r\n            ],\r\n            \"blockLists\": [\r\n              \"blockLists44\"\r\n            ]\r\n          },\r\n          \"filePasswordConfig\": {\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ],\r\n            \"matchCriteria\": \"matchCriteria44\"\r\n          },\r\n          \"fileClassifierConfig\": {\r\n            \"classifiers\": {\r\n              \"key1\": \"classifiers44\"\r\n            },\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ]\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies"
									]
								},
								"description": "Creates a new policy with dictionary references.\nAt the time of policy creation, the caller should only provide - contentTypes, name, scopes and type.\nThe rest of the information is populated automatically.\nNote - You need to enable the policy after creation to start enforcing the policy.\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name44\",\r\n  \"scopes\": [\r\n    \"scopes44\"\r\n  ],\r\n  \"appliesTo\": [\r\n    {\r\n      \"dataType\": \"dataType44\",\r\n      \"action\": \"action44\",\r\n      \"rules\": [\r\n        {\r\n          \"type\": \"type44\",\r\n          \"name\": \"name44\",\r\n          \"textMatchConfig\": {\r\n            \"dictionaries\": [\r\n              {\r\n                \"dictId\": \"dictId44\",\r\n                \"version\": \"version44\",\r\n                \"name\": \"name44\"\r\n              }\r\n            ],\r\n            \"countUniqueOccurrences\": 114,\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ]\r\n          },\r\n          \"fileSizeConfig\": {\r\n            \"sizeLimit\": 114\r\n          },\r\n          \"fileExtensionConfig\": {\r\n            \"allowLists\": [\r\n              \"allowLists44\"\r\n            ],\r\n            \"blockLists\": [\r\n              \"blockLists44\"\r\n            ]\r\n          },\r\n          \"filePasswordConfig\": {\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ],\r\n            \"matchCriteria\": \"matchCriteria44\"\r\n          },\r\n          \"fileClassifierConfig\": {\r\n            \"classifiers\": {\r\n              \"key1\": \"classifiers44\"\r\n            },\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ]\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies"
									]
								},
								"description": "Creates a new policy with dictionary references.\nAt the time of policy creation, the caller should only provide - contentTypes, name, scopes and type.\nThe rest of the information is populated automatically.\nNote - You need to enable the policy after creation to start enforcing the policy.\n"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name44\",\r\n  \"scopes\": [\r\n    \"scopes44\"\r\n  ],\r\n  \"appliesTo\": [\r\n    {\r\n      \"dataType\": \"dataType44\",\r\n      \"action\": \"action44\",\r\n      \"rules\": [\r\n        {\r\n          \"type\": \"type44\",\r\n          \"name\": \"name44\",\r\n          \"textMatchConfig\": {\r\n            \"dictionaries\": [\r\n              {\r\n                \"dictId\": \"dictId44\",\r\n                \"version\": \"version44\",\r\n                \"name\": \"name44\"\r\n              }\r\n            ],\r\n            \"countUniqueOccurrences\": 114,\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ]\r\n          },\r\n          \"fileSizeConfig\": {\r\n            \"sizeLimit\": 114\r\n          },\r\n          \"fileExtensionConfig\": {\r\n            \"allowLists\": [\r\n              \"allowLists44\"\r\n            ],\r\n            \"blockLists\": [\r\n              \"blockLists44\"\r\n            ]\r\n          },\r\n          \"filePasswordConfig\": {\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ],\r\n            \"matchCriteria\": \"matchCriteria44\"\r\n          },\r\n          \"fileClassifierConfig\": {\r\n            \"classifiers\": {\r\n              \"key1\": \"classifiers44\"\r\n            },\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ]\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies"
									]
								},
								"description": "Creates a new policy with dictionary references.\nAt the time of policy creation, the caller should only provide - contentTypes, name, scopes and type.\nThe rest of the information is populated automatically.\nNote - You need to enable the policy after creation to start enforcing the policy.\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name44\",\r\n  \"scopes\": [\r\n    \"scopes44\"\r\n  ],\r\n  \"appliesTo\": [\r\n    {\r\n      \"dataType\": \"dataType44\",\r\n      \"action\": \"action44\",\r\n      \"rules\": [\r\n        {\r\n          \"type\": \"type44\",\r\n          \"name\": \"name44\",\r\n          \"textMatchConfig\": {\r\n            \"dictionaries\": [\r\n              {\r\n                \"dictId\": \"dictId44\",\r\n                \"version\": \"version44\",\r\n                \"name\": \"name44\"\r\n              }\r\n            ],\r\n            \"countUniqueOccurrences\": 114,\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ]\r\n          },\r\n          \"fileSizeConfig\": {\r\n            \"sizeLimit\": 114\r\n          },\r\n          \"fileExtensionConfig\": {\r\n            \"allowLists\": [\r\n              \"allowLists44\"\r\n            ],\r\n            \"blockLists\": [\r\n              \"blockLists44\"\r\n            ]\r\n          },\r\n          \"filePasswordConfig\": {\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ],\r\n            \"matchCriteria\": \"matchCriteria44\"\r\n          },\r\n          \"fileClassifierConfig\": {\r\n            \"classifiers\": {\r\n              \"key1\": \"classifiers44\"\r\n            },\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ]\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies"
									]
								},
								"description": "Creates a new policy with dictionary references.\nAt the time of policy creation, the caller should only provide - contentTypes, name, scopes and type.\nThe rest of the information is populated automatically.\nNote - You need to enable the policy after creation to start enforcing the policy.\n"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"data\": {\r\n    \"id\": \"id44\",\r\n    \"policyId\": \"policyId44\",\r\n    \"version\": \"version44\",\r\n    \"name\": \"name44\",\r\n    \"creatorId\": 114,\r\n    \"scopes\": [\r\n      \"scopes44\"\r\n    ],\r\n    \"appliesTo\": [\r\n      {\r\n        \"dataType\": \"dataType44\",\r\n        \"action\": \"action44\",\r\n        \"rules\": [\r\n          {\r\n            \"type\": \"type44\",\r\n            \"name\": \"name44\",\r\n            \"textMatchConfig\": {\r\n              \"dictionaries\": [\r\n                {\r\n                  \"dictId\": \"dictId44\",\r\n                  \"version\": \"version44\",\r\n                  \"name\": \"name44\"\r\n                }\r\n              ],\r\n              \"countUniqueOccurrences\": 114,\r\n              \"applicableFileTypes\": [\r\n                \"applicableFileTypes44\"\r\n              ]\r\n            },\r\n            \"fileSizeConfig\": {\r\n              \"sizeLimit\": 114\r\n            },\r\n            \"fileExtensionConfig\": {\r\n              \"allowLists\": [\r\n                \"allowLists44\"\r\n              ],\r\n              \"blockLists\": [\r\n                \"blockLists44\"\r\n              ]\r\n            },\r\n            \"filePasswordConfig\": {\r\n              \"applicableFileTypes\": [\r\n                \"applicableFileTypes44\"\r\n              ],\r\n              \"matchCriteria\": \"matchCriteria44\"\r\n            },\r\n            \"fileClassifierConfig\": {\r\n              \"classifiers\": {\r\n                \"key1\": \"classifiers44\"\r\n              },\r\n              \"applicableFileTypes\": [\r\n                \"applicableFileTypes44\"\r\n              ]\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"active\": false,\r\n    \"deleted\": false,\r\n    \"creationDate\": 114,\r\n    \"lastUpdatedDate\": 114,\r\n    \"lastDisabledDate\": 114,\r\n    \"systemPolicy\": false\r\n  }\r\n}"
						}
					]
				},
				{
					"name": "Get a policy1",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{agentUrl}}/agent/v3/dlp/policies/:policyId?policyVersion=policyVersion31",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v3",
								"dlp",
								"policies",
								":policyId"
							],
							"query": [
								{
									"key": "policyVersion",
									"value": "policyVersion31"
								}
							],
							"variable": [
								{
									"key": "policyId",
									"value": "policyId31"
								}
							]
						},
						"description": "Get a policy"
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies/:policyId?policyVersion=policyVersion31",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies",
										":policyId"
									],
									"query": [
										{
											"key": "policyVersion",
											"value": "policyVersion31"
										}
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Get a policy"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies/:policyId?policyVersion=policyVersion31",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies",
										":policyId"
									],
									"query": [
										{
											"key": "policyVersion",
											"value": "policyVersion31"
										}
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Get a policy"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies/:policyId?policyVersion=policyVersion31",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies",
										":policyId"
									],
									"query": [
										{
											"key": "policyVersion",
											"value": "policyVersion31"
										}
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Get a policy"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"data\": {\r\n    \"id\": \"id44\",\r\n    \"policyId\": \"policyId44\",\r\n    \"version\": \"version44\",\r\n    \"name\": \"name44\",\r\n    \"creatorId\": 114,\r\n    \"scopes\": [\r\n      \"scopes44\"\r\n    ],\r\n    \"appliesTo\": [\r\n      {\r\n        \"dataType\": \"dataType44\",\r\n        \"action\": \"action44\",\r\n        \"rules\": [\r\n          {\r\n            \"type\": \"type44\",\r\n            \"name\": \"name44\",\r\n            \"textMatchConfig\": {\r\n              \"dictionaries\": [\r\n                {\r\n                  \"dictId\": \"dictId44\",\r\n                  \"version\": \"version44\",\r\n                  \"name\": \"name44\"\r\n                }\r\n              ],\r\n              \"countUniqueOccurrences\": 114,\r\n              \"applicableFileTypes\": [\r\n                \"applicableFileTypes44\"\r\n              ]\r\n            },\r\n            \"fileSizeConfig\": {\r\n              \"sizeLimit\": 114\r\n            },\r\n            \"fileExtensionConfig\": {\r\n              \"allowLists\": [\r\n                \"allowLists44\"\r\n              ],\r\n              \"blockLists\": [\r\n                \"blockLists44\"\r\n              ]\r\n            },\r\n            \"filePasswordConfig\": {\r\n              \"applicableFileTypes\": [\r\n                \"applicableFileTypes44\"\r\n              ],\r\n              \"matchCriteria\": \"matchCriteria44\"\r\n            },\r\n            \"fileClassifierConfig\": {\r\n              \"classifiers\": {\r\n                \"key1\": \"classifiers44\"\r\n              },\r\n              \"applicableFileTypes\": [\r\n                \"applicableFileTypes44\"\r\n              ]\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"active\": false,\r\n    \"deleted\": false,\r\n    \"creationDate\": 114,\r\n    \"lastUpdatedDate\": 114,\r\n    \"lastDisabledDate\": 114,\r\n    \"systemPolicy\": false\r\n  }\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies/:policyId?policyVersion=policyVersion31",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies",
										":policyId"
									],
									"query": [
										{
											"key": "policyVersion",
											"value": "policyVersion31"
										}
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Get a policy"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies/:policyId?policyVersion=policyVersion31",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies",
										":policyId"
									],
									"query": [
										{
											"key": "policyVersion",
											"value": "policyVersion31"
										}
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Get a policy"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						}
					]
				},
				{
					"name": "Updates a policy. Cannot be used for creation.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"name44\",\r\n  \"scopes\": [\r\n    \"scopes44\"\r\n  ],\r\n  \"appliesTo\": [\r\n    {\r\n      \"dataType\": \"dataType44\",\r\n      \"action\": \"action44\",\r\n      \"rules\": [\r\n        {\r\n          \"type\": \"type44\",\r\n          \"name\": \"name44\",\r\n          \"textMatchConfig\": {\r\n            \"dictionaries\": [\r\n              {\r\n                \"dictId\": \"dictId44\",\r\n                \"version\": \"version44\",\r\n                \"name\": \"name44\"\r\n              }\r\n            ],\r\n            \"countUniqueOccurrences\": 114,\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ]\r\n          },\r\n          \"fileSizeConfig\": {\r\n            \"sizeLimit\": 114\r\n          },\r\n          \"fileExtensionConfig\": {\r\n            \"allowLists\": [\r\n              \"allowLists44\"\r\n            ],\r\n            \"blockLists\": [\r\n              \"blockLists44\"\r\n            ]\r\n          },\r\n          \"filePasswordConfig\": {\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ],\r\n            \"matchCriteria\": \"matchCriteria44\"\r\n          },\r\n          \"fileClassifierConfig\": {\r\n            \"classifiers\": {\r\n              \"key1\": \"classifiers44\"\r\n            },\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ]\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
						},
						"url": {
							"raw": "https://{{agentUrl}}/agent/v3/dlp/policies/:policyId/update",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v3",
								"dlp",
								"policies",
								":policyId",
								"update"
							],
							"variable": [
								{
									"key": "policyId",
									"value": "policyId31"
								}
							]
						},
						"description": "Update the policy (name, type, contentTypes, scopes) and also the dictionaries for a policy.\nWarning: If you send empty list of dictionaries during the update operation, then all the\ndictionaries for this policy are deleted and policy is automatically disabled.\nNote: The policy should already exist.\n"
					},
					"response": [
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name44\",\r\n  \"scopes\": [\r\n    \"scopes44\"\r\n  ],\r\n  \"appliesTo\": [\r\n    {\r\n      \"dataType\": \"dataType44\",\r\n      \"action\": \"action44\",\r\n      \"rules\": [\r\n        {\r\n          \"type\": \"type44\",\r\n          \"name\": \"name44\",\r\n          \"textMatchConfig\": {\r\n            \"dictionaries\": [\r\n              {\r\n                \"dictId\": \"dictId44\",\r\n                \"version\": \"version44\",\r\n                \"name\": \"name44\"\r\n              }\r\n            ],\r\n            \"countUniqueOccurrences\": 114,\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ]\r\n          },\r\n          \"fileSizeConfig\": {\r\n            \"sizeLimit\": 114\r\n          },\r\n          \"fileExtensionConfig\": {\r\n            \"allowLists\": [\r\n              \"allowLists44\"\r\n            ],\r\n            \"blockLists\": [\r\n              \"blockLists44\"\r\n            ]\r\n          },\r\n          \"filePasswordConfig\": {\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ],\r\n            \"matchCriteria\": \"matchCriteria44\"\r\n          },\r\n          \"fileClassifierConfig\": {\r\n            \"classifiers\": {\r\n              \"key1\": \"classifiers44\"\r\n            },\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ]\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies/:policyId/update",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies",
										":policyId",
										"update"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Update the policy (name, type, contentTypes, scopes) and also the dictionaries for a policy.\nWarning: If you send empty list of dictionaries during the update operation, then all the\ndictionaries for this policy are deleted and policy is automatically disabled.\nNote: The policy should already exist.\n"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"data\": {\r\n    \"id\": \"id44\",\r\n    \"policyId\": \"policyId44\",\r\n    \"version\": \"version44\",\r\n    \"name\": \"name44\",\r\n    \"creatorId\": 114,\r\n    \"scopes\": [\r\n      \"scopes44\"\r\n    ],\r\n    \"appliesTo\": [\r\n      {\r\n        \"dataType\": \"dataType44\",\r\n        \"action\": \"action44\",\r\n        \"rules\": [\r\n          {\r\n            \"type\": \"type44\",\r\n            \"name\": \"name44\",\r\n            \"textMatchConfig\": {\r\n              \"dictionaries\": [\r\n                {\r\n                  \"dictId\": \"dictId44\",\r\n                  \"version\": \"version44\",\r\n                  \"name\": \"name44\"\r\n                }\r\n              ],\r\n              \"countUniqueOccurrences\": 114,\r\n              \"applicableFileTypes\": [\r\n                \"applicableFileTypes44\"\r\n              ]\r\n            },\r\n            \"fileSizeConfig\": {\r\n              \"sizeLimit\": 114\r\n            },\r\n            \"fileExtensionConfig\": {\r\n              \"allowLists\": [\r\n                \"allowLists44\"\r\n              ],\r\n              \"blockLists\": [\r\n                \"blockLists44\"\r\n              ]\r\n            },\r\n            \"filePasswordConfig\": {\r\n              \"applicableFileTypes\": [\r\n                \"applicableFileTypes44\"\r\n              ],\r\n              \"matchCriteria\": \"matchCriteria44\"\r\n            },\r\n            \"fileClassifierConfig\": {\r\n              \"classifiers\": {\r\n                \"key1\": \"classifiers44\"\r\n              },\r\n              \"applicableFileTypes\": [\r\n                \"applicableFileTypes44\"\r\n              ]\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"active\": false,\r\n    \"deleted\": false,\r\n    \"creationDate\": 114,\r\n    \"lastUpdatedDate\": 114,\r\n    \"lastDisabledDate\": 114,\r\n    \"systemPolicy\": false\r\n  }\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name44\",\r\n  \"scopes\": [\r\n    \"scopes44\"\r\n  ],\r\n  \"appliesTo\": [\r\n    {\r\n      \"dataType\": \"dataType44\",\r\n      \"action\": \"action44\",\r\n      \"rules\": [\r\n        {\r\n          \"type\": \"type44\",\r\n          \"name\": \"name44\",\r\n          \"textMatchConfig\": {\r\n            \"dictionaries\": [\r\n              {\r\n                \"dictId\": \"dictId44\",\r\n                \"version\": \"version44\",\r\n                \"name\": \"name44\"\r\n              }\r\n            ],\r\n            \"countUniqueOccurrences\": 114,\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ]\r\n          },\r\n          \"fileSizeConfig\": {\r\n            \"sizeLimit\": 114\r\n          },\r\n          \"fileExtensionConfig\": {\r\n            \"allowLists\": [\r\n              \"allowLists44\"\r\n            ],\r\n            \"blockLists\": [\r\n              \"blockLists44\"\r\n            ]\r\n          },\r\n          \"filePasswordConfig\": {\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ],\r\n            \"matchCriteria\": \"matchCriteria44\"\r\n          },\r\n          \"fileClassifierConfig\": {\r\n            \"classifiers\": {\r\n              \"key1\": \"classifiers44\"\r\n            },\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ]\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies/:policyId/update",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies",
										":policyId",
										"update"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Update the policy (name, type, contentTypes, scopes) and also the dictionaries for a policy.\nWarning: If you send empty list of dictionaries during the update operation, then all the\ndictionaries for this policy are deleted and policy is automatically disabled.\nNote: The policy should already exist.\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name44\",\r\n  \"scopes\": [\r\n    \"scopes44\"\r\n  ],\r\n  \"appliesTo\": [\r\n    {\r\n      \"dataType\": \"dataType44\",\r\n      \"action\": \"action44\",\r\n      \"rules\": [\r\n        {\r\n          \"type\": \"type44\",\r\n          \"name\": \"name44\",\r\n          \"textMatchConfig\": {\r\n            \"dictionaries\": [\r\n              {\r\n                \"dictId\": \"dictId44\",\r\n                \"version\": \"version44\",\r\n                \"name\": \"name44\"\r\n              }\r\n            ],\r\n            \"countUniqueOccurrences\": 114,\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ]\r\n          },\r\n          \"fileSizeConfig\": {\r\n            \"sizeLimit\": 114\r\n          },\r\n          \"fileExtensionConfig\": {\r\n            \"allowLists\": [\r\n              \"allowLists44\"\r\n            ],\r\n            \"blockLists\": [\r\n              \"blockLists44\"\r\n            ]\r\n          },\r\n          \"filePasswordConfig\": {\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ],\r\n            \"matchCriteria\": \"matchCriteria44\"\r\n          },\r\n          \"fileClassifierConfig\": {\r\n            \"classifiers\": {\r\n              \"key1\": \"classifiers44\"\r\n            },\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ]\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies/:policyId/update",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies",
										":policyId",
										"update"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Update the policy (name, type, contentTypes, scopes) and also the dictionaries for a policy.\nWarning: If you send empty list of dictionaries during the update operation, then all the\ndictionaries for this policy are deleted and policy is automatically disabled.\nNote: The policy should already exist.\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name44\",\r\n  \"scopes\": [\r\n    \"scopes44\"\r\n  ],\r\n  \"appliesTo\": [\r\n    {\r\n      \"dataType\": \"dataType44\",\r\n      \"action\": \"action44\",\r\n      \"rules\": [\r\n        {\r\n          \"type\": \"type44\",\r\n          \"name\": \"name44\",\r\n          \"textMatchConfig\": {\r\n            \"dictionaries\": [\r\n              {\r\n                \"dictId\": \"dictId44\",\r\n                \"version\": \"version44\",\r\n                \"name\": \"name44\"\r\n              }\r\n            ],\r\n            \"countUniqueOccurrences\": 114,\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ]\r\n          },\r\n          \"fileSizeConfig\": {\r\n            \"sizeLimit\": 114\r\n          },\r\n          \"fileExtensionConfig\": {\r\n            \"allowLists\": [\r\n              \"allowLists44\"\r\n            ],\r\n            \"blockLists\": [\r\n              \"blockLists44\"\r\n            ]\r\n          },\r\n          \"filePasswordConfig\": {\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ],\r\n            \"matchCriteria\": \"matchCriteria44\"\r\n          },\r\n          \"fileClassifierConfig\": {\r\n            \"classifiers\": {\r\n              \"key1\": \"classifiers44\"\r\n            },\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ]\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies/:policyId/update",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies",
										":policyId",
										"update"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Update the policy (name, type, contentTypes, scopes) and also the dictionaries for a policy.\nWarning: If you send empty list of dictionaries during the update operation, then all the\ndictionaries for this policy are deleted and policy is automatically disabled.\nNote: The policy should already exist.\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name44\",\r\n  \"scopes\": [\r\n    \"scopes44\"\r\n  ],\r\n  \"appliesTo\": [\r\n    {\r\n      \"dataType\": \"dataType44\",\r\n      \"action\": \"action44\",\r\n      \"rules\": [\r\n        {\r\n          \"type\": \"type44\",\r\n          \"name\": \"name44\",\r\n          \"textMatchConfig\": {\r\n            \"dictionaries\": [\r\n              {\r\n                \"dictId\": \"dictId44\",\r\n                \"version\": \"version44\",\r\n                \"name\": \"name44\"\r\n              }\r\n            ],\r\n            \"countUniqueOccurrences\": 114,\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ]\r\n          },\r\n          \"fileSizeConfig\": {\r\n            \"sizeLimit\": 114\r\n          },\r\n          \"fileExtensionConfig\": {\r\n            \"allowLists\": [\r\n              \"allowLists44\"\r\n            ],\r\n            \"blockLists\": [\r\n              \"blockLists44\"\r\n            ]\r\n          },\r\n          \"filePasswordConfig\": {\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ],\r\n            \"matchCriteria\": \"matchCriteria44\"\r\n          },\r\n          \"fileClassifierConfig\": {\r\n            \"classifiers\": {\r\n              \"key1\": \"classifiers44\"\r\n            },\r\n            \"applicableFileTypes\": [\r\n              \"applicableFileTypes44\"\r\n            ]\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies/:policyId/update",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies",
										":policyId",
										"update"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Update the policy (name, type, contentTypes, scopes) and also the dictionaries for a policy.\nWarning: If you send empty list of dictionaries during the update operation, then all the\ndictionaries for this policy are deleted and policy is automatically disabled.\nNote: The policy should already exist.\n"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						}
					]
				},
				{
					"name": "Delete a policy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{agentUrl}}/agent/v3/dlp/policies/:policyId/delete",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v3",
								"dlp",
								"policies",
								":policyId",
								"delete"
							],
							"variable": [
								{
									"key": "policyId",
									"value": "policyId31"
								}
							]
						},
						"description": "Delete a policy.\nNote: Only disabled policy can be deleted\n"
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies/:policyId/delete",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies",
										":policyId",
										"delete"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Delete a policy.\nNote: Only disabled policy can be deleted\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies/:policyId/delete",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies",
										":policyId",
										"delete"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Delete a policy.\nNote: Only disabled policy can be deleted\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies/:policyId/delete",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies",
										":policyId",
										"delete"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Delete a policy.\nNote: Only disabled policy can be deleted\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies/:policyId/delete",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies",
										":policyId",
										"delete"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Delete a policy.\nNote: Only disabled policy can be deleted\n"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"data\": {\r\n    \"id\": \"id44\",\r\n    \"policyId\": \"policyId44\",\r\n    \"version\": \"version44\",\r\n    \"name\": \"name44\",\r\n    \"creatorId\": 114,\r\n    \"scopes\": [\r\n      \"scopes44\"\r\n    ],\r\n    \"appliesTo\": [\r\n      {\r\n        \"dataType\": \"dataType44\",\r\n        \"action\": \"action44\",\r\n        \"rules\": [\r\n          {\r\n            \"type\": \"type44\",\r\n            \"name\": \"name44\",\r\n            \"textMatchConfig\": {\r\n              \"dictionaries\": [\r\n                {\r\n                  \"dictId\": \"dictId44\",\r\n                  \"version\": \"version44\",\r\n                  \"name\": \"name44\"\r\n                }\r\n              ],\r\n              \"countUniqueOccurrences\": 114,\r\n              \"applicableFileTypes\": [\r\n                \"applicableFileTypes44\"\r\n              ]\r\n            },\r\n            \"fileSizeConfig\": {\r\n              \"sizeLimit\": 114\r\n            },\r\n            \"fileExtensionConfig\": {\r\n              \"allowLists\": [\r\n                \"allowLists44\"\r\n              ],\r\n              \"blockLists\": [\r\n                \"blockLists44\"\r\n              ]\r\n            },\r\n            \"filePasswordConfig\": {\r\n              \"applicableFileTypes\": [\r\n                \"applicableFileTypes44\"\r\n              ],\r\n              \"matchCriteria\": \"matchCriteria44\"\r\n            },\r\n            \"fileClassifierConfig\": {\r\n              \"classifiers\": {\r\n                \"key1\": \"classifiers44\"\r\n              },\r\n              \"applicableFileTypes\": [\r\n                \"applicableFileTypes44\"\r\n              ]\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"active\": false,\r\n    \"deleted\": false,\r\n    \"creationDate\": 114,\r\n    \"lastUpdatedDate\": 114,\r\n    \"lastDisabledDate\": 114,\r\n    \"systemPolicy\": false\r\n  }\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies/:policyId/delete",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies",
										":policyId",
										"delete"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId31"
										}
									]
								},
								"description": "Delete a policy.\nNote: Only disabled policy can be deleted\n"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						}
					]
				},
				{
					"name": "Enables a policy.1",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{agentUrl}}/agent/v3/dlp/policies/:policyId/enable",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v3",
								"dlp",
								"policies",
								":policyId",
								"enable"
							],
							"variable": [
								{
									"key": "policyId",
									"value": "policyId1"
								}
							]
						},
						"description": "Enables a policy."
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies/:policyId/enable",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies",
										":policyId",
										"enable"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId1"
										}
									]
								},
								"description": "Enables a policy."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies/:policyId/enable",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies",
										":policyId",
										"enable"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId1"
										}
									]
								},
								"description": "Enables a policy."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies/:policyId/enable",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies",
										":policyId",
										"enable"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId1"
										}
									]
								},
								"description": "Enables a policy."
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies/:policyId/enable",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies",
										":policyId",
										"enable"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId1"
										}
									]
								},
								"description": "Enables a policy."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies/:policyId/enable",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies",
										":policyId",
										"enable"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId1"
										}
									]
								},
								"description": "Enables a policy."
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"data\": {\r\n    \"id\": \"id44\",\r\n    \"policyId\": \"policyId44\",\r\n    \"version\": \"version44\",\r\n    \"name\": \"name44\",\r\n    \"creatorId\": 114,\r\n    \"scopes\": [\r\n      \"scopes44\"\r\n    ],\r\n    \"appliesTo\": [\r\n      {\r\n        \"dataType\": \"dataType44\",\r\n        \"action\": \"action44\",\r\n        \"rules\": [\r\n          {\r\n            \"type\": \"type44\",\r\n            \"name\": \"name44\",\r\n            \"textMatchConfig\": {\r\n              \"dictionaries\": [\r\n                {\r\n                  \"dictId\": \"dictId44\",\r\n                  \"version\": \"version44\",\r\n                  \"name\": \"name44\"\r\n                }\r\n              ],\r\n              \"countUniqueOccurrences\": 114,\r\n              \"applicableFileTypes\": [\r\n                \"applicableFileTypes44\"\r\n              ]\r\n            },\r\n            \"fileSizeConfig\": {\r\n              \"sizeLimit\": 114\r\n            },\r\n            \"fileExtensionConfig\": {\r\n              \"allowLists\": [\r\n                \"allowLists44\"\r\n              ],\r\n              \"blockLists\": [\r\n                \"blockLists44\"\r\n              ]\r\n            },\r\n            \"filePasswordConfig\": {\r\n              \"applicableFileTypes\": [\r\n                \"applicableFileTypes44\"\r\n              ],\r\n              \"matchCriteria\": \"matchCriteria44\"\r\n            },\r\n            \"fileClassifierConfig\": {\r\n              \"classifiers\": {\r\n                \"key1\": \"classifiers44\"\r\n              },\r\n              \"applicableFileTypes\": [\r\n                \"applicableFileTypes44\"\r\n              ]\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"active\": false,\r\n    \"deleted\": false,\r\n    \"creationDate\": 114,\r\n    \"lastUpdatedDate\": 114,\r\n    \"lastDisabledDate\": 114,\r\n    \"systemPolicy\": false\r\n  }\r\n}"
						}
					]
				},
				{
					"name": "Disables a policy.1",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{agentUrl}}/agent/v3/dlp/policies/:policyId/disable",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v3",
								"dlp",
								"policies",
								":policyId",
								"disable"
							],
							"variable": [
								{
									"key": "policyId",
									"value": "policyId1"
								}
							]
						},
						"description": "Disables a policy."
					},
					"response": [
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies/:policyId/disable",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies",
										":policyId",
										"disable"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId1"
										}
									]
								},
								"description": "Disables a policy."
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies/:policyId/disable",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies",
										":policyId",
										"disable"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId1"
										}
									]
								},
								"description": "Disables a policy."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies/:policyId/disable",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies",
										":policyId",
										"disable"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId1"
										}
									]
								},
								"description": "Disables a policy."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies/:policyId/disable",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies",
										":policyId",
										"disable"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId1"
										}
									]
								},
								"description": "Disables a policy."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/policies/:policyId/disable",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"policies",
										":policyId",
										"disable"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "policyId1"
										}
									]
								},
								"description": "Disables a policy."
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"data\": {\r\n    \"id\": \"id44\",\r\n    \"policyId\": \"policyId44\",\r\n    \"version\": \"version44\",\r\n    \"name\": \"name44\",\r\n    \"creatorId\": 114,\r\n    \"scopes\": [\r\n      \"scopes44\"\r\n    ],\r\n    \"appliesTo\": [\r\n      {\r\n        \"dataType\": \"dataType44\",\r\n        \"action\": \"action44\",\r\n        \"rules\": [\r\n          {\r\n            \"type\": \"type44\",\r\n            \"name\": \"name44\",\r\n            \"textMatchConfig\": {\r\n              \"dictionaries\": [\r\n                {\r\n                  \"dictId\": \"dictId44\",\r\n                  \"version\": \"version44\",\r\n                  \"name\": \"name44\"\r\n                }\r\n              ],\r\n              \"countUniqueOccurrences\": 114,\r\n              \"applicableFileTypes\": [\r\n                \"applicableFileTypes44\"\r\n              ]\r\n            },\r\n            \"fileSizeConfig\": {\r\n              \"sizeLimit\": 114\r\n            },\r\n            \"fileExtensionConfig\": {\r\n              \"allowLists\": [\r\n                \"allowLists44\"\r\n              ],\r\n              \"blockLists\": [\r\n                \"blockLists44\"\r\n              ]\r\n            },\r\n            \"filePasswordConfig\": {\r\n              \"applicableFileTypes\": [\r\n                \"applicableFileTypes44\"\r\n              ],\r\n              \"matchCriteria\": \"matchCriteria44\"\r\n            },\r\n            \"fileClassifierConfig\": {\r\n              \"classifiers\": {\r\n                \"key1\": \"classifiers44\"\r\n              },\r\n              \"applicableFileTypes\": [\r\n                \"applicableFileTypes44\"\r\n              ]\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"active\": false,\r\n    \"deleted\": false,\r\n    \"creationDate\": 114,\r\n    \"lastUpdatedDate\": 114,\r\n    \"lastDisabledDate\": 114,\r\n    \"systemPolicy\": false\r\n  }\r\n}"
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Violations",
			"item": [
				{
					"name": "Get violations as a result of policy enforcement on messages.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{agentUrl}}/agent/v1/dlp/violations/message?startTime=3&endTime=3&next=next1&limit=3",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v1",
								"dlp",
								"violations",
								"message"
							],
							"query": [
								{
									"key": "startTime",
									"value": "3"
								},
								{
									"key": "endTime",
									"value": "3"
								},
								{
									"key": "next",
									"value": "next1"
								},
								{
									"key": "limit",
									"value": "3"
								}
							]
						},
						"description": "TBD\n"
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/violations/message?startTime=3&endTime=3&next=next1&limit=3",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"violations",
										"message"
									],
									"query": [
										{
											"key": "startTime",
											"value": "3"
										},
										{
											"key": "endTime",
											"value": "3"
										},
										{
											"key": "next",
											"value": "next1"
										},
										{
											"key": "limit",
											"value": "3"
										}
									]
								},
								"description": "TBD\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/violations/message?startTime=3&endTime=3&next=next1&limit=3",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"violations",
										"message"
									],
									"query": [
										{
											"key": "startTime",
											"value": "3"
										},
										{
											"key": "endTime",
											"value": "3"
										},
										{
											"key": "next",
											"value": "next1"
										},
										{
											"key": "limit",
											"value": "3"
										}
									]
								},
								"description": "TBD\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/violations/message?startTime=3&endTime=3&next=next1&limit=3",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"violations",
										"message"
									],
									"query": [
										{
											"key": "startTime",
											"value": "3"
										},
										{
											"key": "endTime",
											"value": "3"
										},
										{
											"key": "next",
											"value": "next1"
										},
										{
											"key": "limit",
											"value": "3"
										}
									]
								},
								"description": "TBD\n"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"violations\": [\r\n    {\r\n      \"violation\": {\r\n        \"enforcementEventID\": \"enforcementEventID44\",\r\n        \"entityID\": \"entityID44\",\r\n        \"createTime\": 114,\r\n        \"lastModified\": 114,\r\n        \"requesterId\": 114,\r\n        \"matchedPolicies\": [\r\n          {\r\n            \"id\": \"id44\",\r\n            \"version\": \"version44\",\r\n            \"policyName\": \"policyName44\",\r\n            \"type\": \"type44\",\r\n            \"terms\": \"terms44\",\r\n            \"diagnostic\": \"diagnostic44\"\r\n          }\r\n        ],\r\n        \"action\": \"action44\",\r\n        \"outcome\": {\r\n          \"type\": \"type44\"\r\n        },\r\n        \"version\": \"version44\",\r\n        \"ignoreDLPwarning\": false\r\n      },\r\n      \"message\": {\r\n        \"messageId\": \"messageId74\",\r\n        \"timestamp\": 192,\r\n        \"message\": \"message74\",\r\n        \"data\": \"data74\",\r\n        \"attachments\": [\r\n          {\r\n            \"id\": \"id74\",\r\n            \"name\": \"name74\",\r\n            \"size\": 192,\r\n            \"images\": [\r\n              {\r\n                \"id\": \"id74\",\r\n                \"dimension\": \"dimension74\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"user\": {\r\n          \"userId\": 192,\r\n          \"firstName\": \"firstName74\",\r\n          \"lastName\": \"lastName74\",\r\n          \"displayName\": \"displayName74\",\r\n          \"email\": \"email74\",\r\n          \"username\": \"username74\"\r\n        },\r\n        \"stream\": {\r\n          \"streamId\": \"streamId74\",\r\n          \"streamType\": \"streamType74\",\r\n          \"roomName\": \"roomName74\",\r\n          \"members\": [\r\n            {\r\n              \"userId\": 192,\r\n              \"firstName\": \"firstName74\",\r\n              \"lastName\": \"lastName74\",\r\n              \"displayName\": \"displayName74\",\r\n              \"email\": \"email74\",\r\n              \"username\": \"username74\"\r\n            }\r\n          ],\r\n          \"external\": false,\r\n          \"crossPod\": false\r\n        },\r\n        \"externalRecipients\": false,\r\n        \"diagnostic\": \"diagnostic74\",\r\n        \"userAgent\": \"userAgent74\",\r\n        \"originalFormat\": \"originalFormat74\",\r\n        \"disclaimer\": \"disclaimer74\"\r\n      },\r\n      \"diagnostic\": \"diagnostic44\"\r\n    }\r\n  ],\r\n  \"nextOffset\": \"nextOffset44\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/violations/message?startTime=3&endTime=3&next=next1&limit=3",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"violations",
										"message"
									],
									"query": [
										{
											"key": "startTime",
											"value": "3"
										},
										{
											"key": "endTime",
											"value": "3"
										},
										{
											"key": "next",
											"value": "next1"
										},
										{
											"key": "limit",
											"value": "3"
										}
									]
								},
								"description": "TBD\n"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/violations/message?startTime=3&endTime=3&next=next1&limit=3",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"violations",
										"message"
									],
									"query": [
										{
											"key": "startTime",
											"value": "3"
										},
										{
											"key": "endTime",
											"value": "3"
										},
										{
											"key": "next",
											"value": "next1"
										},
										{
											"key": "limit",
											"value": "3"
										}
									]
								},
								"description": "TBD\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						}
					]
				},
				{
					"name": "Get violations as a result of policy enforcement on streams.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{agentUrl}}/agent/v1/dlp/violations/stream?startTime=3&endTime=3&next=next1&limit=3",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v1",
								"dlp",
								"violations",
								"stream"
							],
							"query": [
								{
									"key": "startTime",
									"value": "3"
								},
								{
									"key": "endTime",
									"value": "3"
								},
								{
									"key": "next",
									"value": "next1"
								},
								{
									"key": "limit",
									"value": "3"
								}
							]
						},
						"description": "TBD\n"
					},
					"response": [
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/violations/stream?startTime=3&endTime=3&next=next1&limit=3",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"violations",
										"stream"
									],
									"query": [
										{
											"key": "startTime",
											"value": "3"
										},
										{
											"key": "endTime",
											"value": "3"
										},
										{
											"key": "next",
											"value": "next1"
										},
										{
											"key": "limit",
											"value": "3"
										}
									]
								},
								"description": "TBD\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/violations/stream?startTime=3&endTime=3&next=next1&limit=3",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"violations",
										"stream"
									],
									"query": [
										{
											"key": "startTime",
											"value": "3"
										},
										{
											"key": "endTime",
											"value": "3"
										},
										{
											"key": "next",
											"value": "next1"
										},
										{
											"key": "limit",
											"value": "3"
										}
									]
								},
								"description": "TBD\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/violations/stream?startTime=3&endTime=3&next=next1&limit=3",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"violations",
										"stream"
									],
									"query": [
										{
											"key": "startTime",
											"value": "3"
										},
										{
											"key": "endTime",
											"value": "3"
										},
										{
											"key": "next",
											"value": "next1"
										},
										{
											"key": "limit",
											"value": "3"
										}
									]
								},
								"description": "TBD\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/violations/stream?startTime=3&endTime=3&next=next1&limit=3",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"violations",
										"stream"
									],
									"query": [
										{
											"key": "startTime",
											"value": "3"
										},
										{
											"key": "endTime",
											"value": "3"
										},
										{
											"key": "next",
											"value": "next1"
										},
										{
											"key": "limit",
											"value": "3"
										}
									]
								},
								"description": "TBD\n"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/violations/stream?startTime=3&endTime=3&next=next1&limit=3",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"violations",
										"stream"
									],
									"query": [
										{
											"key": "startTime",
											"value": "3"
										},
										{
											"key": "endTime",
											"value": "3"
										},
										{
											"key": "next",
											"value": "next1"
										},
										{
											"key": "limit",
											"value": "3"
										}
									]
								},
								"description": "TBD\n"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"violations\": [\r\n    {\r\n      \"violation\": {\r\n        \"enforcementEventID\": \"enforcementEventID44\",\r\n        \"entityID\": \"entityID44\",\r\n        \"createTime\": 114,\r\n        \"lastModified\": 114,\r\n        \"requesterId\": 114,\r\n        \"matchedPolicies\": [\r\n          {\r\n            \"id\": \"id44\",\r\n            \"version\": \"version44\",\r\n            \"policyName\": \"policyName44\",\r\n            \"type\": \"type44\",\r\n            \"terms\": \"terms44\",\r\n            \"diagnostic\": \"diagnostic44\"\r\n          }\r\n        ],\r\n        \"action\": \"action44\",\r\n        \"outcome\": {\r\n          \"type\": \"type44\"\r\n        },\r\n        \"version\": \"version44\",\r\n        \"ignoreDLPwarning\": false\r\n      },\r\n      \"stream\": {\r\n        \"name\": \"name44\",\r\n        \"creatorPrettyName\": \"creatorPrettyName44\",\r\n        \"publicRoom\": false,\r\n        \"crossPod\": false,\r\n        \"allowExternal\": false,\r\n        \"creatorId\": \"creatorId44\",\r\n        \"roomDescription\": \"roomDescription44\",\r\n        \"streamId\": \"streamId44\",\r\n        \"state\": \"state44\",\r\n        \"type\": \"type44\",\r\n        \"lastDisabled\": 114,\r\n        \"memberAddUserEnabled\": false,\r\n        \"active\": false,\r\n        \"discoverable\": false,\r\n        \"readOnly\": false,\r\n        \"copyDisabled\": false,\r\n        \"externalOwned\": false,\r\n        \"sendMessageDisabled\": false,\r\n        \"moderated\": false,\r\n        \"shareHistoryEnabled\": false,\r\n        \"diagnostic\": \"diagnostic44\"\r\n      }\r\n    }\r\n  ],\r\n  \"nextOffset\": \"nextOffset44\"\r\n}"
						}
					]
				},
				{
					"name": "Get violations as a result of policy enforcement on signals.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{agentUrl}}/agent/v1/dlp/violations/signal?startTime=3&endTime=3&next=next1&limit=3",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v1",
								"dlp",
								"violations",
								"signal"
							],
							"query": [
								{
									"key": "startTime",
									"value": "3"
								},
								{
									"key": "endTime",
									"value": "3"
								},
								{
									"key": "next",
									"value": "next1"
								},
								{
									"key": "limit",
									"value": "3"
								}
							]
						},
						"description": "TBD\n"
					},
					"response": [
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/violations/signal?startTime=3&endTime=3&next=next1&limit=3",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"violations",
										"signal"
									],
									"query": [
										{
											"key": "startTime",
											"value": "3"
										},
										{
											"key": "endTime",
											"value": "3"
										},
										{
											"key": "next",
											"value": "next1"
										},
										{
											"key": "limit",
											"value": "3"
										}
									]
								},
								"description": "TBD\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/violations/signal?startTime=3&endTime=3&next=next1&limit=3",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"violations",
										"signal"
									],
									"query": [
										{
											"key": "startTime",
											"value": "3"
										},
										{
											"key": "endTime",
											"value": "3"
										},
										{
											"key": "next",
											"value": "next1"
										},
										{
											"key": "limit",
											"value": "3"
										}
									]
								},
								"description": "TBD\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/violations/signal?startTime=3&endTime=3&next=next1&limit=3",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"violations",
										"signal"
									],
									"query": [
										{
											"key": "startTime",
											"value": "3"
										},
										{
											"key": "endTime",
											"value": "3"
										},
										{
											"key": "next",
											"value": "next1"
										},
										{
											"key": "limit",
											"value": "3"
										}
									]
								},
								"description": "TBD\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/violations/signal?startTime=3&endTime=3&next=next1&limit=3",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"violations",
										"signal"
									],
									"query": [
										{
											"key": "startTime",
											"value": "3"
										},
										{
											"key": "endTime",
											"value": "3"
										},
										{
											"key": "next",
											"value": "next1"
										},
										{
											"key": "limit",
											"value": "3"
										}
									]
								},
								"description": "TBD\n"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/dlp/violations/signal?startTime=3&endTime=3&next=next1&limit=3",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"dlp",
										"violations",
										"signal"
									],
									"query": [
										{
											"key": "startTime",
											"value": "3"
										},
										{
											"key": "endTime",
											"value": "3"
										},
										{
											"key": "next",
											"value": "next1"
										},
										{
											"key": "limit",
											"value": "3"
										}
									]
								},
								"description": "TBD\n"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"violations\": [\r\n    {\r\n      \"violation\": {\r\n        \"enforcementEventID\": \"enforcementEventID44\",\r\n        \"entityID\": \"entityID44\",\r\n        \"createTime\": 114,\r\n        \"lastModified\": 114,\r\n        \"requesterId\": 114,\r\n        \"matchedPolicies\": [\r\n          {\r\n            \"id\": \"id44\",\r\n            \"version\": \"version44\",\r\n            \"policyName\": \"policyName44\",\r\n            \"type\": \"type44\",\r\n            \"terms\": \"terms44\",\r\n            \"diagnostic\": \"diagnostic44\"\r\n          }\r\n        ],\r\n        \"action\": \"action44\",\r\n        \"outcome\": {\r\n          \"type\": \"type44\"\r\n        },\r\n        \"version\": \"version44\",\r\n        \"ignoreDLPwarning\": false\r\n      },\r\n      \"signal\": {\r\n        \"name\": \"name44\",\r\n        \"rules\": \"rules44\",\r\n        \"diagnostic\": \"diagnostic44\"\r\n      }\r\n    }\r\n  ],\r\n  \"nextOffset\": \"nextOffset44\"\r\n}"
						}
					]
				},
				{
					"name": "Get violations as a result of policy enforcement on messages.1",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{agentUrl}}/agent/v3/dlp/violations/message?startTime=3&endTime=3&next=next1&limit=3",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v3",
								"dlp",
								"violations",
								"message"
							],
							"query": [
								{
									"key": "startTime",
									"value": "3"
								},
								{
									"key": "endTime",
									"value": "3"
								},
								{
									"key": "next",
									"value": "next1"
								},
								{
									"key": "limit",
									"value": "3"
								}
							]
						},
						"description": "Retrieves DLP v3 message related violations for a given time range"
					},
					"response": [
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/violations/message?startTime=3&endTime=3&next=next1&limit=3",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"violations",
										"message"
									],
									"query": [
										{
											"key": "startTime",
											"value": "3"
										},
										{
											"key": "endTime",
											"value": "3"
										},
										{
											"key": "next",
											"value": "next1"
										},
										{
											"key": "limit",
											"value": "3"
										}
									]
								},
								"description": "Retrieves DLP v3 message related violations for a given time range"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/violations/message?startTime=3&endTime=3&next=next1&limit=3",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"violations",
										"message"
									],
									"query": [
										{
											"key": "startTime",
											"value": "3"
										},
										{
											"key": "endTime",
											"value": "3"
										},
										{
											"key": "next",
											"value": "next1"
										},
										{
											"key": "limit",
											"value": "3"
										}
									]
								},
								"description": "Retrieves DLP v3 message related violations for a given time range"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/violations/message?startTime=3&endTime=3&next=next1&limit=3",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"violations",
										"message"
									],
									"query": [
										{
											"key": "startTime",
											"value": "3"
										},
										{
											"key": "endTime",
											"value": "3"
										},
										{
											"key": "next",
											"value": "next1"
										},
										{
											"key": "limit",
											"value": "3"
										}
									]
								},
								"description": "Retrieves DLP v3 message related violations for a given time range"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/violations/message?startTime=3&endTime=3&next=next1&limit=3",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"violations",
										"message"
									],
									"query": [
										{
											"key": "startTime",
											"value": "3"
										},
										{
											"key": "endTime",
											"value": "3"
										},
										{
											"key": "next",
											"value": "next1"
										},
										{
											"key": "limit",
											"value": "3"
										}
									]
								},
								"description": "Retrieves DLP v3 message related violations for a given time range"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"violations\": [\r\n    {\r\n      \"violation\": {\r\n        \"enforcementEventID\": \"enforcementEventID44\",\r\n        \"entityID\": \"entityID44\",\r\n        \"createTime\": 114,\r\n        \"lastModified\": 114,\r\n        \"requesterId\": 114,\r\n        \"details\": [\r\n          {}\r\n        ],\r\n        \"action\": \"action44\",\r\n        \"outcome\": {\r\n          \"type\": \"type44\"\r\n        },\r\n        \"version\": \"version44\",\r\n        \"ignoreDLPwarning\": false\r\n      },\r\n      \"message\": {\r\n        \"messageId\": \"messageId74\",\r\n        \"timestamp\": 192,\r\n        \"message\": \"message74\",\r\n        \"data\": \"data74\",\r\n        \"attachments\": [\r\n          {\r\n            \"id\": \"id74\",\r\n            \"name\": \"name74\",\r\n            \"size\": 192,\r\n            \"images\": [\r\n              {\r\n                \"id\": \"id74\",\r\n                \"dimension\": \"dimension74\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"user\": {\r\n          \"userId\": 192,\r\n          \"firstName\": \"firstName74\",\r\n          \"lastName\": \"lastName74\",\r\n          \"displayName\": \"displayName74\",\r\n          \"email\": \"email74\",\r\n          \"username\": \"username74\"\r\n        },\r\n        \"stream\": {\r\n          \"streamId\": \"streamId74\",\r\n          \"streamType\": \"streamType74\",\r\n          \"roomName\": \"roomName74\",\r\n          \"members\": [\r\n            {\r\n              \"userId\": 192,\r\n              \"firstName\": \"firstName74\",\r\n              \"lastName\": \"lastName74\",\r\n              \"displayName\": \"displayName74\",\r\n              \"email\": \"email74\",\r\n              \"username\": \"username74\"\r\n            }\r\n          ],\r\n          \"external\": false,\r\n          \"crossPod\": false\r\n        },\r\n        \"externalRecipients\": false,\r\n        \"diagnostic\": \"diagnostic74\",\r\n        \"userAgent\": \"userAgent74\",\r\n        \"originalFormat\": \"originalFormat74\",\r\n        \"disclaimer\": \"disclaimer74\"\r\n      },\r\n      \"diagnostic\": \"diagnostic44\"\r\n    }\r\n  ],\r\n  \"nextOffset\": \"nextOffset44\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/violations/message?startTime=3&endTime=3&next=next1&limit=3",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"violations",
										"message"
									],
									"query": [
										{
											"key": "startTime",
											"value": "3"
										},
										{
											"key": "endTime",
											"value": "3"
										},
										{
											"key": "next",
											"value": "next1"
										},
										{
											"key": "limit",
											"value": "3"
										}
									]
								},
								"description": "Retrieves DLP v3 message related violations for a given time range"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						}
					]
				},
				{
					"name": "Get violations as a result of policy enforcement on streams.1",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{agentUrl}}/agent/v3/dlp/violations/stream?startTime=3&endTime=3&next=next1&limit=3",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v3",
								"dlp",
								"violations",
								"stream"
							],
							"query": [
								{
									"key": "startTime",
									"value": "3"
								},
								{
									"key": "endTime",
									"value": "3"
								},
								{
									"key": "next",
									"value": "next1"
								},
								{
									"key": "limit",
									"value": "3"
								}
							]
						},
						"description": "Retrieves DLP v3 signal related violations for a given time range"
					},
					"response": [
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/violations/stream?startTime=3&endTime=3&next=next1&limit=3",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"violations",
										"stream"
									],
									"query": [
										{
											"key": "startTime",
											"value": "3"
										},
										{
											"key": "endTime",
											"value": "3"
										},
										{
											"key": "next",
											"value": "next1"
										},
										{
											"key": "limit",
											"value": "3"
										}
									]
								},
								"description": "Retrieves DLP v3 signal related violations for a given time range"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/violations/stream?startTime=3&endTime=3&next=next1&limit=3",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"violations",
										"stream"
									],
									"query": [
										{
											"key": "startTime",
											"value": "3"
										},
										{
											"key": "endTime",
											"value": "3"
										},
										{
											"key": "next",
											"value": "next1"
										},
										{
											"key": "limit",
											"value": "3"
										}
									]
								},
								"description": "Retrieves DLP v3 signal related violations for a given time range"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"violations\": [\r\n    {\r\n      \"violation\": {\r\n        \"enforcementEventID\": \"enforcementEventID44\",\r\n        \"entityID\": \"entityID44\",\r\n        \"createTime\": 114,\r\n        \"lastModified\": 114,\r\n        \"requesterId\": 114,\r\n        \"details\": [\r\n          {}\r\n        ],\r\n        \"action\": \"action44\",\r\n        \"outcome\": {\r\n          \"type\": \"type44\"\r\n        },\r\n        \"version\": \"version44\",\r\n        \"ignoreDLPwarning\": false\r\n      },\r\n      \"stream\": {\r\n        \"name\": \"name44\",\r\n        \"creatorPrettyName\": \"creatorPrettyName44\",\r\n        \"publicRoom\": false,\r\n        \"crossPod\": false,\r\n        \"allowExternal\": false,\r\n        \"creatorId\": \"creatorId44\",\r\n        \"roomDescription\": \"roomDescription44\",\r\n        \"streamId\": \"streamId44\",\r\n        \"state\": \"state44\",\r\n        \"type\": \"type44\",\r\n        \"lastDisabled\": 114,\r\n        \"memberAddUserEnabled\": false,\r\n        \"active\": false,\r\n        \"discoverable\": false,\r\n        \"readOnly\": false,\r\n        \"copyDisabled\": false,\r\n        \"externalOwned\": false,\r\n        \"sendMessageDisabled\": false,\r\n        \"moderated\": false,\r\n        \"shareHistoryEnabled\": false,\r\n        \"diagnostic\": \"diagnostic44\"\r\n      }\r\n    }\r\n  ],\r\n  \"nextOffset\": \"nextOffset44\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/violations/stream?startTime=3&endTime=3&next=next1&limit=3",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"violations",
										"stream"
									],
									"query": [
										{
											"key": "startTime",
											"value": "3"
										},
										{
											"key": "endTime",
											"value": "3"
										},
										{
											"key": "next",
											"value": "next1"
										},
										{
											"key": "limit",
											"value": "3"
										}
									]
								},
								"description": "Retrieves DLP v3 signal related violations for a given time range"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/violations/stream?startTime=3&endTime=3&next=next1&limit=3",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"violations",
										"stream"
									],
									"query": [
										{
											"key": "startTime",
											"value": "3"
										},
										{
											"key": "endTime",
											"value": "3"
										},
										{
											"key": "next",
											"value": "next1"
										},
										{
											"key": "limit",
											"value": "3"
										}
									]
								},
								"description": "Retrieves DLP v3 signal related violations for a given time range"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/violations/stream?startTime=3&endTime=3&next=next1&limit=3",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"violations",
										"stream"
									],
									"query": [
										{
											"key": "startTime",
											"value": "3"
										},
										{
											"key": "endTime",
											"value": "3"
										},
										{
											"key": "next",
											"value": "next1"
										},
										{
											"key": "limit",
											"value": "3"
										}
									]
								},
								"description": "Retrieves DLP v3 signal related violations for a given time range"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						}
					]
				},
				{
					"name": "Get violations as a result of policy enforcement on signals.1",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{agentUrl}}/agent/v3/dlp/violations/signal?startTime=3&endTime=3&next=next1&limit=3",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v3",
								"dlp",
								"violations",
								"signal"
							],
							"query": [
								{
									"key": "startTime",
									"value": "3"
								},
								{
									"key": "endTime",
									"value": "3"
								},
								{
									"key": "next",
									"value": "next1"
								},
								{
									"key": "limit",
									"value": "3"
								}
							]
						},
						"description": "Retrieves DLP v3 signal related violations for a given time range"
					},
					"response": [
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/violations/signal?startTime=3&endTime=3&next=next1&limit=3",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"violations",
										"signal"
									],
									"query": [
										{
											"key": "startTime",
											"value": "3"
										},
										{
											"key": "endTime",
											"value": "3"
										},
										{
											"key": "next",
											"value": "next1"
										},
										{
											"key": "limit",
											"value": "3"
										}
									]
								},
								"description": "Retrieves DLP v3 signal related violations for a given time range"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/violations/signal?startTime=3&endTime=3&next=next1&limit=3",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"violations",
										"signal"
									],
									"query": [
										{
											"key": "startTime",
											"value": "3"
										},
										{
											"key": "endTime",
											"value": "3"
										},
										{
											"key": "next",
											"value": "next1"
										},
										{
											"key": "limit",
											"value": "3"
										}
									]
								},
								"description": "Retrieves DLP v3 signal related violations for a given time range"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/violations/signal?startTime=3&endTime=3&next=next1&limit=3",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"violations",
										"signal"
									],
									"query": [
										{
											"key": "startTime",
											"value": "3"
										},
										{
											"key": "endTime",
											"value": "3"
										},
										{
											"key": "next",
											"value": "next1"
										},
										{
											"key": "limit",
											"value": "3"
										}
									]
								},
								"description": "Retrieves DLP v3 signal related violations for a given time range"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/violations/signal?startTime=3&endTime=3&next=next1&limit=3",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"violations",
										"signal"
									],
									"query": [
										{
											"key": "startTime",
											"value": "3"
										},
										{
											"key": "endTime",
											"value": "3"
										},
										{
											"key": "next",
											"value": "next1"
										},
										{
											"key": "limit",
											"value": "3"
										}
									]
								},
								"description": "Retrieves DLP v3 signal related violations for a given time range"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"violations\": [\r\n    {\r\n      \"violation\": {\r\n        \"enforcementEventID\": \"enforcementEventID44\",\r\n        \"entityID\": \"entityID44\",\r\n        \"createTime\": 114,\r\n        \"lastModified\": 114,\r\n        \"requesterId\": 114,\r\n        \"details\": [\r\n          {}\r\n        ],\r\n        \"action\": \"action44\",\r\n        \"outcome\": {\r\n          \"type\": \"type44\"\r\n        },\r\n        \"version\": \"version44\",\r\n        \"ignoreDLPwarning\": false\r\n      },\r\n      \"signal\": {\r\n        \"name\": \"name44\",\r\n        \"rules\": \"rules44\",\r\n        \"diagnostic\": \"diagnostic44\"\r\n      }\r\n    }\r\n  ],\r\n  \"nextOffset\": \"nextOffset44\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/violations/signal?startTime=3&endTime=3&next=next1&limit=3",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"violations",
										"signal"
									],
									"query": [
										{
											"key": "startTime",
											"value": "3"
										},
										{
											"key": "endTime",
											"value": "3"
										},
										{
											"key": "next",
											"value": "next1"
										},
										{
											"key": "limit",
											"value": "3"
										}
									]
								},
								"description": "Retrieves DLP v3 signal related violations for a given time range"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						}
					]
				},
				{
					"name": "Get attachments that were sent as part of messages that were flagged by the DLP System.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "text/plain,application/json"
							}
						],
						"url": {
							"raw": "https://{{agentUrl}}/agent/v3/dlp/violation/attachment?fileId=fileId1&violationId=violationId1",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v3",
								"dlp",
								"violation",
								"attachment"
							],
							"query": [
								{
									"key": "fileId",
									"value": "fileId1"
								},
								{
									"key": "violationId",
									"value": "violationId1"
								}
							]
						},
						"description": "Retrieves attachments from related message violations as a base64 encoded String."
					},
					"response": [
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "text/plain,application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/violation/attachment?fileId=fileId1&violationId=violationId1",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"violation",
										"attachment"
									],
									"query": [
										{
											"key": "fileId",
											"value": "fileId1"
										},
										{
											"key": "violationId",
											"value": "violationId1"
										}
									]
								},
								"description": "Retrieves attachments from related message violations as a base64 encoded String."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "text/plain,application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/violation/attachment?fileId=fileId1&violationId=violationId1",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"violation",
										"attachment"
									],
									"query": [
										{
											"key": "fileId",
											"value": "fileId1"
										},
										{
											"key": "violationId",
											"value": "violationId1"
										}
									]
								},
								"description": "Retrieves attachments from related message violations as a base64 encoded String."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "text/plain,application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/violation/attachment?fileId=fileId1&violationId=violationId1",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"violation",
										"attachment"
									],
									"query": [
										{
											"key": "fileId",
											"value": "fileId1"
										},
										{
											"key": "violationId",
											"value": "violationId1"
										}
									]
								},
								"description": "Retrieves attachments from related message violations as a base64 encoded String."
							},
							"status": "Attachment body as Base64 encoded string.",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/octet-stream"
								}
							],
							"cookie": [],
							"body": "response1"
						},
						{
							"name": "Response_404",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "text/plain,application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/violation/attachment?fileId=fileId1&violationId=violationId1",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"violation",
										"attachment"
									],
									"query": [
										{
											"key": "fileId",
											"value": "fileId1"
										},
										{
											"key": "violationId",
											"value": "violationId1"
										}
									]
								},
								"description": "Retrieves attachments from related message violations as a base64 encoded String."
							},
							"status": "Resource not found.",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "text/plain,application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/violation/attachment?fileId=fileId1&violationId=violationId1",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"violation",
										"attachment"
									],
									"query": [
										{
											"key": "fileId",
											"value": "fileId1"
										},
										{
											"key": "violationId",
											"value": "violationId1"
										}
									]
								},
								"description": "Retrieves attachments from related message violations as a base64 encoded String."
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "text/plain,application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v3/dlp/violation/attachment?fileId=fileId1&violationId=violationId1",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v3",
										"dlp",
										"violation",
										"attachment"
									],
									"query": [
										{
											"key": "fileId",
											"value": "fileId1"
										},
										{
											"key": "violationId",
											"value": "violationId1"
										}
									]
								},
								"description": "Retrieves attachments from related message violations as a base64 encoded String."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						}
					]
				}
			]
		},
		{
			"name": "AuditTrail",
			"item": [
				{
					"name": "Get a list of  actions performed by a privileged account acting as privileged user given a period of time.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "keyManagerToken",
								"value": "{{keyManToken}}",
								"description": "Key Manager authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{agentUrl}}/agent/v1/audittrail/privilegeduser?startTimestamp=3&endTimestamp=3&limit=3&initiatorId=3&role=ADMINISTRATOR",
							"protocol": "https",
							"host": [
								"{{agentUrl}}"
							],
							"path": [
								"agent",
								"v1",
								"audittrail",
								"privilegeduser"
							],
							"query": [
								{
									"key": "startTimestamp",
									"value": "3"
								},
								{
									"key": "endTimestamp",
									"value": "3"
								},
								{
									"key": "before",
									"value": "1",
									"disabled": true
								},
								{
									"key": "after",
									"value": "10",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "3"
								},
								{
									"key": "initiatorId",
									"value": "3"
								},
								{
									"key": "role",
									"value": "ADMINISTRATOR"
								}
							]
						},
						"description": "Get a list of actions performed by a privileged account acting as privileged user given a period of time."
					},
					"response": [
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/audittrail/privilegeduser?startTimestamp=3&endTimestamp=3&before=before1&after=after1&limit=3&initiatorId=3&role=role1",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"audittrail",
										"privilegeduser"
									],
									"query": [
										{
											"key": "startTimestamp",
											"value": "3"
										},
										{
											"key": "endTimestamp",
											"value": "3"
										},
										{
											"key": "before",
											"value": "before1"
										},
										{
											"key": "after",
											"value": "after1"
										},
										{
											"key": "limit",
											"value": "3"
										},
										{
											"key": "initiatorId",
											"value": "3"
										},
										{
											"key": "role",
											"value": "role1"
										}
									]
								},
								"description": "Get a list of actions performed by a privileged account acting as privileged user given a period of time."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/audittrail/privilegeduser?startTimestamp=3&endTimestamp=3&before=before1&after=after1&limit=3&initiatorId=3&role=role1",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"audittrail",
										"privilegeduser"
									],
									"query": [
										{
											"key": "startTimestamp",
											"value": "3"
										},
										{
											"key": "endTimestamp",
											"value": "3"
										},
										{
											"key": "before",
											"value": "before1"
										},
										{
											"key": "after",
											"value": "after1"
										},
										{
											"key": "limit",
											"value": "3"
										},
										{
											"key": "initiatorId",
											"value": "3"
										},
										{
											"key": "role",
											"value": "role1"
										}
									]
								},
								"description": "Get a list of actions performed by a privileged account acting as privileged user given a period of time."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/audittrail/privilegeduser?startTimestamp=3&endTimestamp=3&before=before1&after=after1&limit=3&initiatorId=3&role=role1",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"audittrail",
										"privilegeduser"
									],
									"query": [
										{
											"key": "startTimestamp",
											"value": "3"
										},
										{
											"key": "endTimestamp",
											"value": "3"
										},
										{
											"key": "before",
											"value": "before1"
										},
										{
											"key": "after",
											"value": "after1"
										},
										{
											"key": "limit",
											"value": "3"
										},
										{
											"key": "initiatorId",
											"value": "3"
										},
										{
											"key": "role",
											"value": "role1"
										}
									]
								},
								"description": "Get a list of actions performed by a privileged account acting as privileged user given a period of time."
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"items\": [\r\n    {\r\n      \"action\": \"action44\",\r\n      \"actionName\": \"actionName44\",\r\n      \"timestamp\": \"timestamp44\",\r\n      \"initiatorId\": \"initiatorId44\",\r\n      \"initiatorUsername\": \"initiatorUsername44\",\r\n      \"initiatorEmailAddress\": \"initiatorEmailAddress44\"\r\n    }\r\n  ],\r\n  \"pagination\": {\r\n    \"cursors\": {\r\n      \"before\": \"MTAxNTExOTQ1MjAwNzI5NDE=\",\r\n      \"after\": \"NDMyNzQyODI3OTQw\"\r\n    },\r\n    \"previous\": \"https://tenantapi.d.isym.io/v1/tenantinfo?limit=25&before=MTAxNTExOTQ1MjAwNzI5NDE=\",\r\n    \"next\": \"https://tenantapi.d.isym.io/v1/tenantinfo?limit=25&after=NDMyNzQyODI3OTQw\"\r\n  }\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/audittrail/privilegeduser?startTimestamp=3&endTimestamp=3&before=before1&after=after1&limit=3&initiatorId=3&role=role1",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"audittrail",
										"privilegeduser"
									],
									"query": [
										{
											"key": "startTimestamp",
											"value": "3"
										},
										{
											"key": "endTimestamp",
											"value": "3"
										},
										{
											"key": "before",
											"value": "before1"
										},
										{
											"key": "after",
											"value": "after1"
										},
										{
											"key": "limit",
											"value": "3"
										},
										{
											"key": "initiatorId",
											"value": "3"
										},
										{
											"key": "role",
											"value": "role1"
										}
									]
								},
								"description": "Get a list of actions performed by a privileged account acting as privileged user given a period of time."
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "keyManagerToken",
										"value": "{{keyManToken}}",
										"description": "Key Manager authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{agentUrl}}/agent/v1/audittrail/privilegeduser?startTimestamp=3&endTimestamp=3&before=before1&after=after1&limit=3&initiatorId=3&role=role1",
									"protocol": "https",
									"host": [
										"{{agentUrl}}"
									],
									"path": [
										"agent",
										"v1",
										"audittrail",
										"privilegeduser"
									],
									"query": [
										{
											"key": "startTimestamp",
											"value": "3"
										},
										{
											"key": "endTimestamp",
											"value": "3"
										},
										{
											"key": "before",
											"value": "before1"
										},
										{
											"key": "after",
											"value": "after1"
										},
										{
											"key": "limit",
											"value": "3"
										},
										{
											"key": "initiatorId",
											"value": "3"
										},
										{
											"key": "role",
											"value": "role1"
										}
									]
								},
								"description": "Get a list of actions performed by a privileged account acting as privileged user given a period of time."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 167,\r\n  \"message\": \"message5\"\r\n}"
						}
					]
				}
			]
		},
		{
			"name": "Certificates",
			"item": [
				{
					"name": "List all trusted certs",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/companycert/list",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"companycert",
								"list"
							],
							"query": [
								{
									"key": "skip",
									"value": "16",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "16",
									"disabled": true
								}
							]
						},
						"description": "List all trusted certs"
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "List all trusted certs"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "List all trusted certs"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  {\r\n    \"companyCertAttributes\": {\r\n      \"name\": \"name36\",\r\n      \"type\": {\r\n        \"type\": \"USERSIGNING\"\r\n      },\r\n      \"status\": {\r\n        \"type\": \"TRUSTED\"\r\n      }\r\n    },\r\n    \"companyCertInfo\": {\r\n      \"fingerPrint\": \"fingerPrint6\",\r\n      \"issuerFingerPrint\": \"issuerFingerPrint6\",\r\n      \"lastSeen\": 16,\r\n      \"updatedAt\": 16,\r\n      \"updatedBy\": 16,\r\n      \"commonName\": \"commonName6\",\r\n      \"expiryDate\": 16\r\n    }\r\n  }\r\n]"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "List all trusted certs"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "List all trusted certs"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "List all trusted certs"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "Create a company trusted or untrusted certificate. Different from V1 in that we reject expired certificates.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"pem\": \"pem36\",\r\n  \"attributes\": {\r\n    \"name\": \"name36\",\r\n    \"type\": {\r\n      \"type\": \"USERSIGNING\"\r\n    },\r\n    \"status\": {\r\n      \"type\": \"TRUSTED\"\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v2/companycert/create",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v2",
								"companycert",
								"create"
							]
						},
						"description": "Create a company trusted or untrusted certificate. Different from V1 in that we reject expired certificates."
					},
					"response": [
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"pem\": \"pem36\",\r\n  \"attributes\": {\r\n    \"name\": \"name36\",\r\n    \"type\": {\r\n      \"type\": \"USERSIGNING\"\r\n    },\r\n    \"status\": {\r\n      \"type\": \"TRUSTED\"\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/companycert/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"companycert",
										"create"
									]
								},
								"description": "Create a company trusted or untrusted certificate. Different from V1 in that we reject expired certificates."
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"pem\": \"pem36\",\r\n  \"attributes\": {\r\n    \"name\": \"name36\",\r\n    \"type\": {\r\n      \"type\": \"USERSIGNING\"\r\n    },\r\n    \"status\": {\r\n      \"type\": \"TRUSTED\"\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/companycert/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"companycert",
										"create"
									]
								},
								"description": "Create a company trusted or untrusted certificate. Different from V1 in that we reject expired certificates."
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"companyCertAttributes\": {\r\n    \"name\": \"name36\",\r\n    \"type\": {\r\n      \"type\": \"USERSIGNING\"\r\n    },\r\n    \"status\": {\r\n      \"type\": \"TRUSTED\"\r\n    }\r\n  },\r\n  \"companyCertInfo\": {\r\n    \"fingerPrint\": \"fingerPrint36\",\r\n    \"issuerFingerPrint\": \"issuerFingerPrint36\",\r\n    \"lastSeen\": 94,\r\n    \"updatedAt\": 94,\r\n    \"updatedBy\": 94,\r\n    \"commonName\": \"commonName36\",\r\n    \"expiryDate\": 94\r\n  },\r\n  \"certInfo\": [\r\n    {\r\n      \"name\": \"name36\",\r\n      \"attributes\": [\r\n        {\r\n          \"name\": \"name36\",\r\n          \"value\": \"value36\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"pem\": \"pem36\",\r\n  \"attributes\": {\r\n    \"name\": \"name36\",\r\n    \"type\": {\r\n      \"type\": \"USERSIGNING\"\r\n    },\r\n    \"status\": {\r\n      \"type\": \"TRUSTED\"\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/companycert/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"companycert",
										"create"
									]
								},
								"description": "Create a company trusted or untrusted certificate. Different from V1 in that we reject expired certificates."
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"pem\": \"pem36\",\r\n  \"attributes\": {\r\n    \"name\": \"name36\",\r\n    \"type\": {\r\n      \"type\": \"USERSIGNING\"\r\n    },\r\n    \"status\": {\r\n      \"type\": \"TRUSTED\"\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/companycert/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"companycert",
										"create"
									]
								},
								"description": "Create a company trusted or untrusted certificate. Different from V1 in that we reject expired certificates."
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"pem\": \"pem36\",\r\n  \"attributes\": {\r\n    \"name\": \"name36\",\r\n    \"type\": {\r\n      \"type\": \"USERSIGNING\"\r\n    },\r\n    \"status\": {\r\n      \"type\": \"TRUSTED\"\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/companycert/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"companycert",
										"create"
									]
								},
								"description": "Create a company trusted or untrusted certificate. Different from V1 in that we reject expired certificates."
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "Delete a company certificate",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"id36\"\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/companycert/delete",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"companycert",
								"delete"
							]
						},
						"description": "Delete a company certificate"
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"id36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/delete",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										"delete"
									]
								},
								"description": "Delete a company certificate"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"id36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/delete",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										"delete"
									]
								},
								"description": "Delete a company certificate"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"format\": \"TEXT\",\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"id36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/delete",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										"delete"
									]
								},
								"description": "Delete a company certificate"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"id36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/delete",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										"delete"
									]
								},
								"description": "Delete a company certificate"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"id36\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/delete",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										"delete"
									]
								},
								"description": "Delete a company certificate"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "Get the details of a company certificate",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/companycert/:fingerPrint/get",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"companycert",
								":fingerPrint",
								"get"
							],
							"variable": [
								{
									"key": "fingerPrint",
									"value": "fingerPrint6"
								}
							]
						},
						"description": "Get the details of a company certificate"
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/:fingerPrint/get",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										":fingerPrint",
										"get"
									],
									"variable": [
										{
											"key": "fingerPrint",
											"value": "fingerPrint6"
										}
									]
								},
								"description": "Get the details of a company certificate"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/:fingerPrint/get",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										":fingerPrint",
										"get"
									],
									"variable": [
										{
											"key": "fingerPrint",
											"value": "fingerPrint6"
										}
									]
								},
								"description": "Get the details of a company certificate"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/:fingerPrint/get",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										":fingerPrint",
										"get"
									],
									"variable": [
										{
											"key": "fingerPrint",
											"value": "fingerPrint6"
										}
									]
								},
								"description": "Get the details of a company certificate"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/:fingerPrint/get",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										":fingerPrint",
										"get"
									],
									"variable": [
										{
											"key": "fingerPrint",
											"value": "fingerPrint6"
										}
									]
								},
								"description": "Get the details of a company certificate"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"companyCertAttributes\": {\r\n    \"name\": \"name36\",\r\n    \"type\": {\r\n      \"type\": \"USERSIGNING\"\r\n    },\r\n    \"status\": {\r\n      \"type\": \"TRUSTED\"\r\n    }\r\n  },\r\n  \"companyCertInfo\": {\r\n    \"fingerPrint\": \"fingerPrint36\",\r\n    \"issuerFingerPrint\": \"issuerFingerPrint36\",\r\n    \"lastSeen\": 94,\r\n    \"updatedAt\": 94,\r\n    \"updatedBy\": 94,\r\n    \"commonName\": \"commonName36\",\r\n    \"expiryDate\": 94\r\n  },\r\n  \"certInfo\": [\r\n    {\r\n      \"name\": \"name36\",\r\n      \"attributes\": [\r\n        {\r\n          \"name\": \"name36\",\r\n          \"value\": \"value36\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/:fingerPrint/get",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										":fingerPrint",
										"get"
									],
									"variable": [
										{
											"key": "fingerPrint",
											"value": "fingerPrint6"
										}
									]
								},
								"description": "Get the details of a company certificate"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "Update a company certificate",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"name36\",\r\n  \"type\": {\r\n    \"type\": \"USERSIGNING\"\r\n  },\r\n  \"status\": {\r\n    \"type\": \"TRUSTED\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/companycert/:fingerPrint/update",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"companycert",
								":fingerPrint",
								"update"
							],
							"variable": [
								{
									"key": "fingerPrint",
									"value": "fingerPrint6"
								}
							]
						},
						"description": "Update a company certificate"
					},
					"response": [
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name36\",\r\n  \"type\": {\r\n    \"type\": \"USERSIGNING\"\r\n  },\r\n  \"status\": {\r\n    \"type\": \"TRUSTED\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/:fingerPrint/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										":fingerPrint",
										"update"
									],
									"variable": [
										{
											"key": "fingerPrint",
											"value": "fingerPrint6"
										}
									]
								},
								"description": "Update a company certificate"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name36\",\r\n  \"type\": {\r\n    \"type\": \"USERSIGNING\"\r\n  },\r\n  \"status\": {\r\n    \"type\": \"TRUSTED\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/:fingerPrint/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										":fingerPrint",
										"update"
									],
									"variable": [
										{
											"key": "fingerPrint",
											"value": "fingerPrint6"
										}
									]
								},
								"description": "Update a company certificate"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name36\",\r\n  \"type\": {\r\n    \"type\": \"USERSIGNING\"\r\n  },\r\n  \"status\": {\r\n    \"type\": \"TRUSTED\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/:fingerPrint/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										":fingerPrint",
										"update"
									],
									"variable": [
										{
											"key": "fingerPrint",
											"value": "fingerPrint6"
										}
									]
								},
								"description": "Update a company certificate"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name36\",\r\n  \"type\": {\r\n    \"type\": \"USERSIGNING\"\r\n  },\r\n  \"status\": {\r\n    \"type\": \"TRUSTED\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/:fingerPrint/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										":fingerPrint",
										"update"
									],
									"variable": [
										{
											"key": "fingerPrint",
											"value": "fingerPrint6"
										}
									]
								},
								"description": "Update a company certificate"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"name36\",\r\n  \"type\": {\r\n    \"type\": \"USERSIGNING\"\r\n  },\r\n  \"status\": {\r\n    \"type\": \"TRUSTED\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/:fingerPrint/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										":fingerPrint",
										"update"
									],
									"variable": [
										{
											"key": "fingerPrint",
											"value": "fingerPrint6"
										}
									]
								},
								"description": "Update a company certificate"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"format\": \"TEXT\",\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "Return a list of all certificates which were verified to the cert whose\nfingerprint is passed.\n",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/companycert/:fingerPrint/issuedBy",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"companycert",
								":fingerPrint",
								"issuedBy"
							],
							"variable": [
								{
									"key": "fingerPrint",
									"value": "fingerPrint6"
								}
							]
						},
						"description": "Return a list of all certificates which were verified to the cert whose\nfingerprint is passed.\n"
					},
					"response": [
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/:fingerPrint/issuedBy",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										":fingerPrint",
										"issuedBy"
									],
									"variable": [
										{
											"key": "fingerPrint",
											"value": "fingerPrint6"
										}
									]
								},
								"description": "Return a list of all certificates which were verified to the cert whose\nfingerprint is passed.\n"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  {\r\n    \"companyCertAttributes\": {\r\n      \"name\": \"name36\",\r\n      \"type\": {\r\n        \"type\": \"USERSIGNING\"\r\n      },\r\n      \"status\": {\r\n        \"type\": \"TRUSTED\"\r\n      }\r\n    },\r\n    \"companyCertInfo\": {\r\n      \"fingerPrint\": \"fingerPrint6\",\r\n      \"issuerFingerPrint\": \"issuerFingerPrint6\",\r\n      \"lastSeen\": 16,\r\n      \"updatedAt\": 16,\r\n      \"updatedBy\": 16,\r\n      \"commonName\": \"commonName6\",\r\n      \"expiryDate\": 16\r\n    }\r\n  }\r\n]"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/:fingerPrint/issuedBy",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										":fingerPrint",
										"issuedBy"
									],
									"variable": [
										{
											"key": "fingerPrint",
											"value": "fingerPrint6"
										}
									]
								},
								"description": "Return a list of all certificates which were verified to the cert whose\nfingerprint is passed.\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/:fingerPrint/issuedBy",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										":fingerPrint",
										"issuedBy"
									],
									"variable": [
										{
											"key": "fingerPrint",
											"value": "fingerPrint6"
										}
									]
								},
								"description": "Return a list of all certificates which were verified to the cert whose\nfingerprint is passed.\n"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/:fingerPrint/issuedBy",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										":fingerPrint",
										"issuedBy"
									],
									"variable": [
										{
											"key": "fingerPrint",
											"value": "fingerPrint6"
										}
									]
								},
								"description": "Return a list of all certificates which were verified to the cert whose\nfingerprint is passed.\n"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/:fingerPrint/issuedBy",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										":fingerPrint",
										"issuedBy"
									],
									"variable": [
										{
											"key": "fingerPrint",
											"value": "fingerPrint6"
										}
									]
								},
								"description": "Return a list of all certificates which were verified to the cert whose\nfingerprint is passed.\n"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "List all trusted certs1",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/companycert/podmanaged/list",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"companycert",
								"podmanaged",
								"list"
							],
							"query": [
								{
									"key": "skip",
									"value": "16",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "16",
									"disabled": true
								}
							]
						},
						"description": "List all trusted certs"
					},
					"response": [
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/podmanaged/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										"podmanaged",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "List all trusted certs"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/podmanaged/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										"podmanaged",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "List all trusted certs"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/podmanaged/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										"podmanaged",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "List all trusted certs"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/podmanaged/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										"podmanaged",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "List all trusted certs"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/podmanaged/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										"podmanaged",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "List all trusted certs"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  {\r\n    \"companyCertAttributes\": {\r\n      \"name\": \"name36\",\r\n      \"type\": {\r\n        \"type\": \"USERSIGNING\"\r\n      },\r\n      \"status\": {\r\n        \"type\": \"TRUSTED\"\r\n      }\r\n    },\r\n    \"companyCertInfo\": {\r\n      \"fingerPrint\": \"fingerPrint6\",\r\n      \"issuerFingerPrint\": \"issuerFingerPrint6\",\r\n      \"lastSeen\": 16,\r\n      \"updatedAt\": 16,\r\n      \"updatedBy\": 16,\r\n      \"commonName\": \"commonName6\",\r\n      \"expiryDate\": 16\r\n    }\r\n  }\r\n]"
						}
					]
				},
				{
					"name": "List all certs of the given types",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"type\": \"USERSIGNING\"\r\n  }\r\n]"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/companycert/type/list?skip=16&limit=16",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"companycert",
								"type",
								"list"
							],
							"query": [
								{
									"key": "skip",
									"value": "16"
								},
								{
									"key": "limit",
									"value": "16"
								}
							]
						},
						"description": "List all certs of the given types"
					},
					"response": [
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"type\": \"USERSIGNING\"\r\n  }\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/type/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										"type",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "List all certs of the given types"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  {\r\n    \"companyCertAttributes\": {\r\n      \"name\": \"name36\",\r\n      \"type\": {\r\n        \"type\": \"USERSIGNING\"\r\n      },\r\n      \"status\": {\r\n        \"type\": \"TRUSTED\"\r\n      }\r\n    },\r\n    \"companyCertInfo\": {\r\n      \"fingerPrint\": \"fingerPrint6\",\r\n      \"issuerFingerPrint\": \"issuerFingerPrint6\",\r\n      \"lastSeen\": 16,\r\n      \"updatedAt\": 16,\r\n      \"updatedBy\": 16,\r\n      \"commonName\": \"commonName6\",\r\n      \"expiryDate\": 16\r\n    }\r\n  }\r\n]"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"type\": \"USERSIGNING\"\r\n  }\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/type/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										"type",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "List all certs of the given types"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"type\": \"USERSIGNING\"\r\n  }\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/type/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										"type",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "List all certs of the given types"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"type\": \"USERSIGNING\"\r\n  }\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/type/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										"type",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "List all certs of the given types"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"type\": \"USERSIGNING\"\r\n  }\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/companycert/type/list?skip=16&limit=16",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"companycert",
										"type",
										"list"
									],
									"query": [
										{
											"key": "skip",
											"value": "16"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								},
								"description": "List all certs of the given types"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				}
			]
		},
		{
			"name": "Application",
			"item": [
				{
					"name": "[Admin] Create a new app",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Session authentication token.",
								"key": "sessionToken",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"applicationInfo\": {\r\n        \"appId\": \"appId6\",\r\n        \"name\": \"name6\",\r\n        \"appUrl\": \"https://appUrl6\",\r\n        \"domain\": \"appUrl6\",\r\n        \"publisher\": \"publisher6\"\r\n    },\r\n    \"iconUrl\": \"https://iconUrl6\",\r\n    \"description\": \"description6\",\r\n    \"allowOrigins\": \"allowOrigins6\",\r\n    \"authenticationKeys\": {\r\n        \"current\": {\r\n            \"key\": \"-----BEGIN PUBLIC KEY-----\\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAw7pR1tx76ky8z22H/eTx\\nmLrhY853RsHVXndZH/W5tsWLIL4vEDQZbRHoQNbJmxYjDpUPSfbKeAH+6AXVIZNi\\n6ZjhPqJhZLLupIUm5UX2qucX6VU8sv9P58dOJTn7Lyn1fFL/7o9DxLjuxRil23X9\\nazujQh4CumDeg7PoBTuVN0dWRHMvsHbmW5l7O1lEvbLa3daEoa8/utmIdUxknhyl\\naB+6636sV16xiZSsS/+j08HcAuBUeBRk+Ir3vw5dMY6oZa+lrxePqbCJjfc3ZjJa\\nHqNkIoIEXfRcPjmi9pZGxZiIp8ZFJLFtLdY812w2NxCgYTz7ZItnALgCaAQGgt1m\\nG4NXYvd5SbSWWX1F\\nP19Rsj0obnAU2lu4F54Hlzs2WdanaznNICfDN1kNRynCfCJ\\nGC0QwuExGAubertjMqOTN4m0jrD+0qxGA6nFcEQHYMYQSZVOZn45n9gfuzgueOrB\\nOgfj6GQ3iMaOoh++8D/Fu5H1DBSsaMPL8WHAR74Pq1Ipr\\nst/jj4J2/OG/9b1gC+\\nP2IR7AakXOXjOoWVcaWo8ke17kf6s3GtNhzdJMP4/9rYfWA2JcMEZseZsP2CHTsW\\nKrqR5YzwRlUnwch0njOHkAkzE72VpME7ZwZgjL9Aez1UOxBislztox5GOUAS7R3q\\nK7RVcJURBoevlOp6n4YoPp0CAwEAAQ==\\n-----END PUBLIC KEY-----\"\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/app/create",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"app",
								"create"
							]
						},
						"description": "Creates a new app"
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Session authentication token.",
										"key": "sessionToken",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationInfo\": {\r\n    \"appId\": \"appId6\",\r\n    \"name\": \"name6\",\r\n    \"appUrl\": \"appUrl6\",\r\n    \"domain\": \"domain6\",\r\n    \"publisher\": \"publisher6\"\r\n  },\r\n  \"iconUrl\": \"iconUrl6\",\r\n  \"description\": \"description6\",\r\n  \"allowOrigins\": \"allowOrigins6\",\r\n  \"permissions\": [\r\n    \"permissions6\"\r\n  ],\r\n  \"cert\": \"cert6\",\r\n  \"authenticationKeys\": {\r\n    \"current\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    },\r\n    \"previous\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										"create"
									]
								},
								"description": "Creates a new app"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Session authentication token.",
										"key": "sessionToken",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationInfo\": {\r\n    \"appId\": \"appId6\",\r\n    \"name\": \"name6\",\r\n    \"appUrl\": \"appUrl6\",\r\n    \"domain\": \"domain6\",\r\n    \"publisher\": \"publisher6\"\r\n  },\r\n  \"iconUrl\": \"iconUrl6\",\r\n  \"description\": \"description6\",\r\n  \"allowOrigins\": \"allowOrigins6\",\r\n  \"permissions\": [\r\n    \"permissions6\"\r\n  ],\r\n  \"cert\": \"cert6\",\r\n  \"authenticationKeys\": {\r\n    \"current\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    },\r\n    \"previous\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										"create"
									]
								},
								"description": "Creates a new app"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Session authentication token.",
										"key": "sessionToken",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationInfo\": {\r\n    \"appId\": \"appId6\",\r\n    \"name\": \"name6\",\r\n    \"appUrl\": \"appUrl6\",\r\n    \"domain\": \"domain6\",\r\n    \"publisher\": \"publisher6\"\r\n  },\r\n  \"iconUrl\": \"iconUrl6\",\r\n  \"description\": \"description6\",\r\n  \"allowOrigins\": \"allowOrigins6\",\r\n  \"permissions\": [\r\n    \"permissions6\"\r\n  ],\r\n  \"cert\": \"cert6\",\r\n  \"authenticationKeys\": {\r\n    \"current\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    },\r\n    \"previous\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										"create"
									]
								},
								"description": "Creates a new app"
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Session authentication token.",
										"key": "sessionToken",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationInfo\": {\r\n    \"appId\": \"appId6\",\r\n    \"name\": \"name6\",\r\n    \"appUrl\": \"appUrl6\",\r\n    \"domain\": \"domain6\",\r\n    \"publisher\": \"publisher6\"\r\n  },\r\n  \"iconUrl\": \"iconUrl6\",\r\n  \"description\": \"description6\",\r\n  \"allowOrigins\": \"allowOrigins6\",\r\n  \"permissions\": [\r\n    \"permissions6\"\r\n  ],\r\n  \"cert\": \"cert6\",\r\n  \"authenticationKeys\": {\r\n    \"current\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    },\r\n    \"previous\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										"create"
									]
								},
								"description": "Creates a new app"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Session authentication token.",
										"key": "sessionToken",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationInfo\": {\r\n    \"appId\": \"appId6\",\r\n    \"name\": \"name6\",\r\n    \"appUrl\": \"appUrl6\",\r\n    \"domain\": \"domain6\",\r\n    \"publisher\": \"publisher6\"\r\n  },\r\n  \"iconUrl\": \"iconUrl6\",\r\n  \"description\": \"description6\",\r\n  \"allowOrigins\": \"allowOrigins6\",\r\n  \"permissions\": [\r\n    \"permissions6\"\r\n  ],\r\n  \"cert\": \"cert6\",\r\n  \"authenticationKeys\": {\r\n    \"current\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    },\r\n    \"previous\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										"create"
									]
								},
								"description": "Creates a new app"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"applicationInfo\": {\r\n    \"appId\": \"appId6\",\r\n    \"name\": \"name6\",\r\n    \"appUrl\": \"appUrl6\",\r\n    \"domain\": \"domain6\",\r\n    \"publisher\": \"publisher6\"\r\n  },\r\n  \"iconUrl\": \"iconUrl6\",\r\n  \"description\": \"description6\",\r\n  \"allowOrigins\": \"allowOrigins6\",\r\n  \"permissions\": [\r\n    \"permissions6\"\r\n  ],\r\n  \"cert\": \"cert6\",\r\n  \"authenticationKeys\": {\r\n    \"current\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    },\r\n    \"previous\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    }\r\n  }\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Create a new app Copy",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Session authentication token.",
								"key": "sessionToken",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"applicationInfo\": {\r\n    \"appId\": \"appId6\",\r\n    \"name\": \"name6\",\r\n    \"appUrl\": \"appUrl6\",\r\n    \"domain\": \"domain6\",\r\n    \"publisher\": \"publisher6\"\r\n  },\r\n  \"iconUrl\": \"iconUrl6\",\r\n  \"description\": \"description6\",\r\n  \"allowOrigins\": \"allowOrigins6\",\r\n  \"permissions\": [\r\n    \"permissions6\"\r\n  ],\r\n  \"cert\": \"cert6\",\r\n  \"authenticationKeys\": {\r\n    \"current\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    },\r\n    \"previous\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/app/create",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"app",
								"create"
							]
						},
						"description": "Creates a new app"
					},
					"response": [
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Session authentication token.",
										"key": "sessionToken",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationInfo\": {\r\n    \"appId\": \"appId6\",\r\n    \"name\": \"name6\",\r\n    \"appUrl\": \"appUrl6\",\r\n    \"domain\": \"domain6\",\r\n    \"publisher\": \"publisher6\"\r\n  },\r\n  \"iconUrl\": \"iconUrl6\",\r\n  \"description\": \"description6\",\r\n  \"allowOrigins\": \"allowOrigins6\",\r\n  \"permissions\": [\r\n    \"permissions6\"\r\n  ],\r\n  \"cert\": \"cert6\",\r\n  \"authenticationKeys\": {\r\n    \"current\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    },\r\n    \"previous\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										"create"
									]
								},
								"description": "Creates a new app"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"applicationInfo\": {\r\n    \"appId\": \"appId6\",\r\n    \"name\": \"name6\",\r\n    \"appUrl\": \"appUrl6\",\r\n    \"domain\": \"domain6\",\r\n    \"publisher\": \"publisher6\"\r\n  },\r\n  \"iconUrl\": \"iconUrl6\",\r\n  \"description\": \"description6\",\r\n  \"allowOrigins\": \"allowOrigins6\",\r\n  \"permissions\": [\r\n    \"permissions6\"\r\n  ],\r\n  \"cert\": \"cert6\",\r\n  \"authenticationKeys\": {\r\n    \"current\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    },\r\n    \"previous\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    }\r\n  }\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Session authentication token.",
										"key": "sessionToken",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationInfo\": {\r\n    \"appId\": \"appId6\",\r\n    \"name\": \"name6\",\r\n    \"appUrl\": \"appUrl6\",\r\n    \"domain\": \"domain6\",\r\n    \"publisher\": \"publisher6\"\r\n  },\r\n  \"iconUrl\": \"iconUrl6\",\r\n  \"description\": \"description6\",\r\n  \"allowOrigins\": \"allowOrigins6\",\r\n  \"permissions\": [\r\n    \"permissions6\"\r\n  ],\r\n  \"cert\": \"cert6\",\r\n  \"authenticationKeys\": {\r\n    \"current\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    },\r\n    \"previous\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										"create"
									]
								},
								"description": "Creates a new app"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Session authentication token.",
										"key": "sessionToken",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationInfo\": {\r\n    \"appId\": \"appId6\",\r\n    \"name\": \"name6\",\r\n    \"appUrl\": \"appUrl6\",\r\n    \"domain\": \"domain6\",\r\n    \"publisher\": \"publisher6\"\r\n  },\r\n  \"iconUrl\": \"iconUrl6\",\r\n  \"description\": \"description6\",\r\n  \"allowOrigins\": \"allowOrigins6\",\r\n  \"permissions\": [\r\n    \"permissions6\"\r\n  ],\r\n  \"cert\": \"cert6\",\r\n  \"authenticationKeys\": {\r\n    \"current\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    },\r\n    \"previous\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										"create"
									]
								},
								"description": "Creates a new app"
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Session authentication token.",
										"key": "sessionToken",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationInfo\": {\r\n    \"appId\": \"appId6\",\r\n    \"name\": \"name6\",\r\n    \"appUrl\": \"appUrl6\",\r\n    \"domain\": \"domain6\",\r\n    \"publisher\": \"publisher6\"\r\n  },\r\n  \"iconUrl\": \"iconUrl6\",\r\n  \"description\": \"description6\",\r\n  \"allowOrigins\": \"allowOrigins6\",\r\n  \"permissions\": [\r\n    \"permissions6\"\r\n  ],\r\n  \"cert\": \"cert6\",\r\n  \"authenticationKeys\": {\r\n    \"current\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    },\r\n    \"previous\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										"create"
									]
								},
								"description": "Creates a new app"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Session authentication token.",
										"key": "sessionToken",
										"value": "{{sessionToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationInfo\": {\r\n    \"appId\": \"appId6\",\r\n    \"name\": \"name6\",\r\n    \"appUrl\": \"appUrl6\",\r\n    \"domain\": \"domain6\",\r\n    \"publisher\": \"publisher6\"\r\n  },\r\n  \"iconUrl\": \"iconUrl6\",\r\n  \"description\": \"description6\",\r\n  \"allowOrigins\": \"allowOrigins6\",\r\n  \"permissions\": [\r\n    \"permissions6\"\r\n  ],\r\n  \"cert\": \"cert6\",\r\n  \"authenticationKeys\": {\r\n    \"current\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    },\r\n    \"previous\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/create",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										"create"
									]
								},
								"description": "Creates a new app"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Update an app",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"applicationInfo\": {\r\n    \"appId\": \"appId6\",\r\n    \"name\": \"name6\",\r\n    \"appUrl\": \"appUrl6\",\r\n    \"domain\": \"domain6\",\r\n    \"publisher\": \"publisher6\"\r\n  },\r\n  \"iconUrl\": \"iconUrl6\",\r\n  \"description\": \"description6\",\r\n  \"allowOrigins\": \"allowOrigins6\",\r\n  \"permissions\": [\r\n    \"permissions6\"\r\n  ],\r\n  \"cert\": \"cert6\",\r\n  \"authenticationKeys\": {\r\n    \"current\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    },\r\n    \"previous\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/app/:id/update",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"app",
								":id",
								"update"
							],
							"variable": [
								{
									"key": "id",
									"value": "id46"
								}
							]
						},
						"description": "Updates a app"
					},
					"response": [
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationInfo\": {\r\n    \"appId\": \"appId6\",\r\n    \"name\": \"name6\",\r\n    \"appUrl\": \"appUrl6\",\r\n    \"domain\": \"domain6\",\r\n    \"publisher\": \"publisher6\"\r\n  },\r\n  \"iconUrl\": \"iconUrl6\",\r\n  \"description\": \"description6\",\r\n  \"allowOrigins\": \"allowOrigins6\",\r\n  \"permissions\": [\r\n    \"permissions6\"\r\n  ],\r\n  \"cert\": \"cert6\",\r\n  \"authenticationKeys\": {\r\n    \"current\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    },\r\n    \"previous\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/:id/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										":id",
										"update"
									],
									"variable": [
										{
											"key": "id",
											"value": "id46"
										}
									]
								},
								"description": "Updates a app"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationInfo\": {\r\n    \"appId\": \"appId6\",\r\n    \"name\": \"name6\",\r\n    \"appUrl\": \"appUrl6\",\r\n    \"domain\": \"domain6\",\r\n    \"publisher\": \"publisher6\"\r\n  },\r\n  \"iconUrl\": \"iconUrl6\",\r\n  \"description\": \"description6\",\r\n  \"allowOrigins\": \"allowOrigins6\",\r\n  \"permissions\": [\r\n    \"permissions6\"\r\n  ],\r\n  \"cert\": \"cert6\",\r\n  \"authenticationKeys\": {\r\n    \"current\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    },\r\n    \"previous\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/:id/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										":id",
										"update"
									],
									"variable": [
										{
											"key": "id",
											"value": "id46"
										}
									]
								},
								"description": "Updates a app"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationInfo\": {\r\n    \"appId\": \"appId6\",\r\n    \"name\": \"name6\",\r\n    \"appUrl\": \"appUrl6\",\r\n    \"domain\": \"domain6\",\r\n    \"publisher\": \"publisher6\"\r\n  },\r\n  \"iconUrl\": \"iconUrl6\",\r\n  \"description\": \"description6\",\r\n  \"allowOrigins\": \"allowOrigins6\",\r\n  \"permissions\": [\r\n    \"permissions6\"\r\n  ],\r\n  \"cert\": \"cert6\",\r\n  \"authenticationKeys\": {\r\n    \"current\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    },\r\n    \"previous\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/:id/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										":id",
										"update"
									],
									"variable": [
										{
											"key": "id",
											"value": "id46"
										}
									]
								},
								"description": "Updates a app"
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationInfo\": {\r\n    \"appId\": \"appId6\",\r\n    \"name\": \"name6\",\r\n    \"appUrl\": \"appUrl6\",\r\n    \"domain\": \"domain6\",\r\n    \"publisher\": \"publisher6\"\r\n  },\r\n  \"iconUrl\": \"iconUrl6\",\r\n  \"description\": \"description6\",\r\n  \"allowOrigins\": \"allowOrigins6\",\r\n  \"permissions\": [\r\n    \"permissions6\"\r\n  ],\r\n  \"cert\": \"cert6\",\r\n  \"authenticationKeys\": {\r\n    \"current\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    },\r\n    \"previous\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/:id/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										":id",
										"update"
									],
									"variable": [
										{
											"key": "id",
											"value": "id46"
										}
									]
								},
								"description": "Updates a app"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"applicationInfo\": {\r\n    \"appId\": \"appId6\",\r\n    \"name\": \"name6\",\r\n    \"appUrl\": \"appUrl6\",\r\n    \"domain\": \"domain6\",\r\n    \"publisher\": \"publisher6\"\r\n  },\r\n  \"iconUrl\": \"iconUrl6\",\r\n  \"description\": \"description6\",\r\n  \"allowOrigins\": \"allowOrigins6\",\r\n  \"permissions\": [\r\n    \"permissions6\"\r\n  ],\r\n  \"cert\": \"cert6\",\r\n  \"authenticationKeys\": {\r\n    \"current\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    },\r\n    \"previous\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    }\r\n  }\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationInfo\": {\r\n    \"appId\": \"appId6\",\r\n    \"name\": \"name6\",\r\n    \"appUrl\": \"appUrl6\",\r\n    \"domain\": \"domain6\",\r\n    \"publisher\": \"publisher6\"\r\n  },\r\n  \"iconUrl\": \"iconUrl6\",\r\n  \"description\": \"description6\",\r\n  \"allowOrigins\": \"allowOrigins6\",\r\n  \"permissions\": [\r\n    \"permissions6\"\r\n  ],\r\n  \"cert\": \"cert6\",\r\n  \"authenticationKeys\": {\r\n    \"current\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    },\r\n    \"previous\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/:id/update",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										":id",
										"update"
									],
									"variable": [
										{
											"key": "id",
											"value": "id46"
										}
									]
								},
								"description": "Updates a app"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Delete an app",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/app/:id/delete",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"app",
								":id",
								"delete"
							],
							"variable": [
								{
									"key": "id",
									"value": "id46"
								}
							]
						},
						"description": "Deletes a app"
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/:id/delete",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										":id",
										"delete"
									],
									"variable": [
										{
											"key": "id",
											"value": "id46"
										}
									]
								},
								"description": "Deletes a app"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/:id/delete",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										":id",
										"delete"
									],
									"variable": [
										{
											"key": "id",
											"value": "id46"
										}
									]
								},
								"description": "Deletes a app"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/:id/delete",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										":id",
										"delete"
									],
									"variable": [
										{
											"key": "id",
											"value": "id46"
										}
									]
								},
								"description": "Deletes a app"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"format\": \"TEXT\",\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/:id/delete",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										":id",
										"delete"
									],
									"variable": [
										{
											"key": "id",
											"value": "id46"
										}
									]
								},
								"description": "Deletes a app"
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/:id/delete",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										":id",
										"delete"
									],
									"variable": [
										{
											"key": "id",
											"value": "id46"
										}
									]
								},
								"description": "Deletes a app"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Get an app",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/app/:id/get",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"app",
								":id",
								"get"
							],
							"variable": [
								{
									"key": "id",
									"value": "id46"
								}
							]
						},
						"description": "Gets a app"
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/:id/get",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										":id",
										"get"
									],
									"variable": [
										{
											"key": "id",
											"value": "id46"
										}
									]
								},
								"description": "Gets a app"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/:id/get",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										":id",
										"get"
									],
									"variable": [
										{
											"key": "id",
											"value": "id46"
										}
									]
								},
								"description": "Gets a app"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"applicationInfo\": {\r\n    \"appId\": \"appId6\",\r\n    \"name\": \"name6\",\r\n    \"appUrl\": \"appUrl6\",\r\n    \"domain\": \"domain6\",\r\n    \"publisher\": \"publisher6\"\r\n  },\r\n  \"iconUrl\": \"iconUrl6\",\r\n  \"description\": \"description6\",\r\n  \"allowOrigins\": \"allowOrigins6\",\r\n  \"permissions\": [\r\n    \"permissions6\"\r\n  ],\r\n  \"cert\": \"cert6\",\r\n  \"authenticationKeys\": {\r\n    \"current\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    },\r\n    \"previous\": {\r\n      \"key\": \"key6\",\r\n      \"expirationDate\": 16,\r\n      \"action\": \"action6\"\r\n    }\r\n  }\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/:id/get",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										":id",
										"get"
									],
									"variable": [
										{
											"key": "id",
											"value": "id46"
										}
									]
								},
								"description": "Gets a app"
							},
							"status": "Client error.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/:id/get",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										":id",
										"get"
									],
									"variable": [
										{
											"key": "id",
											"value": "id46"
										}
									]
								},
								"description": "Gets a app"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/:id/get",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										":id",
										"get"
									],
									"variable": [
										{
											"key": "id",
											"value": "id46"
										}
									]
								},
								"description": "Gets a app"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				}
			]
		},
		{
			"name": "App Entitlements",
			"item": [
				{
					"name": "[Admin] Get the list of application entitlements for the company",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/app/entitlement/list",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"app",
								"entitlement",
								"list"
							]
						},
						"description": "Get the list of application entitlements for the company"
					},
					"response": [
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/entitlement/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										"entitlement",
										"list"
									]
								},
								"description": "Get the list of application entitlements for the company"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  {\r\n    \"appId\": \"appId36\",\r\n    \"appName\": \"appName36\",\r\n    \"enable\": false,\r\n    \"listed\": false,\r\n    \"install\": false\r\n  }\r\n]"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/entitlement/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										"entitlement",
										"list"
									]
								},
								"description": "Get the list of application entitlements for the company"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/entitlement/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										"entitlement",
										"list"
									]
								},
								"description": "Get the list of application entitlements for the company"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/entitlement/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										"entitlement",
										"list"
									]
								},
								"description": "Get the list of application entitlements for the company"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/entitlement/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										"entitlement",
										"list"
									]
								},
								"description": "Get the list of application entitlements for the company"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Update the application entitlements for the company",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"appId\": \"appId36\",\r\n    \"appName\": \"appName36\",\r\n    \"enable\": false,\r\n    \"listed\": false,\r\n    \"install\": false\r\n  }\r\n]"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/app/entitlement/list",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"app",
								"entitlement",
								"list"
							]
						},
						"description": "Update the application entitlements for the company"
					},
					"response": [
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"appId\": \"appId36\",\r\n    \"appName\": \"appName36\",\r\n    \"enable\": false,\r\n    \"listed\": false,\r\n    \"install\": false\r\n  }\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/entitlement/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										"entitlement",
										"list"
									]
								},
								"description": "Update the application entitlements for the company"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  {\r\n    \"appId\": \"appId36\",\r\n    \"appName\": \"appName36\",\r\n    \"enable\": false,\r\n    \"listed\": false,\r\n    \"install\": false\r\n  }\r\n]"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"appId\": \"appId36\",\r\n    \"appName\": \"appName36\",\r\n    \"enable\": false,\r\n    \"listed\": false,\r\n    \"install\": false\r\n  }\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/entitlement/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										"entitlement",
										"list"
									]
								},
								"description": "Update the application entitlements for the company"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"appId\": \"appId36\",\r\n    \"appName\": \"appName36\",\r\n    \"enable\": false,\r\n    \"listed\": false,\r\n    \"install\": false\r\n  }\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/entitlement/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										"entitlement",
										"list"
									]
								},
								"description": "Update the application entitlements for the company"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"appId\": \"appId36\",\r\n    \"appName\": \"appName36\",\r\n    \"enable\": false,\r\n    \"listed\": false,\r\n    \"install\": false\r\n  }\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/entitlement/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										"entitlement",
										"list"
									]
								},
								"description": "Update the application entitlements for the company"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"appId\": \"appId36\",\r\n    \"appName\": \"appName36\",\r\n    \"enable\": false,\r\n    \"listed\": false,\r\n    \"install\": false\r\n  }\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/app/entitlement/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"app",
										"entitlement",
										"list"
									]
								},
								"description": "Update the application entitlements for the company"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Get the list of application entitlements for this user",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/app/entitlement/list",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"user",
								":uid",
								"app",
								"entitlement",
								"list"
							],
							"variable": [
								{
									"key": "uid",
									"value": "16"
								}
							]
						},
						"description": "Get the list of application entitlements for this user"
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/app/entitlement/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"app",
										"entitlement",
										"list"
									],
									"variable": [
										{
											"key": "uid",
											"value": "16"
										}
									]
								},
								"description": "Get the list of application entitlements for this user"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/app/entitlement/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"app",
										"entitlement",
										"list"
									],
									"variable": [
										{
											"key": "uid",
											"value": "16"
										}
									]
								},
								"description": "Get the list of application entitlements for this user"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/app/entitlement/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"app",
										"entitlement",
										"list"
									],
									"variable": [
										{
											"key": "uid",
											"value": "16"
										}
									]
								},
								"description": "Get the list of application entitlements for this user"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/app/entitlement/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"app",
										"entitlement",
										"list"
									],
									"variable": [
										{
											"key": "uid",
											"value": "16"
										}
									]
								},
								"description": "Get the list of application entitlements for this user"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/app/entitlement/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"app",
										"entitlement",
										"list"
									],
									"variable": [
										{
											"key": "uid",
											"value": "16"
										}
									]
								},
								"description": "Get the list of application entitlements for this user"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  {\r\n    \"appId\": \"appId36\",\r\n    \"appName\": \"appName36\",\r\n    \"listed\": false,\r\n    \"install\": false,\r\n    \"products\": [\r\n      {\r\n        \"appId\": \"appId36\",\r\n        \"name\": \"name36\",\r\n        \"sku\": \"sku36\",\r\n        \"subscribed\": false,\r\n        \"type\": \"type36\"\r\n      }\r\n    ]\r\n  }\r\n]"
						}
					]
				},
				{
					"name": "[Admin] Update the application entitlements for this user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"appId\": \"appId36\",\r\n    \"appName\": \"appName36\",\r\n    \"listed\": false,\r\n    \"install\": false,\r\n    \"products\": [\r\n      {\r\n        \"appId\": \"appId36\",\r\n        \"name\": \"name36\",\r\n        \"sku\": \"sku36\",\r\n        \"subscribed\": false,\r\n        \"type\": \"type36\"\r\n      }\r\n    ]\r\n  }\r\n]"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/app/entitlement/list",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"user",
								":uid",
								"app",
								"entitlement",
								"list"
							],
							"variable": [
								{
									"key": "uid",
									"value": "16"
								}
							]
						},
						"description": "Update the application entitlements for this user"
					},
					"response": [
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"appId\": \"appId36\",\r\n    \"appName\": \"appName36\",\r\n    \"listed\": false,\r\n    \"install\": false,\r\n    \"products\": [\r\n      {\r\n        \"appId\": \"appId36\",\r\n        \"name\": \"name36\",\r\n        \"sku\": \"sku36\",\r\n        \"subscribed\": false,\r\n        \"type\": \"type36\"\r\n      }\r\n    ]\r\n  }\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/app/entitlement/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"app",
										"entitlement",
										"list"
									],
									"variable": [
										{
											"key": "uid",
											"value": "16"
										}
									]
								},
								"description": "Update the application entitlements for this user"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  {\r\n    \"appId\": \"appId36\",\r\n    \"appName\": \"appName36\",\r\n    \"listed\": false,\r\n    \"install\": false,\r\n    \"products\": [\r\n      {\r\n        \"appId\": \"appId36\",\r\n        \"name\": \"name36\",\r\n        \"sku\": \"sku36\",\r\n        \"subscribed\": false,\r\n        \"type\": \"type36\"\r\n      }\r\n    ]\r\n  }\r\n]"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"appId\": \"appId36\",\r\n    \"appName\": \"appName36\",\r\n    \"listed\": false,\r\n    \"install\": false,\r\n    \"products\": [\r\n      {\r\n        \"appId\": \"appId36\",\r\n        \"name\": \"name36\",\r\n        \"sku\": \"sku36\",\r\n        \"subscribed\": false,\r\n        \"type\": \"type36\"\r\n      }\r\n    ]\r\n  }\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/app/entitlement/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"app",
										"entitlement",
										"list"
									],
									"variable": [
										{
											"key": "uid",
											"value": "16"
										}
									]
								},
								"description": "Update the application entitlements for this user"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"appId\": \"appId36\",\r\n    \"appName\": \"appName36\",\r\n    \"listed\": false,\r\n    \"install\": false,\r\n    \"products\": [\r\n      {\r\n        \"appId\": \"appId36\",\r\n        \"name\": \"name36\",\r\n        \"sku\": \"sku36\",\r\n        \"subscribed\": false,\r\n        \"type\": \"type36\"\r\n      }\r\n    ]\r\n  }\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/app/entitlement/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"app",
										"entitlement",
										"list"
									],
									"variable": [
										{
											"key": "uid",
											"value": "16"
										}
									]
								},
								"description": "Update the application entitlements for this user"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"appId\": \"appId36\",\r\n    \"appName\": \"appName36\",\r\n    \"listed\": false,\r\n    \"install\": false,\r\n    \"products\": [\r\n      {\r\n        \"appId\": \"appId36\",\r\n        \"name\": \"name36\",\r\n        \"sku\": \"sku36\",\r\n        \"subscribed\": false,\r\n        \"type\": \"type36\"\r\n      }\r\n    ]\r\n  }\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/app/entitlement/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"app",
										"entitlement",
										"list"
									],
									"variable": [
										{
											"key": "uid",
											"value": "16"
										}
									]
								},
								"description": "Update the application entitlements for this user"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"appId\": \"appId36\",\r\n    \"appName\": \"appName36\",\r\n    \"listed\": false,\r\n    \"install\": false,\r\n    \"products\": [\r\n      {\r\n        \"appId\": \"appId36\",\r\n        \"name\": \"name36\",\r\n        \"sku\": \"sku36\",\r\n        \"subscribed\": false,\r\n        \"type\": \"type36\"\r\n      }\r\n    ]\r\n  }\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/app/entitlement/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"app",
										"entitlement",
										"list"
									],
									"variable": [
										{
											"key": "uid",
											"value": "16"
										}
									]
								},
								"description": "Update the application entitlements for this user"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Partially update the application entitlements for this user",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"appId\": \"appId36\",\r\n    \"appName\": \"appName36\",\r\n    \"listed\": \"REMOVE\",\r\n    \"install\": \"TRUE\",\r\n    \"products\": [\r\n      {\r\n        \"appId\": \"appId36\",\r\n        \"name\": \"name36\",\r\n        \"sku\": \"sku36\",\r\n        \"subscribed\": false,\r\n        \"type\": \"type36\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"appId\": \"appId37\",\r\n    \"appName\": \"appName37\",\r\n    \"install\": \"KEEP\"\r\n  }\r\n]"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/app/entitlement/list",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"user",
								":uid",
								"app",
								"entitlement",
								"list"
							],
							"variable": [
								{
									"key": "uid",
									"value": "16"
								}
							]
						},
						"description": "Partially update the application entitlements for this user"
					},
					"response": [
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"appId\": \"appId36\",\r\n    \"appName\": \"appName36\",\r\n    \"listed\": \"REMOVE\",\r\n    \"install\": \"TRUE\",\r\n    \"products\": [\r\n      {\r\n        \"appId\": \"appId36\",\r\n        \"name\": \"name36\",\r\n        \"sku\": \"sku36\",\r\n        \"subscribed\": false,\r\n        \"type\": \"type36\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"appId\": \"appId37\",\r\n    \"appName\": \"appName37\",\r\n    \"install\": \"KEEP\"\r\n  }\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/app/entitlement/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"app",
										"entitlement",
										"list"
									],
									"variable": [
										{
											"key": "uid",
											"value": "16"
										}
									]
								},
								"description": "Partially update the application entitlements for this user"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  {\r\n    \"appId\": \"appId36\",\r\n    \"appName\": \"appName36\",\r\n    \"listed\": false,\r\n    \"install\": true,\r\n    \"products\": [\r\n      {\r\n        \"appId\": \"appId36\",\r\n        \"name\": \"name36\",\r\n        \"sku\": \"sku36\",\r\n        \"subscribed\": false,\r\n        \"type\": \"type36\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"appId\": \"appId37\",\r\n    \"appName\": \"appName37\",\r\n    \"listed\": false,\r\n    \"install\": false\r\n  }\r\n]"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"appId\": \"appId36\",\r\n    \"appName\": \"appName36\",\r\n    \"listed\": \"REMOVE\",\r\n    \"install\": \"TRUE\",\r\n    \"products\": [\r\n      {\r\n        \"appId\": \"appId36\",\r\n        \"name\": \"name36\",\r\n        \"sku\": \"sku36\",\r\n        \"subscribed\": false,\r\n        \"type\": \"type36\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"appId\": \"appId37\",\r\n    \"appName\": \"appName37\",\r\n    \"install\": \"KEEP\"\r\n  }\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/app/entitlement/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"app",
										"entitlement",
										"list"
									],
									"variable": [
										{
											"key": "uid",
											"value": "16"
										}
									]
								},
								"description": "Partially update the application entitlements for this user"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"appId\": \"appId36\",\r\n    \"appName\": \"appName36\",\r\n    \"listed\": \"REMOVE\",\r\n    \"install\": \"TRUE\",\r\n    \"products\": [\r\n      {\r\n        \"appId\": \"appId36\",\r\n        \"name\": \"name36\",\r\n        \"sku\": \"sku36\",\r\n        \"subscribed\": false,\r\n        \"type\": \"type36\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"appId\": \"appId37\",\r\n    \"appName\": \"appName37\",\r\n    \"install\": \"KEEP\"\r\n  }\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/app/entitlement/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"app",
										"entitlement",
										"list"
									],
									"variable": [
										{
											"key": "uid",
											"value": "16"
										}
									]
								},
								"description": "Partially update the application entitlements for this user"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"appId\": \"appId36\",\r\n    \"appName\": \"appName36\",\r\n    \"listed\": \"REMOVE\",\r\n    \"install\": \"TRUE\",\r\n    \"products\": [\r\n      {\r\n        \"appId\": \"appId36\",\r\n        \"name\": \"name36\",\r\n        \"sku\": \"sku36\",\r\n        \"subscribed\": false,\r\n        \"type\": \"type36\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"appId\": \"appId37\",\r\n    \"appName\": \"appName37\",\r\n    \"install\": \"KEEP\"\r\n  }\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/app/entitlement/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"app",
										"entitlement",
										"list"
									],
									"variable": [
										{
											"key": "uid",
											"value": "16"
										}
									]
								},
								"description": "Partially update the application entitlements for this user"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"appId\": \"appId36\",\r\n    \"appName\": \"appName36\",\r\n    \"listed\": \"REMOVE\",\r\n    \"install\": \"TRUE\",\r\n    \"products\": [\r\n      {\r\n        \"appId\": \"appId36\",\r\n        \"name\": \"name36\",\r\n        \"sku\": \"sku36\",\r\n        \"subscribed\": false,\r\n        \"type\": \"type36\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"appId\": \"appId37\",\r\n    \"appName\": \"appName37\",\r\n    \"install\": \"KEEP\"\r\n  }\r\n]"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/user/:uid/app/entitlement/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"user",
										":uid",
										"app",
										"entitlement",
										"list"
									],
									"variable": [
										{
											"key": "uid",
											"value": "16"
										}
									]
								},
								"description": "Partially update the application entitlements for this user"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				}
			]
		},
		{
			"name": "System",
			"item": [
				{
					"name": "[Admin] Get the full set of Symphony features available for this pod",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/system/features/list",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"system",
								"features",
								"list"
							]
						},
						"description": "Get the full set of Symphony features available for this pod"
					},
					"response": [
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/system/features/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"system",
										"features",
										"list"
									]
								},
								"description": "Get the full set of Symphony features available for this pod"
							},
							"status": "The list of valid feature entitlement names.",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  \"response46\"\r\n]"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/system/features/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"system",
										"features",
										"list"
									]
								},
								"description": "Get the full set of Symphony features available for this pod"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/system/features/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"system",
										"features",
										"list"
									]
								},
								"description": "Get the full set of Symphony features available for this pod"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/system/features/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"system",
										"features",
										"list"
									]
								},
								"description": "Get the full set of Symphony features available for this pod"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/system/features/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"system",
										"features",
										"list"
									]
								},
								"description": "Get the full set of Symphony features available for this pod"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Get a list of all URI protocols supported by the company (pod)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/system/protocols/list",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"system",
								"protocols",
								"list"
							]
						},
						"description": "Get a list of all URI protocols supported by the company (pod)"
					},
					"response": [
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/system/protocols/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"system",
										"protocols",
										"list"
									]
								},
								"description": "Get a list of all URI protocols supported by the company (pod)"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/system/protocols/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"system",
										"protocols",
										"list"
									]
								},
								"description": "Get a list of all URI protocols supported by the company (pod)"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/system/protocols/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"system",
										"protocols",
										"list"
									]
								},
								"description": "Get a list of all URI protocols supported by the company (pod)"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/system/protocols/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"system",
										"protocols",
										"list"
									]
								},
								"description": "Get a list of all URI protocols supported by the company (pod)"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  \"response46\"\r\n]"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/system/protocols/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"system",
										"protocols",
										"list"
									]
								},
								"description": "Get a list of all URI protocols supported by the company (pod)"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "Get a list of URI protocols supported by the company (pod)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v2/system/protocols?skip=0&limit=10",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v2",
								"system",
								"protocols"
							],
							"query": [
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						},
						"description": "Get a list of URI protocols supported by the company (pod)"
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/system/protocols?skip=119&limit=119",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"system",
										"protocols"
									],
									"query": [
										{
											"key": "skip",
											"value": "119"
										},
										{
											"key": "limit",
											"value": "119"
										}
									]
								},
								"description": "Get a list of URI protocols supported by the company (pod)"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/system/protocols?skip=119&limit=119",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"system",
										"protocols"
									],
									"query": [
										{
											"key": "skip",
											"value": "119"
										},
										{
											"key": "limit",
											"value": "119"
										}
									]
								},
								"description": "Get a list of URI protocols supported by the company (pod)"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  \"response46\"\r\n]"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/system/protocols?skip=119&limit=119",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"system",
										"protocols"
									],
									"query": [
										{
											"key": "skip",
											"value": "119"
										},
										{
											"key": "limit",
											"value": "119"
										}
									]
								},
								"description": "Get a list of URI protocols supported by the company (pod)"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/system/protocols?skip=119&limit=119",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"system",
										"protocols"
									],
									"query": [
										{
											"key": "skip",
											"value": "119"
										},
										{
											"key": "limit",
											"value": "119"
										}
									]
								},
								"description": "Get a list of URI protocols supported by the company (pod)"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v2/system/protocols?skip=119&limit=119",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v2",
										"system",
										"protocols"
									],
									"query": [
										{
											"key": "skip",
											"value": "119"
										},
										{
											"key": "limit",
											"value": "119"
										}
									]
								},
								"description": "Get a list of URI protocols supported by the company (pod)"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Add an entry to URI protocols supported by the company (pod)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"scheme\": \"scheme6\"\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/system/protocols",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"system",
								"protocols"
							]
						},
						"description": "Add an entry to URI protocols supported by the company (pod)"
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"scheme\": \"scheme6\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/system/protocols",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"system",
										"protocols"
									]
								},
								"description": "Add an entry to URI protocols supported by the company (pod)"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"scheme\": \"scheme6\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/system/protocols",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"system",
										"protocols"
									]
								},
								"description": "Add an entry to URI protocols supported by the company (pod)"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"scheme\": \"scheme6\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/system/protocols",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"system",
										"protocols"
									]
								},
								"description": "Add an entry to URI protocols supported by the company (pod)"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"scheme\": \"scheme6\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/system/protocols",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"system",
										"protocols"
									]
								},
								"description": "Add an entry to URI protocols supported by the company (pod)"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"scheme\": \"scheme6\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/system/protocols",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"system",
										"protocols"
									]
								},
								"description": "Add an entry to URI protocols supported by the company (pod)"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"scheme\": \"scheme6\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Remove an entry from URI protocols supported by the company (pod)",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/system/protocols/:scheme",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"system",
								"protocols",
								":scheme"
							],
							"variable": [
								{
									"key": "scheme",
									"value": "scheme46"
								}
							]
						},
						"description": "Remove an entry from URI protocols supported by the company (pod)"
					},
					"response": [
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/system/protocols/:scheme",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"system",
										"protocols",
										":scheme"
									],
									"variable": [
										{
											"key": "scheme",
											"value": "scheme46"
										}
									]
								},
								"description": "Remove an entry from URI protocols supported by the company (pod)"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_204",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/system/protocols/:scheme",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"system",
										"protocols",
										":scheme"
									],
									"variable": [
										{
											"key": "scheme",
											"value": "scheme46"
										}
									]
								},
								"description": "Remove an entry from URI protocols supported by the company (pod)"
							},
							"status": "204 response",
							"code": 204,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/system/protocols/:scheme",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"system",
										"protocols",
										":scheme"
									],
									"variable": [
										{
											"key": "scheme",
											"value": "scheme46"
										}
									]
								},
								"description": "Remove an entry from URI protocols supported by the company (pod)"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/system/protocols/:scheme",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"system",
										"protocols",
										":scheme"
									],
									"variable": [
										{
											"key": "scheme",
											"value": "scheme46"
										}
									]
								},
								"description": "Remove an entry from URI protocols supported by the company (pod)"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/system/protocols/:scheme",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"system",
										"protocols",
										":scheme"
									],
									"variable": [
										{
											"key": "scheme",
											"value": "scheme46"
										}
									]
								},
								"description": "Remove an entry from URI protocols supported by the company (pod)"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "[Admin] Get a list of all roles available in the company (pod)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/admin/system/roles/list",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"admin",
								"system",
								"roles",
								"list"
							]
						},
						"description": "Get a list of all roles available in the company (pod)"
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/system/roles/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"system",
										"roles",
										"list"
									]
								},
								"description": "Get a list of all roles available in the company (pod)"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/system/roles/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"system",
										"roles",
										"list"
									]
								},
								"description": "Get a list of all roles available in the company (pod)"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/system/roles/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"system",
										"roles",
										"list"
									]
								},
								"description": "Get a list of all roles available in the company (pod)"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  {\r\n    \"id\": \"id36\",\r\n    \"name\": \"name36\",\r\n    \"userTypes\": [\r\n      \"userTypes36\"\r\n    ],\r\n    \"optionalActions\": [\r\n      \"optionalActions36\"\r\n    ]\r\n  }\r\n]"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/system/roles/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"system",
										"roles",
										"list"
									]
								},
								"description": "Get a list of all roles available in the company (pod)"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/admin/system/roles/list",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"admin",
										"system",
										"roles",
										"list"
									]
								},
								"description": "Get a list of all roles available in the company (pod)"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "listAllowedFileExtensions",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/file_ext/v1/allowed_extensions?limit=100",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"file_ext",
								"v1",
								"allowed_extensions"
							],
							"query": [
								{
									"key": "limit",
									"value": "100"
								},
								{
									"key": "before",
									"value": "before46",
									"disabled": true
								},
								{
									"key": "after",
									"value": "after46",
									"disabled": true
								}
							]
						},
						"description": "Provides a RESTful API to iterate all file extensions configured by the tenant admin\nthat are allowed for the upload.  Pagination of this list is managed through a\ncombination of the optional request parameters and service-side managed maximums.\n\nPagination of the results is provided through the before or after input paramters\nand presented through the opaque cursor values provided as output from a previous\nresponse.  Only one of before or after or neither may be provided.\n\nDO NOT store cursors. Cursors can quickly become invalid if items are added or deleted.\nUse them only during a short-period of time that you are traversing the list.\n"
					},
					"response": [
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/file_ext/v1/allowed_extensions?limit=119&before=before46&after=after46",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"file_ext",
										"v1",
										"allowed_extensions"
									],
									"query": [
										{
											"key": "limit",
											"value": "119"
										},
										{
											"key": "before",
											"value": "before46"
										},
										{
											"key": "after",
											"value": "after46"
										}
									]
								},
								"description": "Provides a RESTful API to iterate all file extensions configured by the tenant admin\nthat are allowed for the upload.  Pagination of this list is managed through a\ncombination of the optional request parameters and service-side managed maximums.\n\nPagination of the results is provided through the before or after input paramters\nand presented through the opaque cursor values provided as output from a previous\nresponse.  Only one of before or after or neither may be provided.\n\nDO NOT store cursors. Cursors can quickly become invalid if items are added or deleted.\nUse them only during a short-period of time that you are traversing the list.\n"
							},
							"status": "Authorization is not provided to this request\n",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_503",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/file_ext/v1/allowed_extensions?limit=119&before=before46&after=after46",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"file_ext",
										"v1",
										"allowed_extensions"
									],
									"query": [
										{
											"key": "limit",
											"value": "119"
										},
										{
											"key": "before",
											"value": "before46"
										},
										{
											"key": "after",
											"value": "after46"
										}
									]
								},
								"description": "Provides a RESTful API to iterate all file extensions configured by the tenant admin\nthat are allowed for the upload.  Pagination of this list is managed through a\ncombination of the optional request parameters and service-side managed maximums.\n\nPagination of the results is provided through the before or after input paramters\nand presented through the opaque cursor values provided as output from a previous\nresponse.  Only one of before or after or neither may be provided.\n\nDO NOT store cursors. Cursors can quickly become invalid if items are added or deleted.\nUse them only during a short-period of time that you are traversing the list.\n"
							},
							"status": "Temporarily unable to handle request - could be due to service overload or maintenance\n",
							"code": 503,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/file_ext/v1/allowed_extensions?limit=119&before=before46&after=after46",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"file_ext",
										"v1",
										"allowed_extensions"
									],
									"query": [
										{
											"key": "limit",
											"value": "119"
										},
										{
											"key": "before",
											"value": "before46"
										},
										{
											"key": "after",
											"value": "after46"
										}
									]
								},
								"description": "Provides a RESTful API to iterate all file extensions configured by the tenant admin\nthat are allowed for the upload.  Pagination of this list is managed through a\ncombination of the optional request parameters and service-side managed maximums.\n\nPagination of the results is provided through the before or after input paramters\nand presented through the opaque cursor values provided as output from a previous\nresponse.  Only one of before or after or neither may be provided.\n\nDO NOT store cursors. Cursors can quickly become invalid if items are added or deleted.\nUse them only during a short-period of time that you are traversing the list.\n"
							},
							"status": "Unexpected service error - a retry may work\n",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/file_ext/v1/allowed_extensions?limit=119&before=before46&after=after46",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"file_ext",
										"v1",
										"allowed_extensions"
									],
									"query": [
										{
											"key": "limit",
											"value": "119"
										},
										{
											"key": "before",
											"value": "before46"
										},
										{
											"key": "after",
											"value": "after46"
										}
									]
								},
								"description": "Provides a RESTful API to iterate all file extensions configured by the tenant admin\nthat are allowed for the upload.  Pagination of this list is managed through a\ncombination of the optional request parameters and service-side managed maximums.\n\nPagination of the results is provided through the before or after input paramters\nand presented through the opaque cursor values provided as output from a previous\nresponse.  Only one of before or after or neither may be provided.\n\nDO NOT store cursors. Cursors can quickly become invalid if items are added or deleted.\nUse them only during a short-period of time that you are traversing the list.\n"
							},
							"status": "Authentication was not provided\n",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/file_ext/v1/allowed_extensions?limit=119&before=before46&after=after46",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"file_ext",
										"v1",
										"allowed_extensions"
									],
									"query": [
										{
											"key": "limit",
											"value": "119"
										},
										{
											"key": "before",
											"value": "before46"
										},
										{
											"key": "after",
											"value": "after46"
										}
									]
								},
								"description": "Provides a RESTful API to iterate all file extensions configured by the tenant admin\nthat are allowed for the upload.  Pagination of this list is managed through a\ncombination of the optional request parameters and service-side managed maximums.\n\nPagination of the results is provided through the before or after input paramters\nand presented through the opaque cursor values provided as output from a previous\nresponse.  Only one of before or after or neither may be provided.\n\nDO NOT store cursors. Cursors can quickly become invalid if items are added or deleted.\nUse them only during a short-period of time that you are traversing the list.\n"
							},
							"status": "Requested sequence of file extensions object records with the page size\nlimited by the optional limit paramter or the service-specific maximum\nlimit offered.\n",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"data\": [\r\n    {\r\n      \"extension\": \".txt\",\r\n      \"scope_internal\": false,\r\n      \"scope_external\": false,\r\n      \"source\": \"SYSTEM\"\r\n    }\r\n  ]\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/file_ext/v1/allowed_extensions?limit=119&before=before46&after=after46",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"file_ext",
										"v1",
										"allowed_extensions"
									],
									"query": [
										{
											"key": "limit",
											"value": "119"
										},
										{
											"key": "before",
											"value": "before46"
										},
										{
											"key": "after",
											"value": "after46"
										}
									]
								},
								"description": "Provides a RESTful API to iterate all file extensions configured by the tenant admin\nthat are allowed for the upload.  Pagination of this list is managed through a\ncombination of the optional request parameters and service-side managed maximums.\n\nPagination of the results is provided through the before or after input paramters\nand presented through the opaque cursor values provided as output from a previous\nresponse.  Only one of before or after or neither may be provided.\n\nDO NOT store cursors. Cursors can quickly become invalid if items are added or deleted.\nUse them only during a short-period of time that you are traversing the list.\n"
							},
							"status": "Invalid arguments were passed by the client\n",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_504",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/file_ext/v1/allowed_extensions?limit=119&before=before46&after=after46",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"file_ext",
										"v1",
										"allowed_extensions"
									],
									"query": [
										{
											"key": "limit",
											"value": "119"
										},
										{
											"key": "before",
											"value": "before46"
										},
										{
											"key": "after",
											"value": "after46"
										}
									]
								},
								"description": "Provides a RESTful API to iterate all file extensions configured by the tenant admin\nthat are allowed for the upload.  Pagination of this list is managed through a\ncombination of the optional request parameters and service-side managed maximums.\n\nPagination of the results is provided through the before or after input paramters\nand presented through the opaque cursor values provided as output from a previous\nresponse.  Only one of before or after or neither may be provided.\n\nDO NOT store cursors. Cursors can quickly become invalid if items are added or deleted.\nUse them only during a short-period of time that you are traversing the list.\n"
							},
							"status": "Timeout waiting on response at gateway\n",
							"code": 504,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "putAllowedFileExtension",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"extension\": \".txt\",\r\n  \"scope_internal\": false,\r\n  \"scope_external\": false,\r\n  \"source\": \"SYSTEM\"\r\n}"
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/file_ext/v1/allowed_extensions/:extension",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"file_ext",
								"v1",
								"allowed_extensions",
								":extension"
							],
							"variable": [
								{
									"key": "extension",
									"value": "extension46"
								}
							]
						},
						"description": "Provides a method to create or replace a specific file extension configured for upload\nsupport via an admin. The API treats the file extension in the path case-insensitively\nby converting it to lowecase.\n"
					},
					"response": [
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"extension\": \".txt\",\r\n  \"scope_internal\": false,\r\n  \"scope_external\": false,\r\n  \"source\": \"SYSTEM\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/file_ext/v1/allowed_extensions/:extension",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"file_ext",
										"v1",
										"allowed_extensions",
										":extension"
									],
									"variable": [
										{
											"key": "extension",
											"value": "extension46"
										}
									]
								},
								"description": "Provides a method to create or replace a specific file extension configured for upload\nsupport via an admin. The API treats the file extension in the path case-insensitively\nby converting it to lowecase.\n"
							},
							"status": "Invalid arguments were passed by the client: the file extension object specified\nthe source as 'system' yet the file extension is not known to the system (API cannot\ncreate system file extensions, only customer-defined file extensions), the extension\nin the path doesn't match the extension in the body, the length of the file extension\nexceeded the maximum length (64 characters)\n",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"extension\": \".txt\",\r\n  \"scope_internal\": false,\r\n  \"scope_external\": false,\r\n  \"source\": \"SYSTEM\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/file_ext/v1/allowed_extensions/:extension",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"file_ext",
										"v1",
										"allowed_extensions",
										":extension"
									],
									"variable": [
										{
											"key": "extension",
											"value": "extension46"
										}
									]
								},
								"description": "Provides a method to create or replace a specific file extension configured for upload\nsupport via an admin. The API treats the file extension in the path case-insensitively\nby converting it to lowecase.\n"
							},
							"status": "200 response",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"extension\": \".txt\",\r\n  \"scope_internal\": false,\r\n  \"scope_external\": false,\r\n  \"source\": \"SYSTEM\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"extension\": \".txt\",\r\n  \"scope_internal\": false,\r\n  \"scope_external\": false,\r\n  \"source\": \"SYSTEM\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/file_ext/v1/allowed_extensions/:extension",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"file_ext",
										"v1",
										"allowed_extensions",
										":extension"
									],
									"variable": [
										{
											"key": "extension",
											"value": "extension46"
										}
									]
								},
								"description": "Provides a method to create or replace a specific file extension configured for upload\nsupport via an admin. The API treats the file extension in the path case-insensitively\nby converting it to lowecase.\n"
							},
							"status": "Unexpected service error - a retry may work\n",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"extension\": \".txt\",\r\n  \"scope_internal\": false,\r\n  \"scope_external\": false,\r\n  \"source\": \"SYSTEM\"\r\n}"
								},
								"url": {
									"raw": "https://{{podUrl}}/file_ext/v1/allowed_extensions/:extension",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"file_ext",
										"v1",
										"allowed_extensions",
										":extension"
									],
									"variable": [
										{
											"key": "extension",
											"value": "extension46"
										}
									]
								},
								"description": "Provides a method to create or replace a specific file extension configured for upload\nsupport via an admin. The API treats the file extension in the path case-insensitively\nby converting it to lowecase.\n"
							},
							"status": "Authorization is not provided to this request\n",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						}
					]
				},
				{
					"name": "deleteAllowedFileExtension",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{podUrl}}/pod/file_ext/v1/allowed_extensions/:extension",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"file_ext",
								"v1",
								"allowed_extensions",
								":extension"
							],
							"variable": [
								{
									"key": "extension",
									"value": "extension46"
								}
							]
						},
						"description": "Provides a method to delete a specific file extension configured for upload\nsupport via an admin. The file extension identifying the resource is treated\ncase-insensitively by the API.\n"
					},
					"response": [
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/file_ext/v1/allowed_extensions/:extension",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"file_ext",
										"v1",
										"allowed_extensions",
										":extension"
									],
									"variable": [
										{
											"key": "extension",
											"value": "extension46"
										}
									]
								},
								"description": "Provides a method to delete a specific file extension configured for upload\nsupport via an admin. The file extension identifying the resource is treated\ncase-insensitively by the API.\n"
							},
							"status": "Invalid arguments were passed by the client\n",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/file_ext/v1/allowed_extensions/:extension",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"file_ext",
										"v1",
										"allowed_extensions",
										":extension"
									],
									"variable": [
										{
											"key": "extension",
											"value": "extension46"
										}
									]
								},
								"description": "Provides a method to delete a specific file extension configured for upload\nsupport via an admin. The file extension identifying the resource is treated\ncase-insensitively by the API.\n"
							},
							"status": "Authorization is not provided to this request\n",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/file_ext/v1/allowed_extensions/:extension",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"file_ext",
										"v1",
										"allowed_extensions",
										":extension"
									],
									"variable": [
										{
											"key": "extension",
											"value": "extension46"
										}
									]
								},
								"description": "Provides a method to delete a specific file extension configured for upload\nsupport via an admin. The file extension identifying the resource is treated\ncase-insensitively by the API.\n"
							},
							"status": "Unexpected service error - a retry may work\n",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_204",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{podUrl}}/file_ext/v1/allowed_extensions/:extension",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"file_ext",
										"v1",
										"allowed_extensions",
										":extension"
									],
									"variable": [
										{
											"key": "extension",
											"value": "extension46"
										}
									]
								},
								"description": "Provides a method to delete a specific file extension configured for upload\nsupport via an admin. The file extension identifying the resource is treated\ncase-insensitively by the API.\n"
							},
							"status": "204 response",
							"code": 204,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Retrieve the pod certificate that can be use to validate signed JWT tokens generated from the pod\n",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/podcert",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"podcert"
							]
						},
						"description": "Retrieve the pod certificate that can be use to validate signed JWT tokens generated from the pod\n"
					},
					"response": [
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/podcert",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"podcert"
									]
								},
								"description": "Retrieve the pod certificate that can be use to validate signed JWT tokens generated from the pod\n"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/podcert",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"podcert"
									]
								},
								"description": "Retrieve the pod certificate that can be use to validate signed JWT tokens generated from the pod\n"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"certificate\": \"certificate36\"\r\n}"
						}
					]
				},
				{
					"name": "Get supported attachment types for the pod",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sessionToken",
								"value": "{{sessionToken}}",
								"description": "Session authentication token."
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{podUrl}}/pod/v1/files/allowedTypes",
							"protocol": "https",
							"host": [
								"{{podUrl}}"
							],
							"path": [
								"pod",
								"v1",
								"files",
								"allowedTypes"
							]
						},
						"description": "Get supported attachment types for the pod"
					},
					"response": [
						{
							"name": "Response_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/files/allowedTypes",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"files",
										"allowedTypes"
									]
								},
								"description": "Get supported attachment types for the pod"
							},
							"status": "Unauthorized: Session tokens invalid.",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/files/allowedTypes",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"files",
										"allowedTypes"
									]
								},
								"description": "Get supported attachment types for the pod"
							},
							"status": "Forbidden: Caller lacks necessary entitlement.",
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_500",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/files/allowedTypes",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"files",
										"allowedTypes"
									]
								},
								"description": "Get supported attachment types for the pod"
							},
							"status": "Server error, see response body for further details.",
							"code": 500,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/files/allowedTypes",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"files",
										"allowedTypes"
									]
								},
								"description": "Get supported attachment types for the pod"
							},
							"status": "Client error, see response body for further details.",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\r\n  \"code\": 94,\r\n  \"message\": \"message36\"\r\n}"
						},
						{
							"name": "Response_200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "sessionToken",
										"value": "{{sessionToken}}",
										"description": "Session authentication token."
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{podUrl}}/pod/v1/files/allowedTypes",
									"protocol": "https",
									"host": [
										"{{podUrl}}"
									],
									"path": [
										"pod",
										"v1",
										"files",
										"allowedTypes"
									]
								},
								"description": "Get supported attachment types for the pod"
							},
							"status": "Success",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\r\n  \"response6\"\r\n]"
						}
					]
				}
			]
		}
	]
}