openapi: 3.0.0
info:
  version: 1.0.0
  title: Symphony API - Common Objects
  description: A set of standard objects that should be used by all microservices when defining their API contracts

paths: {}

components:
  schemas:
    CommonProperties:
      type: object
      description: Properties common to all resources
      properties:
        id:
          description: Unique ID of the resource
          type: string
        eTag:
          description: >-
            Unique tag for current version of the object. Should be used with "If-Match" header to prevent lost updates.
          type: string
        createdBy:
          description: ID of the user who created this resouces
          type: string
        createdDate:
          description: Date/time resouces was created in ISO-8601 format (YYYY-MM-DDThh:mm:ss.sZ)
          type: string
          format: 'date-time'
        updatedBy:
          description: ID of the user who last updated this resouces
          type: string
        updatedDate:
          description: Date/time of last update in ISO-8601 format (YYYY-MM-DDThh:mm:ss.sZ)
          type: string
          format: 'date-time'

    Error:
      description: Common error response body
      required:
        - code
        - message
      properties:
        code:
          description: >-
            An internal code that can be used by support/developers to quickly locate the line of code that generated
            the error response.
          type: string
        message:
          description: A human-readable error message
          type: string
        context:
          description: A name-value map of variables and their value necessary to construct the message
          type: object
          additionalProperties:
            type: string
        details:
          description: Additional data that might be included
          type: object

    PagedResponse:
      description: Common top level object defining envelope for endpoints that return paged data
      required:
        - data
        - pagination
      properties:
        data:
          description: A page of data.  Type depends on resource being accessed.
          type: array
          items:
            type: object
        pagination:
          $ref: '#/components/schemas/Pagination'

    Pagination:
      description: Pagination information
      required:
        - cursors
      properties:
        previous:
          description: >-
            Path to retrieve the previous page of data. If not present, the current page is the first page of data.
          type: string
        next:
          description: >-
            Path to retrieve the next page of data. If not present, the current page is the last page of data.
          type: string
        cursors:
          $ref: '#/components/schemas/PaginationCursors'

    PaginationCursors:
      description: Cursors for pagination
      properties:
        before:
          description: >-
            Cursor that points to the start of the current page of data.  If not present, the current page is
            the first page.
          type: string
        after:
          description: >-
            Cursor that points to the end of the current page of data.  If not present, the current page is
            the last page.
          type: string

    JsonPatch:
      type: array
      items:
        $ref: "#/components/schemas/PatchOperation"
    PatchOperation:
      description: A JSONPatch operation as defined by RFC 6902
      properties:
        op:
          type: string
          description: The operation to be performed
          enum:
            - "add"
            - "remove"
            - "replace"
            - "move"
            - "copy"
            - "test"
        path:
          type: string
          description: A JSON-Pointer
        value:
          type: object
          description: The value to be used within the operations.
        from:
          type: string
          description: A string containing a JSON Pointer value.

  parameters:
    idPathParameter:
      name: id
      in: path
      required: true
      description: The id of the resource to retrieve
      schema:
        type: string

    limitParameter:
      name: limit
      in: query
      required: false
      description: >-
        Specifies the maximum number of objects to return. It is possible that fewer than the specified number is
        returned, either due to reaching the end of the record set or due to data access rules that filter results
        of the back end query.  The number of returned objects should not be used to determine if there are more
        objects to retrieve.  Instead, the presence of the "next" and "previous" (see below) fields should be used.
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 100

    beforeParameter:
      name: before
      in: query
      required: false
      description: >-
        Cursor value that specifies that the returned page of data should consist of records that come before this
        cursor value (essentially the "previous" page).
      schema:
        type: string

    afterParameter:
      name: after
      in: query
      required: false
      description: >-
        Cursor value that specifies that the returned page of data should consist of records that come after this
        cursor value (essentially the "next" page).
      schema:
        type: string

    fieldsParameter:
      name: fields
      in: query
      required: false
      description: >-
        Specifies which resource fields to include.  If present, only the named fields are included.
        If not present, all fields are included.  The "id" and "eTag" fields are always included.
      example: name,type
      schema:
        type: string

    expandParameter:
      name: expand
      in: query
      required: false
      description: >-
        Specifies which ID fields can be expanded to include the whole object for which the ID is a reference.  Value
        is a comma-separated list of fields containing IDs.
      example: userId,itemIds
      schema:
        type: string

    sortParameter:
      name: sort
      in: query
      required: false
      description: >-
        Specifies which field to use for sorting returned records when more than one record is returned.  Syntax is:
        sort=[+|-]<field name>, where '+' indicates ascending order and '-' indicates descending order.  This parameter
        is used instead of 'sortOrder' when the value upon which to sort records is selectable by the caller.  Only
        one of 'sort' or 'sortOrder' can be included in the query.  See endpoint description for the list of fields
        that can be used with this parameter.
      example: +createdDate
      schema:
        type: string

    sortOrderParameter:
      name: sortOrder
      in: query
      required: false
      description: >-
        Specifies the sort order of the returned results.  This parameter is used instead of 'sort' parameter when
        the value upon which to sort records is not selectable by the caller. Only one of 'sort' or 'sortOrder' can be
        included in the query.  Possible values are 'asc' or 'desc'.
      example: asc
      schema:
        type: string

    qlParameter:
      name: ql
      in: query
      required: false
      description: >-
        Filter query using RSQL syntax.  Fields available for filtering should be specified in the documentation
        for each resource.
      example: name=="Kill Bill";year=gt=2003
      schema:
        type: string

    ifMatchParameter:
      in: header
      name: If-Match
      description: >-
        Current ETag value for the resource being mutated.  If the ETag value of the resource on the server doesn't
        match the value from the header, the resource will not be modified and a HTTP 412 response will be returned
        by the server.  The caller should GET the most recent version of the resource and try the request again.
        Only a single ETag value is supported.
      required: true
      allowEmptyValue: false
      schema:
        type: string

    beforeDateParameter:
      name: beforeDate
      description: Date before which changes to a resource won't be considered.
      in: query
      required: false
      schema:
        type: string

  headers:
    ETagHeader:
      description: Unique identifier for a version of a resource
      schema:
        type: string
    locationHeader:
      description: URI for the resource
      schema:
        type: string

  requestBodies:
    JsonPatchBody:
      description: Body for a JSON Patch request
      required: false
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagedResponse'

  responses:
    SuccessNoContent:
      description: Successful response.  No response body.

    Unauthorized:
      description: Unauthorized. Returned if JWT token verification failed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not found.  Returned if specified key is not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    PreconditionFailed:
      description: Precondition failed.  Returned if specified "If-Match" header doesn't match "ETag" from DB record to be deleted.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden.  Returned if the caller doesn't have the required entitlements to call an endpoint.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
